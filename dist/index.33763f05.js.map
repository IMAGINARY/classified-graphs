{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/seedrandom/lib/alea.js","node_modules/seedrandom/lib/xor128.js","node_modules/seedrandom/lib/xorwow.js","node_modules/seedrandom/lib/xorshift7.js","node_modules/seedrandom/lib/xor4096.js","node_modules/seedrandom/lib/tychei.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-url.js","node_modules/@parcel/runtime-js/lib/runtime-e6cc012133c373dd.js","src/ts/main.ts","src/ts/modesList.ts","src/ts/modes/ModeGirth.ts","src/ts/modes/ModeNumNodes.ts","<<jsx-config-pragma.js>>","src/ts/modes/ModeNumEdges.ts","src/ts/modes/ModeDegSequence.ts","src/ts/modes/ModeComponents.ts","src/ts/modes/ModeCircuitRank.ts","src/ts/modes/ModeDiameter.ts","src/ts/modes/ModeDetAdjacency.ts","node_modules/@babel/runtime/helpers/extends.js","node_modules/mathjs/lib/esm/core/config.js","node_modules/mathjs/lib/esm/utils/object.js","node_modules/mathjs/lib/esm/utils/is.js","node_modules/mathjs/lib/esm/core/function/config.js","node_modules/mathjs/lib/esm/entry/configReadonly.js","node_modules/mathjs/lib/esm/utils/number.js","node_modules/typed-function/lib/esm/typed-function.mjs","node_modules/mathjs/lib/esm/utils/bignumber/formatter.js","node_modules/mathjs/lib/esm/utils/string.js","node_modules/mathjs/lib/esm/error/DimensionError.js","node_modules/mathjs/lib/esm/error/IndexError.js","node_modules/mathjs/lib/esm/utils/array.js","node_modules/mathjs/lib/esm/utils/factory.js","node_modules/mathjs/lib/esm/utils/map.js","node_modules/mathjs/lib/esm/utils/customs.js","node_modules/mathjs/lib/esm/core/function/typed.js","node_modules/mathjs/lib/esm/type/resultset/ResultSet.js","node_modules/decimal.js/decimal.js","node_modules/mathjs/lib/esm/type/bignumber/BigNumber.js","node_modules/complex.js/complex.js","node_modules/mathjs/lib/esm/type/complex/Complex.js","node_modules/fraction.js/fraction.js","node_modules/mathjs/lib/esm/type/fraction/Fraction.js","node_modules/mathjs/lib/esm/type/matrix/Matrix.js","node_modules/mathjs/lib/esm/type/matrix/DenseMatrix.js","node_modules/mathjs/lib/esm/utils/lruQueue.js","node_modules/mathjs/lib/esm/utils/function.js","node_modules/mathjs/lib/esm/utils/collection.js","node_modules/mathjs/lib/esm/function/utils/isInteger.js","node_modules/mathjs/lib/esm/plain/number/arithmetic.js","node_modules/mathjs/lib/esm/plain/number/bitwise.js","node_modules/mathjs/lib/esm/plain/number/constants.js","node_modules/mathjs/lib/esm/plain/number/logical.js","node_modules/mathjs/lib/esm/utils/product.js","node_modules/mathjs/lib/esm/plain/number/probability.js","node_modules/mathjs/lib/esm/plain/number/trigonometry.js","node_modules/mathjs/lib/esm/plain/number/utils.js","node_modules/mathjs/lib/esm/function/utils/isNegative.js","node_modules/mathjs/lib/esm/function/utils/isZero.js","node_modules/mathjs/lib/esm/utils/bignumber/nearlyEqual.js","node_modules/mathjs/lib/esm/utils/complex.js","node_modules/mathjs/lib/esm/function/relational/compareUnits.js","node_modules/mathjs/lib/esm/function/relational/equalScalar.js","node_modules/mathjs/lib/esm/type/matrix/SparseMatrix.js","node_modules/mathjs/lib/esm/type/number.js","node_modules/mathjs/lib/esm/type/bignumber/function/bignumber.js","node_modules/mathjs/lib/esm/type/fraction/function/fraction.js","node_modules/mathjs/lib/esm/type/matrix/function/matrix.js","node_modules/mathjs/lib/esm/function/arithmetic/unaryMinus.js","node_modules/mathjs/lib/esm/function/arithmetic/addScalar.js","node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo11xS0s.js","node_modules/mathjs/lib/esm/function/arithmetic/ceil.js","node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo12xSfs.js","node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo14xDs.js","node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo01xDSid.js","node_modules/mathjs/lib/esm/function/arithmetic/floor.js","node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo10xSids.js","node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo13xDD.js","node_modules/mathjs/lib/esm/type/matrix/utils/matrixAlgorithmSuite.js","node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo03xDSf.js","node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo05xSfSf.js","node_modules/mathjs/lib/esm/function/arithmetic/multiplyScalar.js","node_modules/mathjs/lib/esm/function/arithmetic/multiply.js","node_modules/mathjs/lib/esm/function/arithmetic/subtract.js","node_modules/mathjs/lib/esm/function/arithmetic/invmod.js","node_modules/mathjs/lib/esm/function/bitwise/bitAnd.js","node_modules/mathjs/lib/esm/function/complex/conj.js","node_modules/mathjs/lib/esm/utils/noop.js","node_modules/mathjs/lib/esm/error/ArgumentsError.js","node_modules/mathjs/lib/esm/function/matrix/resize.js","node_modules/mathjs/lib/esm/function/matrix/size.js","node_modules/mathjs/lib/esm/function/matrix/fft.js","node_modules/mathjs/lib/esm/function/special/erf.js","node_modules/mathjs/lib/esm/function/string/bin.js","node_modules/mathjs/lib/esm/function/string/oct.js","node_modules/mathjs/lib/esm/function/string/hex.js","node_modules/mathjs/lib/esm/function/unit/to.js","node_modules/mathjs/lib/esm/function/utils/numeric.js","node_modules/mathjs/lib/esm/function/arithmetic/divideScalar.js","node_modules/mathjs/lib/esm/function/algebra/solver/lsolveAll.js","node_modules/mathjs/lib/esm/function/algebra/solver/usolveAll.js","node_modules/javascript-natural-sort/naturalSort.js","node_modules/mathjs/lib/esm/function/relational/compareText.js","node_modules/mathjs/lib/esm/function/relational/equal.js","node_modules/mathjs/lib/esm/function/relational/unequal.js","node_modules/@babel/runtime/helpers/defineProperty.js","node_modules/mathjs/lib/esm/utils/bignumber/constants.js","node_modules/mathjs/lib/esm/type/unit/Unit.js","node_modules/mathjs/lib/esm/function/matrix/dot.js","node_modules/mathjs/lib/esm/function/algebra/solver/lusolve.js","node_modules/mathjs/lib/esm/function/matrix/det.js","node_modules/mathjs/lib/esm/function/matrix/eigs/complexEigs.js","node_modules/mathjs/lib/esm/plain/number/combinations.js","node_modules/seedrandom/index.js","node_modules/seedrandom/seedrandom.js","node_modules/mathjs/lib/esm/function/probability/util/seededRNG.js","node_modules/mathjs/lib/esm/type/unit/physicalConstants.js","node_modules/mathjs/lib/esm/entry/pureFunctionsAny.generated.js","src/ts/modes/ModeAdjacencyMatrix.ts","node_modules/@parcel/runtime-js/lib/helpers/get-worker-url.js","node_modules/@parcel/runtime-js/lib/runtime-34d8ff7c41a89b2c.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010\n// http://baagoe.com/en/RandomMusings/javascript/\n// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror\n// Original work is under MIT license -\n\n// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\n\n(function(global, module, define) {\n\nfunction Alea(seed) {\n  var me = this, mash = Mash();\n\n  me.next = function() {\n    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32\n    me.s0 = me.s1;\n    me.s1 = me.s2;\n    return me.s2 = t - (me.c = t | 0);\n  };\n\n  // Apply the seeding algorithm from Baagoe.\n  me.c = 1;\n  me.s0 = mash(' ');\n  me.s1 = mash(' ');\n  me.s2 = mash(' ');\n  me.s0 -= mash(seed);\n  if (me.s0 < 0) { me.s0 += 1; }\n  me.s1 -= mash(seed);\n  if (me.s1 < 0) { me.s1 += 1; }\n  me.s2 -= mash(seed);\n  if (me.s2 < 0) { me.s2 += 1; }\n  mash = null;\n}\n\nfunction copy(f, t) {\n  t.c = f.c;\n  t.s0 = f.s0;\n  t.s1 = f.s1;\n  t.s2 = f.s2;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new Alea(seed),\n      state = opts && opts.state,\n      prng = xg.next;\n  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; }\n  prng.double = function() {\n    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n  };\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nfunction Mash() {\n  var n = 0xefc8249d;\n\n  var mash = function(data) {\n    data = String(data);\n    for (var i = 0; i < data.length; i++) {\n      n += data.charCodeAt(i);\n      var h = 0.02519603282416938 * n;\n      n = h >>> 0;\n      h -= n;\n      h *= n;\n      n = h >>> 0;\n      h -= n;\n      n += h * 0x100000000; // 2^32\n    }\n    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n  };\n\n  return mash;\n}\n\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.alea = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n\n  // Set up generator function.\n  me.next = function() {\n    var t = me.x ^ (me.x << 11);\n    me.x = me.y;\n    me.y = me.z;\n    me.z = me.w;\n    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);\n  };\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor128 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xorwow\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var t = (me.x ^ (me.x >>> 2));\n    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;\n    return (me.d = (me.d + 362437 | 0)) +\n       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;\n  };\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n  me.v = 0;\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    if (k == strseed.length) {\n      me.d = me.x << 10 ^ me.x >>> 4;\n    }\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  t.v = f.v;\n  t.d = f.d;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorwow = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xorshift7\" algorithm by\n// François Panneton and Pierre L'ecuyer:\n// \"On the Xorgshift Random Number Generators\"\n// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    // Update xor generator.\n    var X = me.x, i = me.i, t, v, w;\n    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);\n    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);\n    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);\n    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);\n    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);\n    X[i] = v;\n    me.i = (i + 1) & 7;\n    return v;\n  };\n\n  function init(me, seed) {\n    var j, w, X = [];\n\n    if (seed === (seed | 0)) {\n      // Seed state array using a 32-bit integer.\n      w = X[0] = seed;\n    } else {\n      // Seed state using a string.\n      seed = '' + seed;\n      for (j = 0; j < seed.length; ++j) {\n        X[j & 7] = (X[j & 7] << 15) ^\n            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);\n      }\n    }\n    // Enforce an array length of 8, not all zeroes.\n    while (X.length < 8) X.push(0);\n    for (j = 0; j < 8 && X[j] === 0; ++j);\n    if (j == 8) w = X[7] = -1; else w = X[j];\n\n    me.x = X;\n    me.i = 0;\n\n    // Discard an initial 256 values.\n    for (j = 256; j > 0; --j) {\n      me.next();\n    }\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.x = f.x.slice();\n  t.i = f.i;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.x) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorshift7 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n","// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// Usage:\n//\n// var xor4096 = require('xor4096');\n// random = xor4096(1);                        // Seed with int32 or string.\n// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.\n// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    var w = me.w,\n        X = me.X, i = me.i, t, v;\n    // Update Weyl generator.\n    me.w = w = (w + 0x61c88647) | 0;\n    // Update xor generator.\n    v = X[(i + 34) & 127];\n    t = X[i = ((i + 1) & 127)];\n    v ^= v << 13;\n    t ^= t << 17;\n    v ^= v >>> 15;\n    t ^= t >>> 12;\n    // Update Xor generator array state.\n    v = X[i] = v ^ t;\n    me.i = i;\n    // Result is the combination.\n    return (v + (w ^ (w >>> 16))) | 0;\n  };\n\n  function init(me, seed) {\n    var t, v, i, j, w, X = [], limit = 128;\n    if (seed === (seed | 0)) {\n      // Numeric seeds initialize v, which is used to generates X.\n      v = seed;\n      seed = null;\n    } else {\n      // String seeds are mixed into v and X one character at a time.\n      seed = seed + '\\0';\n      v = 0;\n      limit = Math.max(limit, seed.length);\n    }\n    // Initialize circular array and weyl value.\n    for (i = 0, j = -32; j < limit; ++j) {\n      // Put the unicode characters into the array, and shuffle them.\n      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);\n      // After 32 shuffles, take v as the starting w value.\n      if (j === 0) w = v;\n      v ^= v << 10;\n      v ^= v >>> 15;\n      v ^= v << 4;\n      v ^= v >>> 13;\n      if (j >= 0) {\n        w = (w + 0x61c88647) | 0;     // Weyl.\n        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.\n        i = (0 == t) ? i + 1 : 0;     // Count zeroes.\n      }\n    }\n    // We have detected all zeroes; make the key nonzero.\n    if (i >= 128) {\n      X[(seed && seed.length || 0) & 127] = -1;\n    }\n    // Run the generator 512 times to further mix the state before using it.\n    // Factoring this as a function slows the main generator, so it is just\n    // unrolled here.  The weyl generator is not advanced while warming up.\n    i = 127;\n    for (j = 4 * 128; j > 0; --j) {\n      v = X[(i + 34) & 127];\n      t = X[i = ((i + 1) & 127)];\n      v ^= v << 13;\n      t ^= t << 17;\n      v ^= v >>> 15;\n      t ^= t >>> 12;\n      X[i] = v ^ t;\n    }\n    // Storing state as object members is faster than using closure variables.\n    me.w = w;\n    me.X = X;\n    me.i = i;\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.i = f.i;\n  t.w = f.w;\n  t.X = f.X.slice();\n  return t;\n};\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.X) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor4096 = impl;\n}\n\n})(\n  this,                                     // window object or global\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n","// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var b = me.b, c = me.c, d = me.d, a = me.a;\n    b = (b << 25) ^ (b >>> 7) ^ c;\n    c = (c - d) | 0;\n    d = (d << 24) ^ (d >>> 8) ^ a;\n    a = (a - b) | 0;\n    me.b = b = (b << 20) ^ (b >>> 12) ^ c;\n    me.c = c = (c - d) | 0;\n    me.d = (d << 16) ^ (c >>> 16) ^ a;\n    return me.a = (a - b) | 0;\n  };\n\n  /* The following is non-inverted tyche, which has better internal\n   * bit diffusion, but which is about 25% slower than tyche-i in JS.\n  me.next = function() {\n    var a = me.a, b = me.b, c = me.c, d = me.d;\n    a = (me.a + me.b | 0) >>> 0;\n    d = me.d ^ a; d = d << 16 ^ d >>> 16;\n    c = me.c + d | 0;\n    b = me.b ^ c; b = b << 12 ^ d >>> 20;\n    me.a = a = a + b | 0;\n    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\n    me.c = c = c + d | 0;\n    b = b ^ c;\n    return me.b = (b << 7 ^ b >>> 25);\n  }\n  */\n\n  me.a = 0;\n  me.b = 0;\n  me.c = 2654435769 | 0;\n  me.d = 1367130551;\n\n  if (seed === Math.floor(seed)) {\n    // Integer seed.\n    me.a = (seed / 0x100000000) | 0;\n    me.b = seed | 0;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 20; k++) {\n    me.b ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.a = f.a;\n  t.b = f.b;\n  t.c = f.c;\n  t.d = f.d;\n  return t;\n};\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.tychei = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","\"use strict\";\n\nvar bundleURL = {};\n\nfunction getBundleURLCached(id) {\n  var value = bundleURL[id];\n\n  if (!value) {\n    value = getBundleURL();\n    bundleURL[id] = value;\n  }\n\n  return value;\n}\n\nfunction getBundleURL() {\n  try {\n    throw new Error();\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp|(chrome|moz)-extension):\\/\\/[^)\\n]+/g);\n\n    if (matches) {\n      // The first two stack frames will be this function and getBundleURLCached.\n      // Use the 3rd one, which will be a runtime in the original bundle.\n      return getBaseURL(matches[2]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp|(chrome|moz)-extension):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\n\n\nfunction getOrigin(url) {\n  var matches = ('' + url).match(/(https?|file|ftp|(chrome|moz)-extension):\\/\\/[^/]+/);\n\n  if (!matches) {\n    throw new Error('Origin not found');\n  }\n\n  return matches[0];\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"hHmmC\\\":\\\"index.33763f05.js\\\",\\\"7xBTE\\\":\\\"sgiso_worker.b7491b5b.js\\\",\\\"hBKZF\\\":\\\"index.4f9ea6eb.js\\\"}\"));","// import assert from 'assert';\nimport cytoscape from 'cytoscape';\nimport ready from 'document-ready';\nimport * as d3 from 'd3-selection';\nimport i18next from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport locI18next from 'loc-i18next';\n\nimport './side-effects';\n\nimport { i18nextOptions, langList } from './constants';\n\nimport { cy, parameters, toolbarModes, infoboxModes } from './modesList';\nimport ModeNull from './modes/ModeNull';\nimport { Mode } from './modes/modes';\n\nimport * as assets from './assets';\n\n// eslint-disable-next-line no-void\nvoid i18next.use(LanguageDetector).init(i18nextOptions);\nconst localize = locI18next.init(i18next);\n\n/**\n * Specify types of global variables that are not yet defined on 'window'.\n * Technically, this declaration is not correct, because the variables are\n * only defined in main, but not before it is executed. The correct way would be\n * ```\n * declare global {\n *   interface Window {\n *     cy: cytoscape.Core | undefined;\n *     d3: typeof d3 | undefined;\n *   }\n * }\n * ```\n * But then you would need to check for 'undefined' everywhere in your code\n * where the global variables are used, which is quite cumbersome for debugging.\n *\n * A cleaner way would to do it would be to define a method on window that returns\n * a promise that resolves with cy after main is executed.\n * Similar to navigator.requestMIDIAccess().\n */\ndeclare global {\n  interface Window {\n    cy: cytoscape.Core;\n    d3: typeof d3;\n    findIso: (a: void) => void;\n  }\n}\nwindow.d3 = d3;\n// window.parameters = parameters;\n\nfunction main() {\n  // After this, window.cy is shadowing the function-local cy.\n  // This is because the globalThis pointer refers to 'window' in the browser environment.\n  // Both have no type assigned on the window object.\n  // Same for the global vs. local d3 object.\n  window.cy = cy;\n\n  const findIsomorphisms = () => {\n    if (window.Worker) {\n      const worker = new Worker(\n        new URL('./modes/sgiso_worker.ts', import.meta.url),\n        {\n          type: 'module',\n        },\n      );\n      const A = cy.elements().utils().adjacencyMatrix();\n\n      worker.postMessage([A, A]);\n\n      worker.onmessage = () => {\n        // console.log(e.data);\n      };\n    } else {\n      // eslint-disable-next-line no-console\n      console.log(\"Your browser doesn't support web workers.\");\n    }\n  };\n\n  window.findIso = findIsomorphisms;\n\n  // d3.select('#output').html(i18next.t('Connected_components')); // test\n\n  const modeNull = new ModeNull(cy, parameters);\n  let primaryMode: Mode = modeNull;\n  let secondaryMode: Mode = infoboxModes[0].modeObj;\n\n  primaryMode.activate();\n  secondaryMode.activate();\n\n  function switchPrimaryMode(newMode: Mode) {\n    primaryMode.deactivate();\n    primaryMode = newMode;\n    primaryMode.activate();\n  }\n\n  function switchSecondaryMode(newMode: Mode) {\n    secondaryMode.deactivate();\n    secondaryMode = newMode;\n    secondaryMode.activate();\n  }\n\n  // Make Language Selector\n  d3.select('#langSelector')\n    .select('.dropdown-menu')\n    .selectAll('li')\n    .data(langList)\n    .enter()\n    .append('li')\n    .append('a')\n    .classed('dropdown-item', true)\n    .attr('href', '#')\n    .on('click', (ev, d) => {\n      i18next\n        .changeLanguage(d.isoCode)\n        .then(() => localize('.translate'))\n        .catch((reason) => {\n          // TODO: Handle the error properly instead of ignoring it.\n          // eslint-disable-next-line no-console\n          console.error(`Changing to language ${d.isoCode} failed.`, reason);\n        });\n    })\n    .text((d) => d.endonym);\n\n  // Make toolbar buttons\n  const buttons = d3\n    .select('#toolbar')\n    .selectAll('button')\n    .data(toolbarModes)\n    .enter()\n    .append('button')\n    .attr('id', (d) => `btn-${d.modeName}`);\n\n  buttons\n    .append('img')\n    .attr('src', (d) => d.icon)\n    .classed('toolbar-button', true);\n\n  d3.select('#btn-modeLayout')\n    .append('select')\n    .attr('id', 'selectLayout')\n    .selectAll('option')\n    .data([\n      { value: 'circle', textKey: 'Circle' },\n      { value: 'random', textKey: 'Random' },\n    ])\n    .enter()\n    .append('option')\n    .attr('value', (d) => d.value)\n    // .classed('translate', true)\n    // .attr('data-i18n', (d) => d.textKey);\n    .html((d) => d.textKey);\n\n  buttons\n    .append('div')\n    .classed('translate', true)\n    .attr('data-i18n', (d) => d.textKey);\n  // .html((d) => i18next.t(d.textKey));\n\n  buttons.on('click', (ev, d) => {\n    switchPrimaryMode(d.modeObj);\n  });\n\n  // Make Load modal\n  d3.select('#btn-modeLoad')\n    .attr('data-bs-toggle', 'modal')\n    .attr('data-bs-target', '#exampleModal');\n\n  // Make infobox items\n  function updateInfo() {\n    const infoboxItems = d3\n      .select('#infobox')\n      .selectAll<HTMLDivElement, unknown>('div.infoItem')\n      .data(infoboxModes);\n\n    const newItems = infoboxItems\n      .enter()\n      .append('div')\n      .attr('id', (d) => `infoItem-${d.modeName}`)\n      .classed('infoItem', true);\n\n    newItems // Info icon\n      .append('img')\n      .attr('src', assets.iconInfo)\n      .attr('data-bs-toggle', 'collapse')\n      .attr('data-bs-target', (d) => `#infoItem-text-${d.modeName}`)\n      .on('click', (ev: Event) => {\n        ev.stopPropagation();\n      });\n\n    newItems.append('div').classed('outputText', true); // container for text\n\n    newItems // Tip text\n      .append('div')\n      .attr('id', (d) => `infoItem-text-${d.modeName}`)\n      .attr('data-bs-parent', '#infobox')\n      .attr('data-bs-toggle', 'collapse')\n      .classed('tipText', true)\n      .classed('collapse', true)\n      .classed('translate', true)\n      .attr('data-i18n', (d) => `[html]${d.textKey}_Tip`);\n    // .html((d) => i18next.t(`${d.textKey}_Tip`));\n\n    newItems.on('click', (ev: MouseEvent, d) => {\n      const target = ev.currentTarget;\n      if (target instanceof Element) {\n        if (d.modeObj === secondaryMode) {\n          switchSecondaryMode(modeNull);\n          d3.select(target).classed('infoItemActive', false);\n        } else {\n          switchSecondaryMode(d.modeObj);\n          d3.select('.infoItemActive').classed('infoItemActive', false);\n          d3.select(target).classed('infoItemActive', true);\n        }\n      }\n    });\n\n    // update selection\n    infoboxItems\n      .merge(newItems)\n      .select('.outputText')\n      .html(\n        (d) =>\n          `<span class=\"translate\" data-i18n=\"[html]${d.textKey}\">\n          ${i18next.t(d.textKey)}\n          </span>: \n          ${d.modeObj.infobox()}`,\n      );\n\n    // if (!d3.select('.infoItemActive').empty()) {\n    //   d3.select('.infoItemActive').datum().modeObj.render();\n    if (secondaryMode !== modeNull) {\n      secondaryMode.render();\n    }\n  }\n\n  // window.infoboxModes = infoboxModes;\n\n  cy.on('cm-graph-updated', updateInfo);\n\n  updateInfo();\n  d3.select('.infoItem').classed('infoItemActive', true);\n\n  // //Other test functions\n  // function showGraphExport() {\n  //   const json = cy.json();\n  //   const jsonString = JSON.stringify(json, null, 4);\n  //   d3.select('#outputText').text(jsonString);\n  // }\n  // d3.select('#showJSON').on('click', showGraphExport);\n\n  localize('.translate');\n}\n\nready(main);\n","/* this file creates the cy instance, the parameters instance, and the arrays of modes to be used */\nimport cytoscape from 'cytoscape';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { Mode, Parameters } from './modes/modes';\nimport { cyOptions } from './constants';\n\nimport * as assets from './assets';\n\nimport ModeNull from './modes/ModeNull';\nimport ModeNode from './modes/ModeNode';\nimport ModeEdge from './modes/ModeEdge';\n// import ModeDijkstra from './modes/ModeDijkstra';\nimport ModeGirth from './modes/ModeGirth';\nimport ModeNumNodes from './modes/ModeNumNodes';\nimport ModeNumEdges from './modes/ModeNumEdges'; // ModeNumEdges -> ES Module\nimport ModeDegSequence from './modes/ModeDegSequence';\nimport ModeComponents from './modes/ModeComponents';\nimport ModeCircuitRank from './modes/ModeCircuitRank';\nimport ModeDiameter from './modes/ModeDiameter';\nimport ModeExport from './modes/ModeExport';\nimport ModeImport from './modes/ModeImport';\nimport ModeLoad from './modes/ModeLoad';\n// import ModeLayout from './modes/ModeLayout';\nimport ModeClear from './modes/ModeClear';\nimport ModeDetAdjacency from './modes/ModeDetAdjacency';\nimport ModeAdjacencyMatrix from './modes/ModeAdjacencyMatrix';\n\nconst parameters: Parameters = {\n  idNodeCount: 1,\n  idEdgeCount: 1,\n  outputContainer: document.getElementById('output') as HTMLElement,\n  nodeIndex: [],\n};\n\nconst cy = cytoscape({\n  ...cloneDeep(cyOptions),\n  ...{ container: document.getElementById('cy') },\n});\n\ntype ModeConfig = {\n  modeName: string;\n  textKey: string;\n  icon: string;\n  modeObj: Mode;\n};\n\nconst toolbarModes: ModeConfig[] = [\n  {\n    modeName: 'modeClear',\n    textKey: 'Clear',\n    icon: assets.iconClear,\n    modeObj: new ModeClear(cy, parameters),\n  },\n  {\n    modeName: 'modeExport',\n    textKey: 'Export',\n    icon: assets.iconExport,\n    modeObj: new ModeExport(cy, parameters),\n  },\n  {\n    modeName: 'modeImport',\n    textKey: 'Import',\n    icon: assets.iconImport,\n    modeObj: new ModeImport(cy, parameters),\n  },\n  {\n    modeName: 'modeLoad',\n    textKey: 'Load',\n    icon: assets.iconLoad,\n    modeObj: new ModeLoad(cy, parameters),\n  },\n  {\n    modeName: 'modeNull',\n    textKey: 'Pointer',\n    icon: assets.iconPointer,\n    modeObj: new ModeNull(cy, parameters),\n  },\n  {\n    modeName: 'modeNode',\n    textKey: 'Nodes',\n    icon: assets.iconNode,\n    modeObj: new ModeNode(cy, parameters),\n  },\n  {\n    modeName: 'modeEdge',\n    textKey: 'Edges',\n    icon: assets.iconEdge,\n    modeObj: new ModeEdge(cy, parameters),\n  },\n  // {\n  //   modeName: 'modeLayout',\n  //   textKey: 'Layout',\n  //   icon: assets.iconEdge,\n  //   modeObj: new ModeLayout(cy, parameters),\n  // },\n  // {\n  //   modeName: 'modeDijkstra',\n  //   textKey: 'Shortest_path',\n  //   icon: assets.iconDijkstra,\n  //   modeObj: new ModeDijkstra(cy, parameters),\n  // },\n];\n\nconst infoboxModes: ModeConfig[] = [\n  {\n    modeName: 'modeNumNodes',\n    textKey: 'Order',\n    icon: assets.iconGirth,\n    modeObj: new ModeNumNodes(cy, parameters),\n  },\n  {\n    modeName: 'modeNumEdges',\n    textKey: 'Size',\n    icon: assets.iconGirth,\n    modeObj: new ModeNumEdges(cy, parameters),\n  },\n  {\n    modeName: 'modeGirth',\n    textKey: 'Girth',\n    icon: assets.iconGirth,\n    modeObj: new ModeGirth(cy, parameters),\n  },\n  {\n    modeName: 'modeDegSequence',\n    textKey: 'Degree_sequence',\n    icon: assets.iconGirth,\n    modeObj: new ModeDegSequence(cy, parameters),\n  },\n  {\n    modeName: 'modeCompponents',\n    textKey: 'Connected_components',\n    icon: assets.iconGirth,\n    modeObj: new ModeComponents(cy, parameters),\n  },\n  {\n    modeName: 'modeCircuitRank',\n    textKey: 'Circuit_rank',\n    icon: assets.iconGirth,\n    modeObj: new ModeCircuitRank(cy, parameters),\n  },\n  {\n    modeName: 'modeDiameter',\n    textKey: 'Diameter',\n    icon: assets.iconGirth,\n    modeObj: new ModeDiameter(cy, parameters),\n  },\n  {\n    modeName: 'modeDetAdjacency',\n    textKey: 'Adjacency_det',\n    icon: assets.iconGirth,\n    modeObj: new ModeDetAdjacency(cy, parameters),\n  },\n  {\n    modeName: 'modeAdjacencyMatrix',\n    textKey: 'Adjacency_matrix',\n    icon: assets.iconGirth,\n    modeObj: new ModeAdjacencyMatrix(cy, parameters),\n  },\n];\n\nexport { cy, parameters, toolbarModes, infoboxModes };\n","import { Core } from 'cytoscape';\nimport { Mode, Parameters } from './modes';\n\nexport default class ModeGirth implements Mode {\n  cy;\n\n  parameters;\n\n  constructor(cy: Core, parameters: Parameters) {\n    this.cy = cy;\n    this.parameters = parameters;\n  }\n\n  activate = () => {\n    this.render();\n  };\n\n  render = () => {\n    this.cy.elements().removeClass('highlighted');\n    const girth = this.cy.elements().invariants().girth();\n    girth.path.addClass('highlighted');\n  };\n\n  infobox = () => {\n    const girth = this.cy.elements().invariants().girth();\n    return girth.value.toString();\n  };\n\n  deactivate = () => {\n    this.cy.elements().removeClass('highlighted');\n  };\n}\n","import { Core } from 'cytoscape';\nimport { Mode, Parameters } from './modes';\n\nexport default class ModeNumNodes implements Mode {\n  cy;\n\n  parameters;\n\n  constructor(cy: Core, parameters: Parameters) {\n    this.cy = cy;\n    this.parameters = parameters;\n  }\n\n  activate() {\n    this.render();\n  }\n\n  render() {\n    this.cy.elements().removeClass('highlighted');\n    this.cy.elements().nodes().addClass('highlighted');\n  }\n\n  infobox() {\n    return this.cy.elements().nodes().size().toString();\n  }\n\n  deactivate() {\n    this.cy.elements().removeClass('highlighted');\n  }\n}\n",null,"import { Core } from 'cytoscape';\nimport { Mode, Parameters } from './modes';\n\nexport default class ModeNumEdges implements Mode {\n  cy;\n\n  parameters;\n\n  constructor(cy: Core, parameters: Parameters) {\n    this.cy = cy;\n    this.parameters = parameters;\n  }\n\n  activate() {\n    this.render();\n  }\n\n  render() {\n    this.cy.elements().removeClass('highlighted');\n    this.cy.elements().edges().addClass('highlighted');\n  }\n\n  infobox() {\n    return this.cy.elements().edges().size().toString();\n  }\n\n  deactivate() {\n    this.cy.elements().removeClass('highlighted');\n  }\n}\n","import { Core, NodeSingular } from 'cytoscape';\nimport { Mode, Parameters } from './modes';\n\nexport default class ModeDegSequence implements Mode {\n  cy;\n\n  parameters;\n\n  constructor(cy: Core, parameters: Parameters) {\n    this.cy = cy;\n    this.parameters = parameters;\n  }\n\n  activate = () => {\n    this.render();\n  };\n\n  render = () => {\n    this.cy.elements().removeClass('highlighted');\n    this.cy\n      .elements()\n      .nodes()\n      .style('label', (n: NodeSingular) => n.degree(true));\n  };\n\n  infobox = () => {\n    const seq = this.cy\n      .elements()\n      .nodes()\n      .map((n) => n.degree(true));\n\n    return seq.sort((a, b) => b - a).join();\n  };\n\n  deactivate = () => {\n    this.cy.elements().nodes().style('label', '');\n  };\n}\n","import { Core } from 'cytoscape';\nimport { Mode, Parameters } from './modes';\n\nexport default class ModeComponents implements Mode {\n  cy;\n\n  parameters;\n\n  viewInterval: ReturnType<typeof setInterval>; // which is number in the browser but not in Node.\n\n  constructor(cy: Core, parameters: Parameters) {\n    this.cy = cy;\n    this.parameters = parameters;\n    this.viewInterval = 0;\n  }\n\n  activate = () => {\n    this.render();\n  };\n\n  render = () => {\n    const comps = this.cy.elements().components();\n    let i = 0;\n    const N = comps.length;\n    const renderComponent = () => {\n      this.cy.elements().removeClass('highlighted');\n      comps[i]?.addClass('highlighted');\n      i = (i + 1) % N;\n    };\n    clearInterval(this.viewInterval);\n\n    this.viewInterval = setInterval(renderComponent, 1000);\n  };\n\n  infobox = () => {\n    const comps = this.cy.elements().components();\n\n    return comps.length.toString();\n  };\n\n  deactivate = () => {\n    this.cy.elements().removeClass('highlighted');\n    clearInterval(this.viewInterval);\n  };\n}\n","import { Core } from 'cytoscape';\nimport { Mode, Parameters } from './modes';\n\nexport default class ModeCircuitRank implements Mode {\n  cy;\n\n  parameters;\n\n  viewInterval: ReturnType<typeof setInterval>;\n\n  constructor(cy: Core, parameters: Parameters) {\n    this.cy = cy;\n    this.parameters = parameters;\n    this.viewInterval = 0 as unknown as ReturnType<typeof setInterval>;\n  }\n\n  activate = () => {\n    this.render();\n  };\n\n  render = () => {\n    const cycles = this.cy.elements().invariants().circuitRank();\n    let i = 0;\n    const N = cycles.length;\n    const renderComponent = () => {\n      this.cy.elements().removeClass('highlighted');\n      cycles[i]?.addClass('highlighted');\n      i = (i + 1) % N;\n    };\n\n    clearInterval(this.viewInterval);\n    this.viewInterval = setInterval(renderComponent, 1000);\n  };\n\n  infobox = () => {\n    const cycles = this.cy.elements().invariants().circuitRank();\n    return cycles.length.toString();\n  };\n\n  deactivate = () => {\n    this.cy.elements().removeClass('highlighted');\n    clearInterval(this.viewInterval);\n  };\n}\n","import { Core } from 'cytoscape';\nimport { Mode, Parameters } from './modes';\n\nexport default class ModeDiameter implements Mode {\n  cy;\n\n  parameters;\n\n  constructor(cy: Core, parameters: Parameters) {\n    this.cy = cy;\n    this.parameters = parameters;\n  }\n\n  activate = () => {\n    this.render();\n  };\n\n  render = () => {\n    this.cy.elements().removeClass('highlighted');\n    const diameter = this.cy.elements().invariants().diameter();\n    diameter.path.addClass('highlighted');\n  };\n\n  infobox = () => {\n    const diameter = this.cy.elements().invariants().diameter();\n    return diameter.value.toString();\n  };\n\n  deactivate = () => {\n    this.cy.elements().removeClass('highlighted');\n  };\n}\n","import { Core, NodeSingular } from 'cytoscape';\nimport { det } from 'mathjs';\nimport { Mode, Parameters } from './modes';\n\nexport default class ModeDetAdjacency implements Mode {\n  cy;\n\n  parameters;\n\n  constructor(cy: Core, parameters: Parameters) {\n    this.cy = cy;\n    this.parameters = parameters;\n  }\n\n  activate = () => {\n    this.render();\n  };\n\n  render = () => {\n    this.cy.elements().removeClass('highlighted');\n  };\n\n  infobox = () => {\n    if (this.cy.nodes().size() > 0) {\n      const A = this.cy\n        .elements()\n        .utils()\n        .adjacencyMatrix({\n          indexing: (n: NodeSingular) =>\n            this.parameters.nodeIndex.indexOf(n.id()),\n        });\n      const d = det(A);\n      return d.toString();\n    }\n    return '';\n  };\n\n  deactivate = () => {\n    this.cy.elements().removeClass('highlighted');\n  };\n}\n","function _extends() {\n  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _extends.apply(this, arguments);\n}\n\nmodule.exports = _extends, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","export var DEFAULT_CONFIG = {\n  // minimum relative difference between two compared values,\n  // used by all comparison functions\n  epsilon: 1e-12,\n  // type of default matrix output. Choose 'matrix' (default) or 'array'\n  matrix: 'Matrix',\n  // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction\n  number: 'number',\n  // number of significant digits in BigNumbers\n  precision: 64,\n  // predictable output type of functions. When true, output type depends only\n  // on the input types. When false (default), output type can vary depending\n  // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when\n  // predictable is false, and returns `NaN` when true.\n  predictable: false,\n  // random seed for seeded pseudo random number generation\n  // null = randomly seed\n  randomSeed: null\n};","import { isBigNumber } from './is.js';\n/**\n * Clone an object\n *\n *     clone(x)\n *\n * Can clone any primitive type, array, and object.\n * If x has a function clone, this function will be invoked to clone the object.\n *\n * @param {*} x\n * @return {*} clone\n */\n\nexport function clone(x) {\n  var type = typeof x; // immutable primitive types\n\n  if (type === 'number' || type === 'string' || type === 'boolean' || x === null || x === undefined) {\n    return x;\n  } // use clone function of the object when available\n\n\n  if (typeof x.clone === 'function') {\n    return x.clone();\n  } // array\n\n\n  if (Array.isArray(x)) {\n    return x.map(function (value) {\n      return clone(value);\n    });\n  }\n\n  if (x instanceof Date) return new Date(x.valueOf());\n  if (isBigNumber(x)) return x; // bignumbers are immutable\n\n  if (x instanceof RegExp) throw new TypeError('Cannot clone ' + x); // TODO: clone a RegExp\n  // object\n\n  return mapObject(x, clone);\n}\n/**\n * Apply map to all properties of an object\n * @param {Object} object\n * @param {function} callback\n * @return {Object} Returns a copy of the object with mapped properties\n */\n\nexport function mapObject(object, callback) {\n  var clone = {};\n\n  for (var key in object) {\n    if (hasOwnProperty(object, key)) {\n      clone[key] = callback(object[key]);\n    }\n  }\n\n  return clone;\n}\n/**\n * Extend object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @return {Object} a\n */\n\nexport function extend(a, b) {\n  for (var prop in b) {\n    if (hasOwnProperty(b, prop)) {\n      a[prop] = b[prop];\n    }\n  }\n\n  return a;\n}\n/**\n * Deep extend an object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @returns {Object}\n */\n\nexport function deepExtend(a, b) {\n  // TODO: add support for Arrays to deepExtend\n  if (Array.isArray(b)) {\n    throw new TypeError('Arrays are not supported by deepExtend');\n  }\n\n  for (var prop in b) {\n    // We check against prop not being in Object.prototype or Function.prototype\n    // to prevent polluting for example Object.__proto__.\n    if (hasOwnProperty(b, prop) && !(prop in Object.prototype) && !(prop in Function.prototype)) {\n      if (b[prop] && b[prop].constructor === Object) {\n        if (a[prop] === undefined) {\n          a[prop] = {};\n        }\n\n        if (a[prop] && a[prop].constructor === Object) {\n          deepExtend(a[prop], b[prop]);\n        } else {\n          a[prop] = b[prop];\n        }\n      } else if (Array.isArray(b[prop])) {\n        throw new TypeError('Arrays are not supported by deepExtend');\n      } else {\n        a[prop] = b[prop];\n      }\n    }\n  }\n\n  return a;\n}\n/**\n * Deep test equality of all fields in two pairs of arrays or objects.\n * Compares values and functions strictly (ie. 2 is not the same as '2').\n * @param {Array | Object} a\n * @param {Array | Object} b\n * @returns {boolean}\n */\n\nexport function deepStrictEqual(a, b) {\n  var prop, i, len;\n\n  if (Array.isArray(a)) {\n    if (!Array.isArray(b)) {\n      return false;\n    }\n\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    for (i = 0, len = a.length; i < len; i++) {\n      if (!deepStrictEqual(a[i], b[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  } else if (typeof a === 'function') {\n    return a === b;\n  } else if (a instanceof Object) {\n    if (Array.isArray(b) || !(b instanceof Object)) {\n      return false;\n    }\n\n    for (prop in a) {\n      // noinspection JSUnfilteredForInLoop\n      if (!(prop in b) || !deepStrictEqual(a[prop], b[prop])) {\n        return false;\n      }\n    }\n\n    for (prop in b) {\n      // noinspection JSUnfilteredForInLoop\n      if (!(prop in a)) {\n        return false;\n      }\n    }\n\n    return true;\n  } else {\n    return a === b;\n  }\n}\n/**\n * Recursively flatten a nested object.\n * @param {Object} nestedObject\n * @return {Object} Returns the flattened object\n */\n\nexport function deepFlatten(nestedObject) {\n  var flattenedObject = {};\n\n  _deepFlatten(nestedObject, flattenedObject);\n\n  return flattenedObject;\n} // helper function used by deepFlatten\n\nfunction _deepFlatten(nestedObject, flattenedObject) {\n  for (var prop in nestedObject) {\n    if (hasOwnProperty(nestedObject, prop)) {\n      var value = nestedObject[prop];\n\n      if (typeof value === 'object' && value !== null) {\n        _deepFlatten(value, flattenedObject);\n      } else {\n        flattenedObject[prop] = value;\n      }\n    }\n  }\n}\n/**\n * Test whether the current JavaScript engine supports Object.defineProperty\n * @returns {boolean} returns true if supported\n */\n\n\nexport function canDefineProperty() {\n  // test needed for broken IE8 implementation\n  try {\n    if (Object.defineProperty) {\n      Object.defineProperty({}, 'x', {\n        get: function get() {\n          return null;\n        }\n      });\n      return true;\n    }\n  } catch (e) {}\n\n  return false;\n}\n/**\n * Attach a lazy loading property to a constant.\n * The given function `fn` is called once when the property is first requested.\n *\n * @param {Object} object         Object where to add the property\n * @param {string} prop           Property name\n * @param {Function} valueResolver Function returning the property value. Called\n *                                without arguments.\n */\n\nexport function lazy(object, prop, valueResolver) {\n  var _uninitialized = true;\n\n  var _value;\n\n  Object.defineProperty(object, prop, {\n    get: function get() {\n      if (_uninitialized) {\n        _value = valueResolver();\n        _uninitialized = false;\n      }\n\n      return _value;\n    },\n    set: function set(value) {\n      _value = value;\n      _uninitialized = false;\n    },\n    configurable: true,\n    enumerable: true\n  });\n}\n/**\n * Traverse a path into an object.\n * When a namespace is missing, it will be created\n * @param {Object} object\n * @param {string | string[]} path   A dot separated string like 'name.space'\n * @return {Object} Returns the object at the end of the path\n */\n\nexport function traverse(object, path) {\n  if (path && typeof path === 'string') {\n    return traverse(object, path.split('.'));\n  }\n\n  var obj = object;\n\n  if (path) {\n    for (var i = 0; i < path.length; i++) {\n      var key = path[i];\n\n      if (!(key in obj)) {\n        obj[key] = {};\n      }\n\n      obj = obj[key];\n    }\n  }\n\n  return obj;\n}\n/**\n * A safe hasOwnProperty\n * @param {Object} object\n * @param {string} property\n */\n\nexport function hasOwnProperty(object, property) {\n  return object && Object.hasOwnProperty.call(object, property);\n}\n/**\n * Test whether an object is a factory. a factory has fields:\n *\n * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)\n * - name: string (optional)\n * - path: string    A dot separated path (optional)\n * - math: boolean   If true (false by default), the math namespace is passed\n *                   as fifth argument of the factory function\n *\n * @param {*} object\n * @returns {boolean}\n */\n\nexport function isLegacyFactory(object) {\n  return object && typeof object.factory === 'function';\n}\n/**\n * Get a nested property from an object\n * @param {Object} object\n * @param {string | string[]} path\n * @returns {Object}\n */\n\nexport function get(object, path) {\n  if (typeof path === 'string') {\n    if (isPath(path)) {\n      return get(object, path.split('.'));\n    } else {\n      return object[path];\n    }\n  }\n\n  var child = object;\n\n  for (var i = 0; i < path.length; i++) {\n    var key = path[i];\n    child = child ? child[key] : undefined;\n  }\n\n  return child;\n}\n/**\n * Set a nested property in an object\n * Mutates the object itself\n * If the path doesn't exist, it will be created\n * @param {Object} object\n * @param {string | string[]} path\n * @param {*} value\n * @returns {Object}\n */\n\nexport function set(object, path, value) {\n  if (typeof path === 'string') {\n    if (isPath(path)) {\n      return set(object, path.split('.'), value);\n    } else {\n      object[path] = value;\n      return object;\n    }\n  }\n\n  var child = object;\n\n  for (var i = 0; i < path.length - 1; i++) {\n    var key = path[i];\n\n    if (child[key] === undefined) {\n      child[key] = {};\n    }\n\n    child = child[key];\n  }\n\n  if (path.length > 0) {\n    var lastKey = path[path.length - 1];\n    child[lastKey] = value;\n  }\n\n  return object;\n}\n/**\n * Create an object composed of the picked object properties\n * @param {Object} object\n * @param {string[]} properties\n * @param {function} [transform] Optional value to transform a value when picking it\n * @return {Object}\n */\n\nexport function pick(object, properties, transform) {\n  var copy = {};\n\n  for (var i = 0; i < properties.length; i++) {\n    var key = properties[i];\n    var value = get(object, key);\n\n    if (value !== undefined) {\n      set(copy, key, transform ? transform(value, key) : value);\n    }\n  }\n\n  return copy;\n}\n/**\n * Shallow version of pick, creating an object composed of the picked object properties\n * but not for nested properties\n * @param {Object} object\n * @param {string[]} properties\n * @return {Object}\n */\n\nexport function pickShallow(object, properties) {\n  var copy = {};\n\n  for (var i = 0; i < properties.length; i++) {\n    var key = properties[i];\n    var value = object[key];\n\n    if (value !== undefined) {\n      copy[key] = value;\n    }\n  }\n\n  return copy;\n}\nexport function values(object) {\n  return Object.keys(object).map(key => object[key]);\n} // helper function to test whether a string contains a path like 'user.name'\n\nfunction isPath(str) {\n  return str.indexOf('.') !== -1;\n}","// type checks for all known types\n//\n// note that:\n//\n// - check by duck-typing on a property like `isUnit`, instead of checking instanceof.\n//   instanceof cannot be used because that would not allow to pass data from\n//   one instance of math.js to another since each has it's own instance of Unit.\n// - check the `isUnit` property via the constructor, so there will be no\n//   matches for \"fake\" instances like plain objects with a property `isUnit`.\n//   That is important for security reasons.\n// - It must not be possible to override the type checks used internally,\n//   for security reasons, so these functions are not exposed in the expression\n//   parser.\nexport function isNumber(x) {\n  return typeof x === 'number';\n}\nexport function isBigNumber(x) {\n  if (!x || typeof x !== 'object' || typeof x.constructor !== 'function') {\n    return false;\n  }\n\n  if (x.isBigNumber === true && typeof x.constructor.prototype === 'object' && x.constructor.prototype.isBigNumber === true) {\n    return true;\n  }\n\n  if (typeof x.constructor.isDecimal === 'function' && x.constructor.isDecimal(x) === true) {\n    return true;\n  }\n\n  return false;\n}\nexport function isComplex(x) {\n  return x && typeof x === 'object' && Object.getPrototypeOf(x).isComplex === true || false;\n}\nexport function isFraction(x) {\n  return x && typeof x === 'object' && Object.getPrototypeOf(x).isFraction === true || false;\n}\nexport function isUnit(x) {\n  return x && x.constructor.prototype.isUnit === true || false;\n}\nexport function isString(x) {\n  return typeof x === 'string';\n}\nexport var isArray = Array.isArray;\nexport function isMatrix(x) {\n  return x && x.constructor.prototype.isMatrix === true || false;\n}\n/**\n * Test whether a value is a collection: an Array or Matrix\n * @param {*} x\n * @returns {boolean} isCollection\n */\n\nexport function isCollection(x) {\n  return Array.isArray(x) || isMatrix(x);\n}\nexport function isDenseMatrix(x) {\n  return x && x.isDenseMatrix && x.constructor.prototype.isMatrix === true || false;\n}\nexport function isSparseMatrix(x) {\n  return x && x.isSparseMatrix && x.constructor.prototype.isMatrix === true || false;\n}\nexport function isRange(x) {\n  return x && x.constructor.prototype.isRange === true || false;\n}\nexport function isIndex(x) {\n  return x && x.constructor.prototype.isIndex === true || false;\n}\nexport function isBoolean(x) {\n  return typeof x === 'boolean';\n}\nexport function isResultSet(x) {\n  return x && x.constructor.prototype.isResultSet === true || false;\n}\nexport function isHelp(x) {\n  return x && x.constructor.prototype.isHelp === true || false;\n}\nexport function isFunction(x) {\n  return typeof x === 'function';\n}\nexport function isDate(x) {\n  return x instanceof Date;\n}\nexport function isRegExp(x) {\n  return x instanceof RegExp;\n}\nexport function isObject(x) {\n  return !!(x && typeof x === 'object' && x.constructor === Object && !isComplex(x) && !isFraction(x));\n}\nexport function isNull(x) {\n  return x === null;\n}\nexport function isUndefined(x) {\n  return x === undefined;\n}\nexport function isAccessorNode(x) {\n  return x && x.isAccessorNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isArrayNode(x) {\n  return x && x.isArrayNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isAssignmentNode(x) {\n  return x && x.isAssignmentNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isBlockNode(x) {\n  return x && x.isBlockNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isConditionalNode(x) {\n  return x && x.isConditionalNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isConstantNode(x) {\n  return x && x.isConstantNode === true && x.constructor.prototype.isNode === true || false;\n}\n/* Very specialized: returns true for those nodes which in the numerator of\n   a fraction means that the division in that fraction has precedence over implicit\n   multiplication, e.g. -2/3 x parses as (-2/3) x and 3/4 x parses as (3/4) x but\n   6!/8 x parses as 6! / (8x). It is located here because it is shared between\n   parse.js and OperatorNode.js (for parsing and printing, respectively).\n\n   This should *not* be exported from mathjs, unlike most of the tests here.\n   Its name does not start with 'is' to prevent utils/snapshot.js from thinking\n   it should be exported.\n*/\n\nexport function rule2Node(node) {\n  return isConstantNode(node) || isOperatorNode(node) && node.args.length === 1 && isConstantNode(node.args[0]) && '-+~'.includes(node.op);\n}\nexport function isFunctionAssignmentNode(x) {\n  return x && x.isFunctionAssignmentNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isFunctionNode(x) {\n  return x && x.isFunctionNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isIndexNode(x) {\n  return x && x.isIndexNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isNode(x) {\n  return x && x.isNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isObjectNode(x) {\n  return x && x.isObjectNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isOperatorNode(x) {\n  return x && x.isOperatorNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isParenthesisNode(x) {\n  return x && x.isParenthesisNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isRangeNode(x) {\n  return x && x.isRangeNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isSymbolNode(x) {\n  return x && x.isSymbolNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isChain(x) {\n  return x && x.constructor.prototype.isChain === true || false;\n}\nexport function typeOf(x) {\n  var t = typeof x;\n\n  if (t === 'object') {\n    if (x === null) return 'null';\n    if (isBigNumber(x)) return 'BigNumber'; // Special: weird mashup with Decimal\n\n    if (x.constructor && x.constructor.name) return x.constructor.name;\n    return 'Object'; // just in case\n  }\n\n  return t; // can be 'string', 'number', 'boolean', 'function', 'bigint', ...\n}","import { clone, mapObject, deepExtend } from '../../utils/object.js';\nimport { DEFAULT_CONFIG } from '../config.js';\nexport var MATRIX_OPTIONS = ['Matrix', 'Array']; // valid values for option matrix\n\nexport var NUMBER_OPTIONS = ['number', 'BigNumber', 'Fraction']; // valid values for option number\n\nexport function configFactory(config, emit) {\n  /**\n   * Set configuration options for math.js, and get current options.\n   * Will emit a 'config' event, with arguments (curr, prev, changes).\n   *\n   * This function is only available on a mathjs instance created using `create`.\n   *\n   * Syntax:\n   *\n   *     math.config(config: Object): Object\n   *\n   * Examples:\n   *\n   *\n   *     import { create, all } from 'mathjs'\n   *\n   *     // create a mathjs instance\n   *     const math = create(all)\n   *\n   *     math.config().number                // outputs 'number'\n   *     math.evaluate('0.4')                // outputs number 0.4\n   *     math.config({number: 'Fraction'})\n   *     math.evaluate('0.4')                // outputs Fraction 2/5\n   *\n   * @param {Object} [options] Available options:\n   *                            {number} epsilon\n   *                              Minimum relative difference between two\n   *                              compared values, used by all comparison functions.\n   *                            {string} matrix\n   *                              A string 'Matrix' (default) or 'Array'.\n   *                            {string} number\n   *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n   *                            {number} precision\n   *                              The number of significant digits for BigNumbers.\n   *                              Not applicable for Numbers.\n   *                            {string} parenthesis\n   *                              How to display parentheses in LaTeX and string\n   *                              output.\n   *                            {string} randomSeed\n   *                              Random seed for seeded pseudo random number generator.\n   *                              Set to null to randomly seed.\n   * @return {Object} Returns the current configuration\n   */\n  function _config(options) {\n    if (options) {\n      var prev = mapObject(config, clone); // validate some of the options\n\n      validateOption(options, 'matrix', MATRIX_OPTIONS);\n      validateOption(options, 'number', NUMBER_OPTIONS); // merge options\n\n      deepExtend(config, options);\n      var curr = mapObject(config, clone);\n      var changes = mapObject(options, clone); // emit 'config' event\n\n      emit('config', curr, prev, changes);\n      return curr;\n    } else {\n      return mapObject(config, clone);\n    }\n  } // attach the valid options to the function so they can be extended\n\n\n  _config.MATRIX_OPTIONS = MATRIX_OPTIONS;\n  _config.NUMBER_OPTIONS = NUMBER_OPTIONS; // attach the config properties as readonly properties to the config function\n\n  Object.keys(DEFAULT_CONFIG).forEach(key => {\n    Object.defineProperty(_config, key, {\n      get: () => config[key],\n      enumerable: true,\n      configurable: true\n    });\n  });\n  return _config;\n}\n/**\n * Test whether an Array contains a specific item.\n * @param {Array.<string>} array\n * @param {string} item\n * @return {boolean}\n */\n\nfunction contains(array, item) {\n  return array.indexOf(item) !== -1;\n}\n/**\n * Validate an option\n * @param {Object} options         Object with options\n * @param {string} name            Name of the option to validate\n * @param {Array.<string>} values  Array with valid values for this option\n */\n\n\nfunction validateOption(options, name, values) {\n  if (options[name] !== undefined && !contains(values, options[name])) {\n    // unknown value\n    console.warn('Warning: Unknown value \"' + options[name] + '\" for configuration option \"' + name + '\". ' + 'Available options: ' + values.map(value => JSON.stringify(value)).join(', ') + '.');\n  }\n}","import _extends from \"@babel/runtime/helpers/extends\";\nimport { DEFAULT_CONFIG } from '../core/config.js';\nimport { MATRIX_OPTIONS, NUMBER_OPTIONS } from '../core/function/config.js'; // create a read-only version of config\n\nexport var config = /* #__PURE__ */function config(options) {\n  if (options) {\n    throw new Error('The global config is readonly. \\n' + 'Please create a mathjs instance if you want to change the default configuration. \\n' + 'Example:\\n' + '\\n' + '  import { create, all } from \\'mathjs\\';\\n' + '  const mathjs = create(all);\\n' + '  mathjs.config({ number: \\'BigNumber\\' });\\n');\n  }\n\n  return Object.freeze(DEFAULT_CONFIG);\n};\n\n_extends(config, DEFAULT_CONFIG, {\n  MATRIX_OPTIONS,\n  NUMBER_OPTIONS\n});","import { isNumber } from './is.js';\n/**\n * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue\n */\n\n/**\n * Check if a number is integer\n * @param {number | boolean} value\n * @return {boolean} isInteger\n */\n\nexport function isInteger(value) {\n  if (typeof value === 'boolean') {\n    return true;\n  }\n\n  return isFinite(value) ? value === Math.round(value) : false;\n}\n/**\n * Calculate the sign of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var sign = /* #__PURE__ */Math.sign || function (x) {\n  if (x > 0) {\n    return 1;\n  } else if (x < 0) {\n    return -1;\n  } else {\n    return 0;\n  }\n};\n/**\n * Calculate the base-2 logarithm of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var log2 = /* #__PURE__ */Math.log2 || function log2(x) {\n  return Math.log(x) / Math.LN2;\n};\n/**\n * Calculate the base-10 logarithm of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var log10 = /* #__PURE__ */Math.log10 || function log10(x) {\n  return Math.log(x) / Math.LN10;\n};\n/**\n * Calculate the natural logarithm of a number + 1\n * @param {number} x\n * @returns {number}\n */\n\nexport var log1p = /* #__PURE__ */Math.log1p || function (x) {\n  return Math.log(x + 1);\n};\n/**\n * Calculate cubic root for a number\n *\n * Code from es6-shim.js:\n *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577\n *\n * @param {number} x\n * @returns {number} Returns the cubic root of x\n */\n\nexport var cbrt = /* #__PURE__ */Math.cbrt || function cbrt(x) {\n  if (x === 0) {\n    return x;\n  }\n\n  var negate = x < 0;\n  var result;\n\n  if (negate) {\n    x = -x;\n  }\n\n  if (isFinite(x)) {\n    result = Math.exp(Math.log(x) / 3); // from https://en.wikipedia.org/wiki/Cube_root#Numerical_methods\n\n    result = (x / (result * result) + 2 * result) / 3;\n  } else {\n    result = x;\n  }\n\n  return negate ? -result : result;\n};\n/**\n * Calculates exponentiation minus 1\n * @param {number} x\n * @return {number} res\n */\n\nexport var expm1 = /* #__PURE__ */Math.expm1 || function expm1(x) {\n  return x >= 2e-4 || x <= -2e-4 ? Math.exp(x) - 1 : x + x * x / 2 + x * x * x / 6;\n};\n/**\n * Formats a number in a given base\n * @param {number} n\n * @param {number} base\n * @param {number} size\n * @returns {string}\n */\n\nfunction formatNumberToBase(n, base, size) {\n  var prefixes = {\n    2: '0b',\n    8: '0o',\n    16: '0x'\n  };\n  var prefix = prefixes[base];\n  var suffix = '';\n\n  if (size) {\n    if (size < 1) {\n      throw new Error('size must be in greater than 0');\n    }\n\n    if (!isInteger(size)) {\n      throw new Error('size must be an integer');\n    }\n\n    if (n > 2 ** (size - 1) - 1 || n < -(2 ** (size - 1))) {\n      throw new Error(\"Value must be in range [-2^\".concat(size - 1, \", 2^\").concat(size - 1, \"-1]\"));\n    }\n\n    if (!isInteger(n)) {\n      throw new Error('Value must be an integer');\n    }\n\n    if (n < 0) {\n      n = n + 2 ** size;\n    }\n\n    suffix = \"i\".concat(size);\n  }\n\n  var sign = '';\n\n  if (n < 0) {\n    n = -n;\n    sign = '-';\n  }\n\n  return \"\".concat(sign).concat(prefix).concat(n.toString(base)).concat(suffix);\n}\n/**\n * Convert a number to a formatted string representation.\n *\n * Syntax:\n *\n *    format(value)\n *    format(value, options)\n *    format(value, precision)\n *    format(value, fn)\n *\n * Where:\n *\n *    {number} value   The value to be formatted\n *    {Object} options An object with formatting options. Available options:\n *                     {string} notation\n *                         Number notation. Choose from:\n *                         'fixed'          Always use regular number notation.\n *                                          For example '123.40' and '14000000'\n *                         'exponential'    Always use exponential notation.\n *                                          For example '1.234e+2' and '1.4e+7'\n *                         'engineering'    Always use engineering notation.\n *                                          For example '123.4e+0' and '14.0e+6'\n *                         'auto' (default) Regular number notation for numbers\n *                                          having an absolute value between\n *                                          `lowerExp` and `upperExp` bounds, and\n *                                          uses exponential notation elsewhere.\n *                                          Lower bound is included, upper bound\n *                                          is excluded.\n *                                          For example '123.4' and '1.4e7'.\n *                         'bin', 'oct, or\n *                         'hex'            Format the number using binary, octal,\n *                                          or hexadecimal notation.\n *                                          For example '0b1101' and '0x10fe'.\n *                     {number} wordSize    The word size in bits to use for formatting\n *                                          in binary, octal, or hexadecimal notation.\n *                                          To be used only with 'bin', 'oct', or 'hex'\n *                                          values for 'notation' option. When this option\n *                                          is defined the value is formatted as a signed\n *                                          twos complement integer of the given word size\n *                                          and the size suffix is appended to the output.\n *                                          For example\n *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.\n *                                          Default value is undefined.\n *                     {number} precision   A number between 0 and 16 to round\n *                                          the digits of the number.\n *                                          In case of notations 'exponential',\n *                                          'engineering', and 'auto',\n *                                          `precision` defines the total\n *                                          number of significant digits returned.\n *                                          In case of notation 'fixed',\n *                                          `precision` defines the number of\n *                                          significant digits after the decimal\n *                                          point.\n *                                          `precision` is undefined by default,\n *                                          not rounding any digits.\n *                     {number} lowerExp    Exponent determining the lower boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `-3`.\n *                     {number} upperExp    Exponent determining the upper boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `5`.\n *    {Function} fn    A custom formatting function. Can be used to override the\n *                     built-in notations. Function `fn` is called with `value` as\n *                     parameter and must return a string. Is useful for example to\n *                     format all values inside a matrix in a particular way.\n *\n * Examples:\n *\n *    format(6.4)                                        // '6.4'\n *    format(1240000)                                    // '1.24e6'\n *    format(1/3)                                        // '0.3333333333333333'\n *    format(1/3, 3)                                     // '0.333'\n *    format(21385, 2)                                   // '21000'\n *    format(12.071, {notation: 'fixed'})                // '12'\n *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'\n *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'\n *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'\n *\n * @param {number} value\n * @param {Object | Function | number} [options]\n * @return {string} str The formatted value\n */\n\n\nexport function format(value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  } // handle special cases\n\n\n  if (value === Infinity) {\n    return 'Infinity';\n  } else if (value === -Infinity) {\n    return '-Infinity';\n  } else if (isNaN(value)) {\n    return 'NaN';\n  } // default values for options\n\n\n  var notation = 'auto';\n  var precision;\n  var wordSize;\n\n  if (options) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    } // determine precision from options\n\n\n    if (isNumber(options)) {\n      precision = options;\n    } else if (isNumber(options.precision)) {\n      precision = options.precision;\n    }\n\n    if (options.wordSize) {\n      wordSize = options.wordSize;\n\n      if (typeof wordSize !== 'number') {\n        throw new Error('Option \"wordSize\" must be a number');\n      }\n    }\n  } // handle the various notations\n\n\n  switch (notation) {\n    case 'fixed':\n      return toFixed(value, precision);\n\n    case 'exponential':\n      return toExponential(value, precision);\n\n    case 'engineering':\n      return toEngineering(value, precision);\n\n    case 'bin':\n      return formatNumberToBase(value, 2, wordSize);\n\n    case 'oct':\n      return formatNumberToBase(value, 8, wordSize);\n\n    case 'hex':\n      return formatNumberToBase(value, 16, wordSize);\n\n    case 'auto':\n      // remove trailing zeros after the decimal point\n      return toPrecision(value, precision, options && options).replace(/((\\.\\d*?)(0+))($|e)/, function () {\n        var digits = arguments[2];\n        var e = arguments[4];\n        return digits !== '.' ? digits + e : e;\n      });\n\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' + 'Choose \"auto\", \"exponential\", \"fixed\", \"bin\", \"oct\", or \"hex.');\n  }\n}\n/**\n * Split a number into sign, coefficients, and exponent\n * @param {number | string} value\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n */\n\nexport function splitNumber(value) {\n  // parse the input value\n  var match = String(value).toLowerCase().match(/^(-?)(\\d+\\.?\\d*)(e([+-]?\\d+))?$/);\n\n  if (!match) {\n    throw new SyntaxError('Invalid number ' + value);\n  }\n\n  var sign = match[1];\n  var digits = match[2];\n  var exponent = parseFloat(match[4] || '0');\n  var dot = digits.indexOf('.');\n  exponent += dot !== -1 ? dot - 1 : digits.length - 1;\n  var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)\n  .replace(/^0*/, function (zeros) {\n    // remove leading zeros, add their count to the exponent\n    exponent -= zeros.length;\n    return '';\n  }).replace(/0*$/, '') // remove trailing zeros\n  .split('').map(function (d) {\n    return parseInt(d);\n  });\n\n  if (coefficients.length === 0) {\n    coefficients.push(0);\n    exponent++;\n  }\n\n  return {\n    sign,\n    coefficients,\n    exponent\n  };\n}\n/**\n * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]        Optional number of significant figures to return.\n */\n\nexport function toEngineering(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  var split = splitNumber(value);\n  var rounded = roundDigits(split, precision);\n  var e = rounded.exponent;\n  var c = rounded.coefficients; // find nearest lower multiple of 3 for exponent\n\n  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;\n\n  if (isNumber(precision)) {\n    // add zeroes to give correct sig figs\n    while (precision > c.length || e - newExp + 1 > c.length) {\n      c.push(0);\n    }\n  } else {\n    // concatenate coefficients with necessary zeros\n    // add zeros if necessary (for example: 1e+8 -> 100e+6)\n    var missingZeros = Math.abs(e - newExp) - (c.length - 1);\n\n    for (var i = 0; i < missingZeros; i++) {\n      c.push(0);\n    }\n  } // find difference in exponents\n\n\n  var expDiff = Math.abs(e - newExp);\n  var decimalIdx = 1; // push decimal index over by expDiff times\n\n  while (expDiff > 0) {\n    decimalIdx++;\n    expDiff--;\n  } // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.\n  // otherwise concat with the rest of the coefficients\n\n\n  var decimals = c.slice(decimalIdx).join('');\n  var decimalVal = isNumber(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';\n  var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();\n  return rounded.sign + str;\n}\n/**\n * Format a number with fixed notation.\n * @param {number | string} value\n * @param {number} [precision=undefined]  Optional number of decimals after the\n *                                        decimal point. null by default.\n */\n\nexport function toFixed(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  var splitValue = splitNumber(value);\n  var rounded = typeof precision === 'number' ? roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;\n  var c = rounded.coefficients;\n  var p = rounded.exponent + 1; // exponent may have changed\n  // append zeros if needed\n\n  var pp = p + (precision || 0);\n\n  if (c.length < pp) {\n    c = c.concat(zeros(pp - c.length));\n  } // prepend zeros if needed\n\n\n  if (p < 0) {\n    c = zeros(-p + 1).concat(c);\n    p = 1;\n  } // insert a dot if needed\n\n\n  if (p < c.length) {\n    c.splice(p, 0, p === 0 ? '0.' : '.');\n  }\n\n  return rounded.sign + c.join('');\n}\n/**\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]  Number of digits in formatted output.\n *                              If not provided, the maximum available digits\n *                              is used.\n */\n\nexport function toExponential(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  } // round if needed, else create a clone\n\n\n  var split = splitNumber(value);\n  var rounded = precision ? roundDigits(split, precision) : split;\n  var c = rounded.coefficients;\n  var e = rounded.exponent; // append zeros if needed\n\n  if (c.length < precision) {\n    c = c.concat(zeros(precision - c.length));\n  } // format as `C.CCCe+EEE` or `C.CCCe-EEE`\n\n\n  var first = c.shift();\n  return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;\n}\n/**\n * Format a number with a certain precision\n * @param {number | string} value\n * @param {number} [precision=undefined] Optional number of digits.\n * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]\n *                                       By default:\n *                                         lowerExp = -3 (incl)\n *                                         upper = +5 (excl)\n * @return {string}\n */\n\nexport function toPrecision(value, precision, options) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  } // determine lower and upper bound for exponential notation.\n\n\n  var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;\n  var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;\n  var split = splitNumber(value);\n  var rounded = precision ? roundDigits(split, precision) : split;\n\n  if (rounded.exponent < lowerExp || rounded.exponent >= upperExp) {\n    // exponential notation\n    return toExponential(value, precision);\n  } else {\n    var c = rounded.coefficients;\n    var e = rounded.exponent; // append trailing zeros\n\n    if (c.length < precision) {\n      c = c.concat(zeros(precision - c.length));\n    } // append trailing zeros\n    // TODO: simplify the next statement\n\n\n    c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0))); // prepend zeros\n\n    c = zeros(-e).concat(c);\n    var dot = e > 0 ? e : 0;\n\n    if (dot < c.length - 1) {\n      c.splice(dot + 1, 0, '.');\n    }\n\n    return rounded.sign + c.join('');\n  }\n}\n/**\n * Round the number of digits of a number *\n * @param {SplitValue} split       A value split with .splitNumber(value)\n * @param {number} precision  A positive integer\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n *              with rounded digits\n */\n\nexport function roundDigits(split, precision) {\n  // create a clone\n  var rounded = {\n    sign: split.sign,\n    coefficients: split.coefficients,\n    exponent: split.exponent\n  };\n  var c = rounded.coefficients; // prepend zeros if needed\n\n  while (precision <= 0) {\n    c.unshift(0);\n    rounded.exponent++;\n    precision++;\n  }\n\n  if (c.length > precision) {\n    var removed = c.splice(precision, c.length - precision);\n\n    if (removed[0] >= 5) {\n      var i = precision - 1;\n      c[i]++;\n\n      while (c[i] === 10) {\n        c.pop();\n\n        if (i === 0) {\n          c.unshift(0);\n          rounded.exponent++;\n          i++;\n        }\n\n        i--;\n        c[i]++;\n      }\n    }\n  }\n\n  return rounded;\n}\n/**\n * Create an array filled with zeros.\n * @param {number} length\n * @return {Array}\n */\n\nfunction zeros(length) {\n  var arr = [];\n\n  for (var i = 0; i < length; i++) {\n    arr.push(0);\n  }\n\n  return arr;\n}\n/**\n * Count the number of significant digits of a number.\n *\n * For example:\n *   2.34 returns 3\n *   0.0034 returns 2\n *   120.5e+30 returns 4\n *\n * @param {number} value\n * @return {number} digits   Number of significant digits\n */\n\n\nexport function digits(value) {\n  return value.toExponential().replace(/e.*$/, '') // remove exponential notation\n  .replace(/^0\\.?0*|\\./, '') // remove decimal point and leading zeros\n  .length;\n}\n/**\n * Minimum number added to one that makes the result different than one\n */\n\nexport var DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;\n/**\n * Compares two floating point numbers.\n * @param {number} x          First value to compare\n * @param {number} y          Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n*/\n\nexport function nearlyEqual(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x === y;\n  }\n\n  if (x === y) {\n    return true;\n  } // NaN\n\n\n  if (isNaN(x) || isNaN(y)) {\n    return false;\n  } // at this point x and y should be finite\n\n\n  if (isFinite(x) && isFinite(y)) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = Math.abs(x - y);\n\n    if (diff < DBL_EPSILON) {\n      return true;\n    } else {\n      // use relative error\n      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;\n    }\n  } // Infinite and Number or negative Infinite and positive Infinite cases\n\n\n  return false;\n}\n/**\n * Calculate the hyperbolic arccos of a number\n * @param {number} x\n * @return {number}\n */\n\nexport var acosh = Math.acosh || function (x) {\n  return Math.log(Math.sqrt(x * x - 1) + x);\n};\nexport var asinh = Math.asinh || function (x) {\n  return Math.log(Math.sqrt(x * x + 1) + x);\n};\n/**\n * Calculate the hyperbolic arctangent of a number\n * @param {number} x\n * @return {number}\n */\n\nexport var atanh = Math.atanh || function (x) {\n  return Math.log((1 + x) / (1 - x)) / 2;\n};\n/**\n * Calculate the hyperbolic cosine of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var cosh = Math.cosh || function (x) {\n  return (Math.exp(x) + Math.exp(-x)) / 2;\n};\n/**\n * Calculate the hyperbolic sine of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var sinh = Math.sinh || function (x) {\n  return (Math.exp(x) - Math.exp(-x)) / 2;\n};\n/**\n * Calculate the hyperbolic tangent of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var tanh = Math.tanh || function (x) {\n  var e = Math.exp(2 * x);\n  return (e - 1) / (e + 1);\n};\n/**\n * Returns a value with the magnitude of x and the sign of y.\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\n\nexport function copysign(x, y) {\n  var signx = x > 0 ? true : x < 0 ? false : 1 / x === Infinity;\n  var signy = y > 0 ? true : y < 0 ? false : 1 / y === Infinity;\n  return signx ^ signy ? -x : x;\n}","function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction ok() {\n  return true;\n}\n\nfunction notOk() {\n  return false;\n}\n\nfunction undef() {\n  return undefined;\n}\n\nvar NOT_TYPED_FUNCTION = 'Argument is not a typed-function.';\n/**\n * @typedef {{\n *   params: Param[],\n *   fn: function,\n *   test: function,\n *   implementation: function\n * }} Signature\n *\n * @typedef {{\n *   types: Type[],\n *   hasAny: boolean,\n *   hasConversion: boolean,\n *   restParam: boolean\n * }} Param\n *\n * @typedef {{\n *   name: string,\n *   typeIndex: number,\n *   test: function,\n *   isAny: boolean,\n *   conversion?: ConversionDef,\n *   conversionIndex: number,\n * }} Type\n *\n * @typedef {{\n *   from: string,\n *   to: string,\n *   convert: function (*) : *\n * }} ConversionDef\n *\n * @typedef {{\n *   name: string,\n *   test: function(*) : boolean,\n *   isAny?: boolean\n * }} TypeDef\n */\n\n/**\n * @returns {() => function}\n */\n\nfunction create() {\n  // data type tests\n\n  /**\n   * Returns true if the argument is a non-null \"plain\" object\n   */\n  function isPlainObject(x) {\n    return _typeof(x) === 'object' && x !== null && x.constructor === Object;\n  }\n\n  var _types = [{\n    name: 'number',\n    test: function test(x) {\n      return typeof x === 'number';\n    }\n  }, {\n    name: 'string',\n    test: function test(x) {\n      return typeof x === 'string';\n    }\n  }, {\n    name: 'boolean',\n    test: function test(x) {\n      return typeof x === 'boolean';\n    }\n  }, {\n    name: 'Function',\n    test: function test(x) {\n      return typeof x === 'function';\n    }\n  }, {\n    name: 'Array',\n    test: Array.isArray\n  }, {\n    name: 'Date',\n    test: function test(x) {\n      return x instanceof Date;\n    }\n  }, {\n    name: 'RegExp',\n    test: function test(x) {\n      return x instanceof RegExp;\n    }\n  }, {\n    name: 'Object',\n    test: isPlainObject\n  }, {\n    name: 'null',\n    test: function test(x) {\n      return x === null;\n    }\n  }, {\n    name: 'undefined',\n    test: function test(x) {\n      return x === undefined;\n    }\n  }];\n  var anyType = {\n    name: 'any',\n    test: ok,\n    isAny: true\n  }; // Data structures to track the types. As these are local variables in\n  // create(), each typed universe will get its own copy, but the variables\n  // will only be accessible through the (closures of the) functions supplied\n  // as properties of the typed object, not directly.\n  // These will be initialized in clear() below\n\n  var typeMap; // primary store of all types\n\n  var typeList; // Array of just type names, for the sake of ordering\n  // And similar data structures for the type conversions:\n\n  var nConversions = 0; // the actual conversions are stored on a property of the destination types\n  // This is a temporary object, will be replaced with a function at the end\n\n  var typed = {\n    createCount: 0\n  };\n  /**\n   * Takes a type name and returns the corresponding official type object\n   * for that type.\n   *\n   * @param {string} typeName\n   * @returns {TypeDef} type\n   */\n\n  function findType(typeName) {\n    var type = typeMap.get(typeName);\n\n    if (type) {\n      return type;\n    } // Remainder is error handling\n\n\n    var message = 'Unknown type \"' + typeName + '\"';\n    var name = typeName.toLowerCase();\n    var otherName;\n\n    var _iterator = _createForOfIteratorHelper(typeList),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        otherName = _step.value;\n\n        if (otherName.toLowerCase() === name) {\n          message += '. Did you mean \"' + otherName + '\" ?';\n          break;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    throw new TypeError(message);\n  }\n  /**\n   * Adds an array `types` of type definitions to this typed instance.\n   * Each type definition should be an object with properties:\n   * 'name' - a string giving the name of the type; 'test' - function\n   * returning a boolean that tests membership in the type; and optionally\n   * 'isAny' - true only for the 'any' type.\n   *\n   * The second optional argument, `before`, gives the name of a type that\n   * these types should be added before. The new types are added in the\n   * order specified.\n   * @param {TypeDef[]} types\n   * @param {string | boolean} [beforeSpec='any'] before\n   */\n\n\n  function addTypes(types) {\n    var beforeSpec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'any';\n    var beforeIndex = beforeSpec ? findType(beforeSpec).index : typeList.length;\n    var newTypes = [];\n\n    for (var i = 0; i < types.length; ++i) {\n      if (!types[i] || typeof types[i].name !== 'string' || typeof types[i].test !== 'function') {\n        throw new TypeError('Object with properties {name: string, test: function} expected');\n      }\n\n      var typeName = types[i].name;\n\n      if (typeMap.has(typeName)) {\n        throw new TypeError('Duplicate type name \"' + typeName + '\"');\n      }\n\n      newTypes.push(typeName);\n      typeMap.set(typeName, {\n        name: typeName,\n        test: types[i].test,\n        isAny: types[i].isAny,\n        index: beforeIndex + i,\n        conversionsTo: [] // Newly added type can't have any conversions to it\n\n      });\n    } // update the typeList\n\n\n    var affectedTypes = typeList.slice(beforeIndex);\n    typeList = typeList.slice(0, beforeIndex).concat(newTypes).concat(affectedTypes); // Fix the indices\n\n    for (var _i = beforeIndex + newTypes.length; _i < typeList.length; ++_i) {\n      typeMap.get(typeList[_i]).index = _i;\n    }\n  }\n  /**\n   * Removes all types and conversions from this typed instance.\n   * May cause previously constructed typed-functions to throw\n   * strange errors when they are called with types that do not\n   * match any of their signatures.\n   */\n\n\n  function clear() {\n    typeMap = new Map();\n    typeList = [];\n    nConversions = 0;\n    addTypes([anyType], false);\n  } // initialize the types to the default list\n\n\n  clear();\n  addTypes(_types);\n  /**\n   * Removes all conversions, leaving the types alone.\n   */\n\n  function clearConversions() {\n    var typeName;\n\n    var _iterator2 = _createForOfIteratorHelper(typeList),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        typeName = _step2.value;\n        typeMap.get(typeName).conversionsTo = [];\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    nConversions = 0;\n  }\n  /**\n   * Find the type names that match a value.\n   * @param {*} value\n   * @return {string[]} Array of names of types for which\n   *                  the type test matches the value.\n   */\n\n\n  function findTypeNames(value) {\n    var matches = typeList.filter(function (name) {\n      var type = typeMap.get(name);\n      return !type.isAny && type.test(value);\n    });\n\n    if (matches.length) {\n      return matches;\n    }\n\n    return ['any'];\n  }\n  /**\n   * Check if an entity is a typed function created by any instance\n   * @param {any} entity\n   * @returns {boolean}\n   */\n\n\n  function isTypedFunction(entity) {\n    return entity && typeof entity === 'function' && '_typedFunctionData' in entity;\n  }\n  /**\n   * Find a specific signature from a (composed) typed function, for example:\n   *\n   *   typed.findSignature(fn, ['number', 'string'])\n   *   typed.findSignature(fn, 'number, string')\n   *   typed.findSignature(fn, 'number,string', {exact: true})\n   *\n   * This function findSignature will by default return the best match to\n   * the given signature, possibly employing type conversions.\n   *\n   * The (optional) third argument is a plain object giving options\n   * controlling the signature search. Currently the only implemented\n   * option is `exact`: if specified as true (default is false), only\n   * exact matches will be returned (i.e. signatures for which `fn` was\n   * directly defined). Note that a (possibly different) type matching\n   * `any`, or one or more instances of TYPE matching `...TYPE` are\n   * considered exact matches in this regard, as no conversions are used.\n   *\n   * This function returns a \"signature\" object, as does `typed.resolve()`,\n   * which is a plain object with four keys: `params` (the array of parameters\n   * for this signature), `fn` (the originally supplied function for this\n   * signature), `test` (a generated function that determines if an argument\n   * list matches this signature, and `implementation` (the function to call\n   * on a matching argument list, that performs conversions if necessary and\n   * then calls the originally supplied function).\n   *\n   * @param {Function} fn                   A typed-function\n   * @param {string | string[]} signature\n   *     Signature to be found, can be an array or a comma separated string.\n   * @param {object} options  Controls the signature search as documented\n   * @return {{ params: Param[], fn: function, test: function, implementation: function }}\n   *     Returns the matching signature, or throws an error when no signature\n   *     is found.\n   */\n\n\n  function findSignature(fn, signature, options) {\n    if (!isTypedFunction(fn)) {\n      throw new TypeError(NOT_TYPED_FUNCTION);\n    } // Canonicalize input\n\n\n    var exact = options && options.exact;\n    var stringSignature = Array.isArray(signature) ? signature.join(',') : signature;\n    var params = parseSignature(stringSignature);\n    var canonicalSignature = stringifyParams(params); // First hope we get lucky and exactly match a signature\n\n    if (!exact || canonicalSignature in fn.signatures) {\n      // OK, we can check the internal signatures\n      var match = fn._typedFunctionData.signatureMap.get(canonicalSignature);\n\n      if (match) {\n        return match;\n      }\n    } // Oh well, we did not; so we have to go back and check the parameters\n    // one by one, in order to catch things like `any` and rest params.\n    // Note here we can assume there is at least one parameter, because\n    // the empty signature would have matched successfully above.\n\n\n    var nParams = params.length;\n    var remainingSignatures;\n\n    if (exact) {\n      remainingSignatures = [];\n      var name;\n\n      for (name in fn.signatures) {\n        remainingSignatures.push(fn._typedFunctionData.signatureMap.get(name));\n      }\n    } else {\n      remainingSignatures = fn._typedFunctionData.signatures;\n    }\n\n    for (var i = 0; i < nParams; ++i) {\n      var want = params[i];\n      var filteredSignatures = [];\n      var possibility = void 0;\n\n      var _iterator3 = _createForOfIteratorHelper(remainingSignatures),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          possibility = _step3.value;\n          var have = getParamAtIndex(possibility.params, i);\n\n          if (!have || want.restParam && !have.restParam) {\n            continue;\n          }\n\n          if (!have.hasAny) {\n            var _ret = function () {\n              // have to check all of the wanted types are available\n              var haveTypes = paramTypeSet(have);\n\n              if (want.types.some(function (wtype) {\n                return !haveTypes.has(wtype.name);\n              })) {\n                return \"continue\";\n              }\n            }();\n\n            if (_ret === \"continue\") continue;\n          } // OK, this looks good\n\n\n          filteredSignatures.push(possibility);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      remainingSignatures = filteredSignatures;\n      if (remainingSignatures.length === 0) break;\n    } // Return the first remaining signature that was totally matched:\n\n\n    var candidate;\n\n    var _iterator4 = _createForOfIteratorHelper(remainingSignatures),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        candidate = _step4.value;\n\n        if (candidate.params.length <= nParams) {\n          return candidate;\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + stringifyParams(params, ', ') + '))');\n  }\n  /**\n   * Find the proper function to call for a specific signature from\n   * a (composed) typed function, for example:\n   *\n   *   typed.find(fn, ['number', 'string'])\n   *   typed.find(fn, 'number, string')\n   *   typed.find(fn, 'number,string', {exact: true})\n   *\n   * This function find will by default return the best match to\n   * the given signature, possibly employing type conversions (and returning\n   * a function that will perform those conversions as needed). The\n   * (optional) third argument is a plain object giving options contolling\n   * the signature search. Currently only the option `exact` is implemented,\n   * which defaults to \"false\". If `exact` is specified as true, then only\n   * exact matches will be returned (i.e. signatures for which `fn` was\n   * directly defined). Uses of `any` and `...TYPE` are considered exact if\n   * no conversions are necessary to apply the corresponding function.\n   *\n   * @param {Function} fn                   A typed-function\n   * @param {string | string[]} signature\n   *     Signature to be found, can be an array or a comma separated string.\n   * @param {object} options  Controls the signature match as documented\n   * @return {function}\n   *     Returns the function to call for the given signature, or throws an\n   *     error if no match is found.\n   */\n\n\n  function find(fn, signature, options) {\n    return findSignature(fn, signature, options).implementation;\n  }\n  /**\n   * Convert a given value to another data type, specified by type name.\n   *\n   * @param {*} value\n   * @param {string} typeName\n   */\n\n\n  function convert(value, typeName) {\n    // check conversion is needed\n    var type = findType(typeName);\n\n    if (type.test(value)) {\n      return value;\n    }\n\n    var conversions = type.conversionsTo;\n\n    if (conversions.length === 0) {\n      throw new Error('There are no conversions to ' + typeName + ' defined.');\n    }\n\n    for (var i = 0; i < conversions.length; i++) {\n      var fromType = findType(conversions[i].from);\n\n      if (fromType.test(value)) {\n        return conversions[i].convert(value);\n      }\n    }\n\n    throw new Error('Cannot convert ' + value + ' to ' + typeName);\n  }\n  /**\n   * Stringify parameters in a normalized way\n   * @param {Param[]} params\n   * @param {string} [','] separator\n   * @return {string}\n   */\n\n\n  function stringifyParams(params) {\n    var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';\n    return params.map(function (p) {\n      return p.name;\n    }).join(separator);\n  }\n  /**\n   * Parse a parameter, like \"...number | boolean\"\n   * @param {string} param\n   * @return {Param} param\n   */\n\n\n  function parseParam(param) {\n    var restParam = param.indexOf('...') === 0;\n    var types = !restParam ? param : param.length > 3 ? param.slice(3) : 'any';\n    var typeDefs = types.split('|').map(function (s) {\n      return findType(s.trim());\n    });\n    var hasAny = false;\n    var paramName = restParam ? '...' : '';\n    var exactTypes = typeDefs.map(function (type) {\n      hasAny = type.isAny || hasAny;\n      paramName += type.name + '|';\n      return {\n        name: type.name,\n        typeIndex: type.index,\n        test: type.test,\n        isAny: type.isAny,\n        conversion: null,\n        conversionIndex: -1\n      };\n    });\n    return {\n      types: exactTypes,\n      name: paramName.slice(0, -1),\n      // remove trailing '|' from above\n      hasAny: hasAny,\n      hasConversion: false,\n      restParam: restParam\n    };\n  }\n  /**\n   * Expands a parsed parameter with the types available from currently\n   * defined conversions.\n   * @param {Param} param\n   * @return {Param} param\n   */\n\n\n  function expandParam(param) {\n    var typeNames = param.types.map(function (t) {\n      return t.name;\n    });\n    var matchingConversions = availableConversions(typeNames);\n    var hasAny = param.hasAny;\n    var newName = param.name;\n    var convertibleTypes = matchingConversions.map(function (conversion) {\n      var type = findType(conversion.from);\n      hasAny = type.isAny || hasAny;\n      newName += '|' + conversion.from;\n      return {\n        name: conversion.from,\n        typeIndex: type.index,\n        test: type.test,\n        isAny: type.isAny,\n        conversion: conversion,\n        conversionIndex: conversion.index\n      };\n    });\n    return {\n      types: param.types.concat(convertibleTypes),\n      name: newName,\n      hasAny: hasAny,\n      hasConversion: convertibleTypes.length > 0,\n      restParam: param.restParam\n    };\n  }\n  /**\n   * Return the set of type names in a parameter.\n   * Caches the result for efficiency\n   *\n   * @param {Param} param\n   * @return {Set<string>} typenames\n   */\n\n\n  function paramTypeSet(param) {\n    if (!param.typeSet) {\n      param.typeSet = new Set();\n      param.types.forEach(function (type) {\n        return param.typeSet.add(type.name);\n      });\n    }\n\n    return param.typeSet;\n  }\n  /**\n   * Parse a signature with comma separated parameters,\n   * like \"number | boolean, ...string\"\n   *\n   * @param {string} signature\n   * @return {Param[]} params\n   */\n\n\n  function parseSignature(rawSignature) {\n    var params = [];\n\n    if (typeof rawSignature !== 'string') {\n      throw new TypeError('Signatures must be strings');\n    }\n\n    var signature = rawSignature.trim();\n\n    if (signature === '') {\n      return params;\n    }\n\n    var rawParams = signature.split(',');\n\n    for (var i = 0; i < rawParams.length; ++i) {\n      var parsedParam = parseParam(rawParams[i].trim());\n\n      if (parsedParam.restParam && i !== rawParams.length - 1) {\n        throw new SyntaxError('Unexpected rest parameter \"' + rawParams[i] + '\": ' + 'only allowed for the last parameter');\n      } // if invalid, short-circuit (all the types may have been filtered)\n\n\n      if (parsedParam.types.length === 0) {\n        return null;\n      }\n\n      params.push(parsedParam);\n    }\n\n    return params;\n  }\n  /**\n   * Test whether a set of params contains a restParam\n   * @param {Param[]} params\n   * @return {boolean} Returns true when the last parameter is a restParam\n   */\n\n\n  function hasRestParam(params) {\n    var param = last(params);\n    return param ? param.restParam : false;\n  }\n  /**\n   * Create a type test for a single parameter, which can have one or multiple\n   * types.\n   * @param {Param} param\n   * @return {function(x: *) : boolean} Returns a test function\n   */\n\n\n  function compileTest(param) {\n    if (!param || param.types.length === 0) {\n      // nothing to do\n      return ok;\n    } else if (param.types.length === 1) {\n      return findType(param.types[0].name).test;\n    } else if (param.types.length === 2) {\n      var test0 = findType(param.types[0].name).test;\n      var test1 = findType(param.types[1].name).test;\n      return function or(x) {\n        return test0(x) || test1(x);\n      };\n    } else {\n      // param.types.length > 2\n      var tests = param.types.map(function (type) {\n        return findType(type.name).test;\n      });\n      return function or(x) {\n        for (var i = 0; i < tests.length; i++) {\n          if (tests[i](x)) {\n            return true;\n          }\n        }\n\n        return false;\n      };\n    }\n  }\n  /**\n   * Create a test for all parameters of a signature\n   * @param {Param[]} params\n   * @return {function(args: Array<*>) : boolean}\n   */\n\n\n  function compileTests(params) {\n    var tests, test0, test1;\n\n    if (hasRestParam(params)) {\n      // variable arguments like '...number'\n      tests = initial(params).map(compileTest);\n      var varIndex = tests.length;\n      var lastTest = compileTest(last(params));\n\n      var testRestParam = function testRestParam(args) {\n        for (var i = varIndex; i < args.length; i++) {\n          if (!lastTest(args[i])) {\n            return false;\n          }\n        }\n\n        return true;\n      };\n\n      return function testArgs(args) {\n        for (var i = 0; i < tests.length; i++) {\n          if (!tests[i](args[i])) {\n            return false;\n          }\n        }\n\n        return testRestParam(args) && args.length >= varIndex + 1;\n      };\n    } else {\n      // no variable arguments\n      if (params.length === 0) {\n        return function testArgs(args) {\n          return args.length === 0;\n        };\n      } else if (params.length === 1) {\n        test0 = compileTest(params[0]);\n        return function testArgs(args) {\n          return test0(args[0]) && args.length === 1;\n        };\n      } else if (params.length === 2) {\n        test0 = compileTest(params[0]);\n        test1 = compileTest(params[1]);\n        return function testArgs(args) {\n          return test0(args[0]) && test1(args[1]) && args.length === 2;\n        };\n      } else {\n        // arguments.length > 2\n        tests = params.map(compileTest);\n        return function testArgs(args) {\n          for (var i = 0; i < tests.length; i++) {\n            if (!tests[i](args[i])) {\n              return false;\n            }\n          }\n\n          return args.length === tests.length;\n        };\n      }\n    }\n  }\n  /**\n   * Find the parameter at a specific index of a Params list.\n   * Handles rest parameters.\n   * @param {Param[]} params\n   * @param {number} index\n   * @return {Param | null} Returns the matching parameter when found,\n   *                        null otherwise.\n   */\n\n\n  function getParamAtIndex(params, index) {\n    return index < params.length ? params[index] : hasRestParam(params) ? last(params) : null;\n  }\n  /**\n   * Get all type names of a parameter\n   * @param {Params[]} params\n   * @param {number} index\n   * @return {string[]} Returns an array with type names\n   */\n\n\n  function getTypeSetAtIndex(params, index) {\n    var param = getParamAtIndex(params, index);\n\n    if (!param) {\n      return new Set();\n    }\n\n    return paramTypeSet(param);\n  }\n  /**\n   * Test whether a type is an exact type or conversion\n   * @param {Type} type\n   * @return {boolean} Returns true when\n   */\n\n\n  function isExactType(type) {\n    return type.conversion === null || type.conversion === undefined;\n  }\n  /**\n   * Helper function for creating error messages: create an array with\n   * all available types on a specific argument index.\n   * @param {Signature[]} signatures\n   * @param {number} index\n   * @return {string[]} Returns an array with available types\n   */\n\n\n  function mergeExpectedParams(signatures, index) {\n    var typeSet = new Set();\n    signatures.forEach(function (signature) {\n      var paramSet = getTypeSetAtIndex(signature.params, index);\n      var name;\n\n      var _iterator5 = _createForOfIteratorHelper(paramSet),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          name = _step5.value;\n          typeSet.add(name);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    });\n    return typeSet.has('any') ? ['any'] : Array.from(typeSet);\n  }\n  /**\n   * Create\n   * @param {string} name             The name of the function\n   * @param {array.<*>} args          The actual arguments passed to the function\n   * @param {Signature[]} signatures  A list with available signatures\n   * @return {TypeError} Returns a type error with additional data\n   *                     attached to it in the property `data`\n   */\n\n\n  function createError(name, args, signatures) {\n    var err, expected;\n\n    var _name = name || 'unnamed'; // test for wrong type at some index\n\n\n    var matchingSignatures = signatures;\n    var index;\n\n    var _loop = function _loop() {\n      var nextMatchingDefs = [];\n      matchingSignatures.forEach(function (signature) {\n        var param = getParamAtIndex(signature.params, index);\n        var test = compileTest(param);\n\n        if ((index < signature.params.length || hasRestParam(signature.params)) && test(args[index])) {\n          nextMatchingDefs.push(signature);\n        }\n      });\n\n      if (nextMatchingDefs.length === 0) {\n        // no matching signatures anymore, throw error \"wrong type\"\n        expected = mergeExpectedParams(matchingSignatures, index);\n\n        if (expected.length > 0) {\n          var actualTypes = findTypeNames(args[index]);\n          err = new TypeError('Unexpected type of argument in function ' + _name + ' (expected: ' + expected.join(' or ') + ', actual: ' + actualTypes.join(' | ') + ', index: ' + index + ')');\n          err.data = {\n            category: 'wrongType',\n            fn: _name,\n            index: index,\n            actual: actualTypes,\n            expected: expected\n          };\n          return {\n            v: err\n          };\n        }\n      } else {\n        matchingSignatures = nextMatchingDefs;\n      }\n    };\n\n    for (index = 0; index < args.length; index++) {\n      var _ret2 = _loop();\n\n      if (_typeof(_ret2) === \"object\") return _ret2.v;\n    } // test for too few arguments\n\n\n    var lengths = matchingSignatures.map(function (signature) {\n      return hasRestParam(signature.params) ? Infinity : signature.params.length;\n    });\n\n    if (args.length < Math.min.apply(null, lengths)) {\n      expected = mergeExpectedParams(matchingSignatures, index);\n      err = new TypeError('Too few arguments in function ' + _name + ' (expected: ' + expected.join(' or ') + ', index: ' + args.length + ')');\n      err.data = {\n        category: 'tooFewArgs',\n        fn: _name,\n        index: args.length,\n        expected: expected\n      };\n      return err;\n    } // test for too many arguments\n\n\n    var maxLength = Math.max.apply(null, lengths);\n\n    if (args.length > maxLength) {\n      err = new TypeError('Too many arguments in function ' + _name + ' (expected: ' + maxLength + ', actual: ' + args.length + ')');\n      err.data = {\n        category: 'tooManyArgs',\n        fn: _name,\n        index: args.length,\n        expectedLength: maxLength\n      };\n      return err;\n    } // Generic error\n\n\n    var argTypes = [];\n\n    for (var i = 0; i < args.length; ++i) {\n      argTypes.push(findTypeNames(args[i]).join('|'));\n    }\n\n    err = new TypeError('Arguments of type \"' + argTypes.join(', ') + '\" do not match any of the defined signatures of function ' + _name + '.');\n    err.data = {\n      category: 'mismatch',\n      actual: argTypes\n    };\n    return err;\n  }\n  /**\n   * Find the lowest index of all exact types of a parameter (no conversions)\n   * @param {Param} param\n   * @return {number} Returns the index of the lowest type in typed.types\n   */\n\n\n  function getLowestTypeIndex(param) {\n    var min = typeList.length + 1;\n\n    for (var i = 0; i < param.types.length; i++) {\n      if (isExactType(param.types[i])) {\n        min = Math.min(min, param.types[i].typeIndex);\n      }\n    }\n\n    return min;\n  }\n  /**\n   * Find the lowest index of the conversion of all types of the parameter\n   * having a conversion\n   * @param {Param} param\n   * @return {number} Returns the lowest index of the conversions of this type\n   */\n\n\n  function getLowestConversionIndex(param) {\n    var min = nConversions + 1;\n\n    for (var i = 0; i < param.types.length; i++) {\n      if (!isExactType(param.types[i])) {\n        min = Math.min(min, param.types[i].conversionIndex);\n      }\n    }\n\n    return min;\n  }\n  /**\n   * Compare two params\n   * @param {Param} param1\n   * @param {Param} param2\n   * @return {number} returns -1 when param1 must get a lower\n   *                  index than param2, 1 when the opposite,\n   *                  or zero when both are equal\n   */\n\n\n  function compareParams(param1, param2) {\n    // We compare a number of metrics on a param in turn:\n    // 1) 'any' parameters are the least preferred\n    if (param1.hasAny) {\n      if (!param2.hasAny) {\n        return 1;\n      }\n    } else if (param2.hasAny) {\n      return -1;\n    } // 2) Prefer non-rest to rest parameters\n\n\n    if (param1.restParam) {\n      if (!param2.restParam) {\n        return 1;\n      }\n    } else if (param2.restParam) {\n      return -1;\n    } // 3) Prefer exact type match to conversions\n\n\n    if (param1.hasConversion) {\n      if (!param2.hasConversion) {\n        return 1;\n      }\n    } else if (param2.hasConversion) {\n      return -1;\n    } // 4) Prefer lower type index:\n\n\n    var typeDiff = getLowestTypeIndex(param1) - getLowestTypeIndex(param2);\n\n    if (typeDiff < 0) {\n      return -1;\n    }\n\n    if (typeDiff > 0) {\n      return 1;\n    } // 5) Prefer lower conversion index\n\n\n    var convDiff = getLowestConversionIndex(param1) - getLowestConversionIndex(param2);\n\n    if (convDiff < 0) {\n      return -1;\n    }\n\n    if (convDiff > 0) {\n      return 1;\n    } // Don't have a basis for preference\n\n\n    return 0;\n  }\n  /**\n   * Compare two signatures\n   * @param {Signature} signature1\n   * @param {Signature} signature2\n   * @return {number} returns a negative number when param1 must get a lower\n   *                  index than param2, a positive number when the opposite,\n   *                  or zero when both are equal\n   */\n\n\n  function compareSignatures(signature1, signature2) {\n    var pars1 = signature1.params;\n    var pars2 = signature2.params;\n    var last1 = last(pars1);\n    var last2 = last(pars2);\n    var hasRest1 = hasRestParam(pars1);\n    var hasRest2 = hasRestParam(pars2); // We compare a number of metrics on signatures in turn:\n    // 1) An \"any rest param\" is least preferred\n\n    if (hasRest1 && last1.hasAny) {\n      if (!hasRest2 || !last2.hasAny) {\n        return 1;\n      }\n    } else if (hasRest2 && last2.hasAny) {\n      return -1;\n    } // 2) Minimize the number of 'any' parameters\n\n\n    var any1 = 0;\n    var conv1 = 0;\n    var par;\n\n    var _iterator6 = _createForOfIteratorHelper(pars1),\n        _step6;\n\n    try {\n      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n        par = _step6.value;\n        if (par.hasAny) ++any1;\n        if (par.hasConversion) ++conv1;\n      }\n    } catch (err) {\n      _iterator6.e(err);\n    } finally {\n      _iterator6.f();\n    }\n\n    var any2 = 0;\n    var conv2 = 0;\n\n    var _iterator7 = _createForOfIteratorHelper(pars2),\n        _step7;\n\n    try {\n      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n        par = _step7.value;\n        if (par.hasAny) ++any2;\n        if (par.hasConversion) ++conv2;\n      }\n    } catch (err) {\n      _iterator7.e(err);\n    } finally {\n      _iterator7.f();\n    }\n\n    if (any1 !== any2) {\n      return any1 - any2;\n    } // 3) A conversion rest param is less preferred\n\n\n    if (hasRest1 && last1.hasConversion) {\n      if (!hasRest2 || !last2.hasConversion) {\n        return 1;\n      }\n    } else if (hasRest2 && last2.hasConversion) {\n      return -1;\n    } // 4) Minimize the number of conversions\n\n\n    if (conv1 !== conv2) {\n      return conv1 - conv2;\n    } // 5) Prefer no rest param\n\n\n    if (hasRest1) {\n      if (!hasRest2) {\n        return 1;\n      }\n    } else if (hasRest2) {\n      return -1;\n    } // 6) Prefer shorter with rest param, longer without\n\n\n    var lengthCriterion = (pars1.length - pars2.length) * (hasRest1 ? -1 : 1);\n\n    if (lengthCriterion !== 0) {\n      return lengthCriterion;\n    } // Signatures are identical in each of the above metrics.\n    // In particular, they are the same length.\n    // We can therefore compare the parameters one by one.\n    // First we count which signature has more preferred parameters.\n\n\n    var comparisons = [];\n    var tc = 0;\n\n    for (var i = 0; i < pars1.length; ++i) {\n      var thisComparison = compareParams(pars1[i], pars2[i]);\n      comparisons.push(thisComparison);\n      tc += thisComparison;\n    }\n\n    if (tc !== 0) {\n      return tc;\n    } // They have the same number of preferred parameters, so go by the\n    // earliest parameter in which we have a preference.\n    // In other words, dispatch is driven somewhat more by earlier\n    // parameters than later ones.\n\n\n    var c;\n\n    for (var _i2 = 0, _comparisons = comparisons; _i2 < _comparisons.length; _i2++) {\n      c = _comparisons[_i2];\n\n      if (c !== 0) {\n        return c;\n      }\n    } // It's a tossup:\n\n\n    return 0;\n  }\n  /**\n   * Produce a list of all conversions from distinct types to one of\n   * the given types.\n   *\n   * @param {string[]} typeNames\n   * @return {ConversionDef[]} Returns the conversions that are available\n   *                        resulting in any given type (if any)\n   */\n\n\n  function availableConversions(typeNames) {\n    if (typeNames.length === 0) {\n      return [];\n    }\n\n    var types = typeNames.map(findType);\n\n    if (typeNames.length > 1) {\n      types.sort(function (t1, t2) {\n        return t1.index - t2.index;\n      });\n    }\n\n    var matches = types[0].conversionsTo;\n\n    if (typeNames.length === 1) {\n      return matches;\n    }\n\n    matches = matches.concat([]); // shallow copy the matches\n    // Since the types are now in index order, we just want the first\n    // occurrence of any from type:\n\n    var knownTypes = new Set(typeNames);\n\n    for (var i = 1; i < types.length; ++i) {\n      var newMatch = void 0;\n\n      var _iterator8 = _createForOfIteratorHelper(types[i].conversionsTo),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          newMatch = _step8.value;\n\n          if (!knownTypes.has(newMatch.from)) {\n            matches.push(newMatch);\n            knownTypes.add(newMatch.from);\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n    }\n\n    return matches;\n  }\n  /**\n   * Preprocess arguments before calling the original function:\n   * - if needed convert the parameters\n   * - in case of rest parameters, move the rest parameters into an Array\n   * @param {Param[]} params\n   * @param {function} fn\n   * @return {function} Returns a wrapped function\n   */\n\n\n  function compileArgsPreprocessing(params, fn) {\n    var fnConvert = fn; // TODO: can we make this wrapper function smarter/simpler?\n\n    if (params.some(function (p) {\n      return p.hasConversion;\n    })) {\n      var restParam = hasRestParam(params);\n      var compiledConversions = params.map(compileArgConversion);\n\n      fnConvert = function convertArgs() {\n        var args = [];\n        var last = restParam ? arguments.length - 1 : arguments.length;\n\n        for (var i = 0; i < last; i++) {\n          args[i] = compiledConversions[i](arguments[i]);\n        }\n\n        if (restParam) {\n          args[last] = arguments[last].map(compiledConversions[last]);\n        }\n\n        return fn.apply(this, args);\n      };\n    }\n\n    var fnPreprocess = fnConvert;\n\n    if (hasRestParam(params)) {\n      var offset = params.length - 1;\n\n      fnPreprocess = function preprocessRestParams() {\n        return fnConvert.apply(this, slice(arguments, 0, offset).concat([slice(arguments, offset)]));\n      };\n    }\n\n    return fnPreprocess;\n  }\n  /**\n   * Compile conversion for a parameter to the right type\n   * @param {Param} param\n   * @return {function} Returns the wrapped function that will convert arguments\n   *\n   */\n\n\n  function compileArgConversion(param) {\n    var test0, test1, conversion0, conversion1;\n    var tests = [];\n    var conversions = [];\n    param.types.forEach(function (type) {\n      if (type.conversion) {\n        tests.push(findType(type.conversion.from).test);\n        conversions.push(type.conversion.convert);\n      }\n    }); // create optimized conversion functions depending on the number of conversions\n\n    switch (conversions.length) {\n      case 0:\n        return function convertArg(arg) {\n          return arg;\n        };\n\n      case 1:\n        test0 = tests[0];\n        conversion0 = conversions[0];\n        return function convertArg(arg) {\n          if (test0(arg)) {\n            return conversion0(arg);\n          }\n\n          return arg;\n        };\n\n      case 2:\n        test0 = tests[0];\n        test1 = tests[1];\n        conversion0 = conversions[0];\n        conversion1 = conversions[1];\n        return function convertArg(arg) {\n          if (test0(arg)) {\n            return conversion0(arg);\n          }\n\n          if (test1(arg)) {\n            return conversion1(arg);\n          }\n\n          return arg;\n        };\n\n      default:\n        return function convertArg(arg) {\n          for (var i = 0; i < conversions.length; i++) {\n            if (tests[i](arg)) {\n              return conversions[i](arg);\n            }\n          }\n\n          return arg;\n        };\n    }\n  }\n  /**\n   * Split params with union types in to separate params.\n   *\n   * For example:\n   *\n   *     splitParams([['Array', 'Object'], ['string', 'RegExp'])\n   *     // returns:\n   *     // [\n   *     //   ['Array', 'string'],\n   *     //   ['Array', 'RegExp'],\n   *     //   ['Object', 'string'],\n   *     //   ['Object', 'RegExp']\n   *     // ]\n   *\n   * @param {Param[]} params\n   * @return {Param[]}\n   */\n\n\n  function splitParams(params) {\n    function _splitParams(params, index, paramsSoFar) {\n      if (index < params.length) {\n        var param = params[index];\n        var resultingParams = [];\n\n        if (param.restParam) {\n          // split the types of a rest parameter in two:\n          // one with only exact types, and one with exact types and conversions\n          var exactTypes = param.types.filter(isExactType);\n\n          if (exactTypes.length < param.types.length) {\n            resultingParams.push({\n              types: exactTypes,\n              name: '...' + exactTypes.map(function (t) {\n                return t.name;\n              }).join('|'),\n              hasAny: exactTypes.some(function (t) {\n                return t.isAny;\n              }),\n              hasConversion: false,\n              restParam: true\n            });\n          }\n\n          resultingParams.push(param);\n        } else {\n          // split all the types of a regular parameter into one type per param\n          resultingParams = param.types.map(function (type) {\n            return {\n              types: [type],\n              name: type.name,\n              hasAny: type.isAny,\n              hasConversion: type.conversion,\n              restParam: false\n            };\n          });\n        } // recurse over the groups with types\n\n\n        return flatMap(resultingParams, function (nextParam) {\n          return _splitParams(params, index + 1, paramsSoFar.concat([nextParam]));\n        });\n      } else {\n        // we've reached the end of the parameters.\n        return [paramsSoFar];\n      }\n    }\n\n    return _splitParams(params, 0, []);\n  }\n  /**\n   * Test whether two param lists represent conflicting signatures\n   * @param {Param[]} params1\n   * @param {Param[]} params2\n   * @return {boolean} Returns true when the signatures conflict, false otherwise.\n   */\n\n\n  function conflicting(params1, params2) {\n    var ii = Math.max(params1.length, params2.length);\n\n    for (var i = 0; i < ii; i++) {\n      var typeSet1 = getTypeSetAtIndex(params1, i);\n      var typeSet2 = getTypeSetAtIndex(params2, i);\n      var overlap = false;\n      var name = void 0;\n\n      var _iterator9 = _createForOfIteratorHelper(typeSet2),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          name = _step9.value;\n\n          if (typeSet1.has(name)) {\n            overlap = true;\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      if (!overlap) {\n        return false;\n      }\n    }\n\n    var len1 = params1.length;\n    var len2 = params2.length;\n    var restParam1 = hasRestParam(params1);\n    var restParam2 = hasRestParam(params2);\n    return restParam1 ? restParam2 ? len1 === len2 : len2 >= len1 : restParam2 ? len1 >= len2 : len1 === len2;\n  }\n  /**\n   * Helper function for `resolveReferences` that returns a copy of\n   * functionList wihe any prior resolutions cleared out, in case we are\n   * recycling signatures from a prior typed function construction.\n   *\n   * @param {Array.<function|typed-reference>} functionList\n   * @return {Array.<function|typed-reference>}\n   */\n\n\n  function clearResolutions(functionList) {\n    return functionList.map(function (fn) {\n      if (isReferToSelf(fn)) {\n        return referToSelf(fn.referToSelf.callback);\n      }\n\n      if (isReferTo(fn)) {\n        return makeReferTo(fn.referTo.references, fn.referTo.callback);\n      }\n\n      return fn;\n    });\n  }\n  /**\n   * Take a list of references, a list of functions functionList, and a\n   * signatureMap indexing signatures into functionList, and return\n   * the list of resolutions, or a false-y value if they don't all\n   * resolve in a valid way (yet).\n   *\n   * @param {string[]} references\n   * @param {Array<function|typed-reference} functionList\n   * @param {Object.<string, integer>} signatureMap\n   * @return {function[] | false} resolutions\n   */\n\n\n  function collectResolutions(references, functionList, signatureMap) {\n    var resolvedReferences = [];\n    var reference;\n\n    var _iterator10 = _createForOfIteratorHelper(references),\n        _step10;\n\n    try {\n      for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n        reference = _step10.value;\n        var resolution = signatureMap[reference];\n\n        if (typeof resolution !== 'number') {\n          throw new TypeError('No definition for referenced signature \"' + reference + '\"');\n        }\n\n        resolution = functionList[resolution];\n\n        if (typeof resolution !== 'function') {\n          return false;\n        }\n\n        resolvedReferences.push(resolution);\n      }\n    } catch (err) {\n      _iterator10.e(err);\n    } finally {\n      _iterator10.f();\n    }\n\n    return resolvedReferences;\n  }\n  /**\n   * Resolve any references in the functionList for the typed function\n   * itself. The signatureMap tells which index in the functionList a\n   * given signature should be mapped to (for use in resolving typed.referTo)\n   * and self provides the destions of a typed.referToSelf.\n   *\n   * @param {Array<function | typed-reference-object>} functionList\n   * @param {Object.<string, function>} signatureMap\n   * @param {function} self  The typed-function itself\n   * @return {Array<function>} The list of resolved functions\n   */\n\n\n  function resolveReferences(functionList, signatureMap, self) {\n    var resolvedFunctions = clearResolutions(functionList);\n    var isResolved = new Array(resolvedFunctions.length).fill(false);\n    var leftUnresolved = true;\n\n    while (leftUnresolved) {\n      leftUnresolved = false;\n      var nothingResolved = true;\n\n      for (var i = 0; i < resolvedFunctions.length; ++i) {\n        if (isResolved[i]) continue;\n        var fn = resolvedFunctions[i];\n\n        if (isReferToSelf(fn)) {\n          resolvedFunctions[i] = fn.referToSelf.callback(self); // Preserve reference in case signature is reused someday:\n\n          resolvedFunctions[i].referToSelf = fn.referToSelf;\n          isResolved[i] = true;\n          nothingResolved = false;\n        } else if (isReferTo(fn)) {\n          var resolvedReferences = collectResolutions(fn.referTo.references, resolvedFunctions, signatureMap);\n\n          if (resolvedReferences) {\n            resolvedFunctions[i] = fn.referTo.callback.apply(this, resolvedReferences); // Preserve reference in case signature is reused someday:\n\n            resolvedFunctions[i].referTo = fn.referTo;\n            isResolved[i] = true;\n            nothingResolved = false;\n          } else {\n            leftUnresolved = true;\n          }\n        }\n      }\n\n      if (nothingResolved && leftUnresolved) {\n        throw new SyntaxError('Circular reference detected in resolving typed.referTo');\n      }\n    }\n\n    return resolvedFunctions;\n  }\n  /**\n   * Validate whether any of the function bodies contains a self-reference\n   * usage like `this(...)` or `this.signatures`. This self-referencing is\n   * deprecated since typed-function v3. It has been replaced with\n   * the functions typed.referTo and typed.referToSelf.\n   * @param {Object.<string, function>} signaturesMap\n   */\n\n\n  function validateDeprecatedThis(signaturesMap) {\n    // TODO: remove this deprecation warning logic some day (it's introduced in v3)\n    // match occurrences like 'this(' and 'this.signatures'\n    var deprecatedThisRegex = /\\bthis(\\(|\\.signatures\\b)/;\n    Object.keys(signaturesMap).forEach(function (signature) {\n      var fn = signaturesMap[signature];\n\n      if (deprecatedThisRegex.test(fn.toString())) {\n        throw new SyntaxError('Using `this` to self-reference a function ' + 'is deprecated since typed-function@3. ' + 'Use typed.referTo and typed.referToSelf instead.');\n      }\n    });\n  }\n  /**\n   * Create a typed function\n   * @param {String} name               The name for the typed function\n   * @param {Object.<string, function>} rawSignaturesMap\n   *                                    An object with one or\n   *                                    multiple signatures as key, and the\n   *                                    function corresponding to the\n   *                                    signature as value.\n   * @return {function}  Returns the created typed function.\n   */\n\n\n  function createTypedFunction(name, rawSignaturesMap) {\n    typed.createCount++;\n\n    if (Object.keys(rawSignaturesMap).length === 0) {\n      throw new SyntaxError('No signatures provided');\n    }\n\n    if (typed.warnAgainstDeprecatedThis) {\n      validateDeprecatedThis(rawSignaturesMap);\n    } // Main processing loop for signatures\n\n\n    var parsedParams = [];\n    var originalFunctions = [];\n    var signaturesMap = {};\n    var preliminarySignatures = []; // may have duplicates from conversions\n\n    var signature;\n\n    var _loop2 = function _loop2() {\n      // A) Protect against polluted Object prototype:\n      if (!Object.prototype.hasOwnProperty.call(rawSignaturesMap, signature)) {\n        return \"continue\";\n      } // B) Parse the signature\n\n\n      var params = parseSignature(signature);\n      if (!params) return \"continue\"; // C) Check for conflicts\n\n      parsedParams.forEach(function (pp) {\n        if (conflicting(pp, params)) {\n          throw new TypeError('Conflicting signatures \"' + stringifyParams(pp) + '\" and \"' + stringifyParams(params) + '\".');\n        }\n      });\n      parsedParams.push(params); // D) Store the provided function and add conversions\n\n      var functionIndex = originalFunctions.length;\n      originalFunctions.push(rawSignaturesMap[signature]);\n      var conversionParams = params.map(expandParam); // E) Split the signatures and collect them up\n\n      var sp = void 0;\n\n      var _iterator11 = _createForOfIteratorHelper(splitParams(conversionParams)),\n          _step11;\n\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          sp = _step11.value;\n          var spName = stringifyParams(sp);\n          preliminarySignatures.push({\n            params: sp,\n            name: spName,\n            fn: functionIndex\n          });\n\n          if (sp.every(function (p) {\n            return !p.hasConversion;\n          })) {\n            signaturesMap[spName] = functionIndex;\n          }\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n    };\n\n    for (signature in rawSignaturesMap) {\n      var _ret3 = _loop2();\n\n      if (_ret3 === \"continue\") continue;\n    }\n\n    preliminarySignatures.sort(compareSignatures); // Note the forward reference to theTypedFn\n\n    var resolvedFunctions = resolveReferences(originalFunctions, signaturesMap, theTypedFn); // Fill in the proper function for each signature\n\n    var s;\n\n    for (s in signaturesMap) {\n      if (Object.prototype.hasOwnProperty.call(signaturesMap, s)) {\n        signaturesMap[s] = resolvedFunctions[signaturesMap[s]];\n      }\n    }\n\n    var signatures = [];\n    var internalSignatureMap = new Map(); // benchmarks faster than object\n\n    for (var _i3 = 0, _preliminarySignature = preliminarySignatures; _i3 < _preliminarySignature.length; _i3++) {\n      s = _preliminarySignature[_i3];\n\n      // Note it's only safe to eliminate duplicates like this\n      // _after_ the signature sorting step above; otherwise we might\n      // remove the wrong one.\n      if (!internalSignatureMap.has(s.name)) {\n        s.fn = resolvedFunctions[s.fn];\n        signatures.push(s);\n        internalSignatureMap.set(s.name, s);\n      }\n    } // we create a highly optimized checks for the first couple of signatures with max 2 arguments\n\n\n    var ok0 = signatures[0] && signatures[0].params.length <= 2 && !hasRestParam(signatures[0].params);\n    var ok1 = signatures[1] && signatures[1].params.length <= 2 && !hasRestParam(signatures[1].params);\n    var ok2 = signatures[2] && signatures[2].params.length <= 2 && !hasRestParam(signatures[2].params);\n    var ok3 = signatures[3] && signatures[3].params.length <= 2 && !hasRestParam(signatures[3].params);\n    var ok4 = signatures[4] && signatures[4].params.length <= 2 && !hasRestParam(signatures[4].params);\n    var ok5 = signatures[5] && signatures[5].params.length <= 2 && !hasRestParam(signatures[5].params);\n    var allOk = ok0 && ok1 && ok2 && ok3 && ok4 && ok5; // compile the tests\n\n    for (var i = 0; i < signatures.length; ++i) {\n      signatures[i].test = compileTests(signatures[i].params);\n    }\n\n    var test00 = ok0 ? compileTest(signatures[0].params[0]) : notOk;\n    var test10 = ok1 ? compileTest(signatures[1].params[0]) : notOk;\n    var test20 = ok2 ? compileTest(signatures[2].params[0]) : notOk;\n    var test30 = ok3 ? compileTest(signatures[3].params[0]) : notOk;\n    var test40 = ok4 ? compileTest(signatures[4].params[0]) : notOk;\n    var test50 = ok5 ? compileTest(signatures[5].params[0]) : notOk;\n    var test01 = ok0 ? compileTest(signatures[0].params[1]) : notOk;\n    var test11 = ok1 ? compileTest(signatures[1].params[1]) : notOk;\n    var test21 = ok2 ? compileTest(signatures[2].params[1]) : notOk;\n    var test31 = ok3 ? compileTest(signatures[3].params[1]) : notOk;\n    var test41 = ok4 ? compileTest(signatures[4].params[1]) : notOk;\n    var test51 = ok5 ? compileTest(signatures[5].params[1]) : notOk; // compile the functions\n\n    for (var _i4 = 0; _i4 < signatures.length; ++_i4) {\n      signatures[_i4].implementation = compileArgsPreprocessing(signatures[_i4].params, signatures[_i4].fn);\n    }\n\n    var fn0 = ok0 ? signatures[0].implementation : undef;\n    var fn1 = ok1 ? signatures[1].implementation : undef;\n    var fn2 = ok2 ? signatures[2].implementation : undef;\n    var fn3 = ok3 ? signatures[3].implementation : undef;\n    var fn4 = ok4 ? signatures[4].implementation : undef;\n    var fn5 = ok5 ? signatures[5].implementation : undef;\n    var len0 = ok0 ? signatures[0].params.length : -1;\n    var len1 = ok1 ? signatures[1].params.length : -1;\n    var len2 = ok2 ? signatures[2].params.length : -1;\n    var len3 = ok3 ? signatures[3].params.length : -1;\n    var len4 = ok4 ? signatures[4].params.length : -1;\n    var len5 = ok5 ? signatures[5].params.length : -1; // simple and generic, but also slow\n\n    var iStart = allOk ? 6 : 0;\n    var iEnd = signatures.length; // de-reference ahead for execution speed:\n\n    var tests = signatures.map(function (s) {\n      return s.test;\n    });\n    var fns = signatures.map(function (s) {\n      return s.implementation;\n    });\n\n    var generic = function generic() {\n      'use strict';\n\n      for (var _i5 = iStart; _i5 < iEnd; _i5++) {\n        if (tests[_i5](arguments)) {\n          return fns[_i5].apply(this, arguments);\n        }\n      }\n\n      return typed.onMismatch(name, arguments, signatures);\n    }; // create the typed function\n    // fast, specialized version. Falls back to the slower, generic one if needed\n\n\n    function theTypedFn(arg0, arg1) {\n      'use strict';\n\n      if (arguments.length === len0 && test00(arg0) && test01(arg1)) {\n        return fn0.apply(this, arguments);\n      }\n\n      if (arguments.length === len1 && test10(arg0) && test11(arg1)) {\n        return fn1.apply(this, arguments);\n      }\n\n      if (arguments.length === len2 && test20(arg0) && test21(arg1)) {\n        return fn2.apply(this, arguments);\n      }\n\n      if (arguments.length === len3 && test30(arg0) && test31(arg1)) {\n        return fn3.apply(this, arguments);\n      }\n\n      if (arguments.length === len4 && test40(arg0) && test41(arg1)) {\n        return fn4.apply(this, arguments);\n      }\n\n      if (arguments.length === len5 && test50(arg0) && test51(arg1)) {\n        return fn5.apply(this, arguments);\n      }\n\n      return generic.apply(this, arguments);\n    } // attach name the typed function\n\n\n    try {\n      Object.defineProperty(theTypedFn, 'name', {\n        value: name\n      });\n    } catch (err) {// old browsers do not support Object.defineProperty and some don't support setting the name property\n      // the function name is not essential for the functioning, it's mostly useful for debugging,\n      // so it's fine to have unnamed functions.\n    } // attach signatures to the function.\n    // This property is close to the original collection of signatures\n    // used to create the typed-function, just with unions split:\n\n\n    theTypedFn.signatures = signaturesMap; // Store internal data for functions like resolve, find, etc.\n    // Also serves as the flag that this is a typed-function\n\n    theTypedFn._typedFunctionData = {\n      signatures: signatures,\n      signatureMap: internalSignatureMap\n    };\n    return theTypedFn;\n  }\n  /**\n   * Action to take on mismatch\n   * @param {string} name      Name of function that was attempted to be called\n   * @param {Array} args       Actual arguments to the call\n   * @param {Array} signatures Known signatures of the named typed-function\n   */\n\n\n  function _onMismatch(name, args, signatures) {\n    throw createError(name, args, signatures);\n  }\n  /**\n   * Return all but the last items of an array or function Arguments\n   * @param {Array | Arguments} arr\n   * @return {Array}\n   */\n\n\n  function initial(arr) {\n    return slice(arr, 0, arr.length - 1);\n  }\n  /**\n   * return the last item of an array or function Arguments\n   * @param {Array | Arguments} arr\n   * @return {*}\n   */\n\n\n  function last(arr) {\n    return arr[arr.length - 1];\n  }\n  /**\n   * Slice an array or function Arguments\n   * @param {Array | Arguments | IArguments} arr\n   * @param {number} start\n   * @param {number} [end]\n   * @return {Array}\n   */\n\n\n  function slice(arr, start, end) {\n    return Array.prototype.slice.call(arr, start, end);\n  }\n  /**\n   * Return the first item from an array for which test(arr[i]) returns true\n   * @param {Array} arr\n   * @param {function} test\n   * @return {* | undefined} Returns the first matching item\n   *                         or undefined when there is no match\n   */\n\n\n  function findInArray(arr, test) {\n    for (var i = 0; i < arr.length; i++) {\n      if (test(arr[i])) {\n        return arr[i];\n      }\n    }\n\n    return undefined;\n  }\n  /**\n   * Flat map the result invoking a callback for every item in an array.\n   * https://gist.github.com/samgiles/762ee337dff48623e729\n   * @param {Array} arr\n   * @param {function} callback\n   * @return {Array}\n   */\n\n\n  function flatMap(arr, callback) {\n    return Array.prototype.concat.apply([], arr.map(callback));\n  }\n  /**\n   * Create a reference callback to one or multiple signatures\n   *\n   * Syntax:\n   *\n   *     typed.referTo(signature1, signature2, ..., function callback(fn1, fn2, ...) {\n   *       // ...\n   *     })\n   *\n   * @returns {{referTo: {references: string[], callback}}}\n   */\n\n\n  function referTo() {\n    var references = initial(arguments).map(function (s) {\n      return stringifyParams(parseSignature(s));\n    });\n    var callback = last(arguments);\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback function expected as last argument');\n    }\n\n    return makeReferTo(references, callback);\n  }\n\n  function makeReferTo(references, callback) {\n    return {\n      referTo: {\n        references: references,\n        callback: callback\n      }\n    };\n  }\n  /**\n   * Create a reference callback to the typed-function itself\n   *\n   * @param {(self: function) => function} callback\n   * @returns {{referToSelf: { callback: function }}}\n   */\n\n\n  function referToSelf(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback function expected as first argument');\n    }\n\n    return {\n      referToSelf: {\n        callback: callback\n      }\n    };\n  }\n  /**\n   * Test whether something is a referTo object, holding a list with reference\n   * signatures and a callback.\n   *\n   * @param {Object | function} objectOrFn\n   * @returns {boolean}\n   */\n\n\n  function isReferTo(objectOrFn) {\n    return objectOrFn && _typeof(objectOrFn.referTo) === 'object' && Array.isArray(objectOrFn.referTo.references) && typeof objectOrFn.referTo.callback === 'function';\n  }\n  /**\n   * Test whether something is a referToSelf object, holding a callback where\n   * to pass `self`.\n   *\n   * @param {Object | function} objectOrFn\n   * @returns {boolean}\n   */\n\n\n  function isReferToSelf(objectOrFn) {\n    return objectOrFn && _typeof(objectOrFn.referToSelf) === 'object' && typeof objectOrFn.referToSelf.callback === 'function';\n  }\n  /**\n   * Check if name is (A) new, (B) a match, or (C) a mismatch; and throw\n   * an error in case (C).\n   *\n   * @param { string | undefined } nameSoFar\n   * @param { string | undefined } newName\n   * @returns { string } updated name\n   */\n\n\n  function checkName(nameSoFar, newName) {\n    if (!nameSoFar) {\n      return newName;\n    }\n\n    if (newName && newName !== nameSoFar) {\n      var err = new Error('Function names do not match (expected: ' + nameSoFar + ', actual: ' + newName + ')');\n      err.data = {\n        actual: newName,\n        expected: nameSoFar\n      };\n      throw err;\n    }\n\n    return nameSoFar;\n  }\n  /**\n   * Retrieve the implied name from an object with signature keys\n   * and function values, checking whether all value names match\n   *\n   * @param { {string: function} } obj\n   */\n\n\n  function getObjectName(obj) {\n    var name;\n\n    for (var key in obj) {\n      // Only pay attention to own properties, and only if their values\n      // are typed functions or functions with a signature property\n      if (Object.prototype.hasOwnProperty.call(obj, key) && (isTypedFunction(obj[key]) || typeof obj[key].signature === 'string')) {\n        name = checkName(name, obj[key].name);\n      }\n    }\n\n    return name;\n  }\n  /**\n   * Copy all of the signatures from the second argument into the first,\n   * which is modified by side effect, checking for conflicts\n   *\n   * @param {Object.<string, function|typed-reference>} dest\n   * @param {Object.<string, function|typed-reference>} source\n   */\n\n\n  function mergeSignatures(dest, source) {\n    var key;\n\n    for (key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        if (key in dest) {\n          if (source[key] !== dest[key]) {\n            var err = new Error('Signature \"' + key + '\" is defined twice');\n            err.data = {\n              signature: key,\n              sourceFunction: source[key],\n              destFunction: dest[key]\n            };\n            throw err;\n          } // else: both signatures point to the same function, that's fine\n\n        }\n\n        dest[key] = source[key];\n      }\n    }\n  }\n\n  var saveTyped = typed;\n  /**\n   * Originally the main function was a typed function itself, but then\n   * it might not be able to generate error messages if the client\n   * replaced the type system with different names.\n   *\n   * Main entry: typed([name], functions/objects with signatures...)\n   *\n   * Assembles and returns a new typed-function from the given items\n   * that provide signatures and implementations, each of which may be\n   * * a plain object mapping (string) signatures to implementing functions,\n   * * a previously constructed typed function, or\n   * * any other single function with a string-valued property `signature`.\n    * The name of the resulting typed-function will be given by the\n   * string-valued name argument if present, or if not, by the name\n   * of any of the arguments that have one, as long as any that do are\n   * consistent with each other. If no name is specified, the name will be\n   * an empty string.\n   *\n   * @param {string} maybeName [optional]\n   * @param {(function|object)[]} signature providers\n   * @returns {typed-function}\n   */\n\n  typed = function typed(maybeName) {\n    var named = typeof maybeName === 'string';\n    var start = named ? 1 : 0;\n    var name = named ? maybeName : '';\n    var allSignatures = {};\n\n    for (var i = start; i < arguments.length; ++i) {\n      var item = arguments[i];\n      var theseSignatures = {};\n      var thisName = void 0;\n\n      if (typeof item === 'function') {\n        thisName = item.name;\n\n        if (typeof item.signature === 'string') {\n          // Case 1: Ordinary function with a string 'signature' property\n          theseSignatures[item.signature] = item;\n        } else if (isTypedFunction(item)) {\n          // Case 2: Existing typed function\n          theseSignatures = item.signatures;\n        }\n      } else if (isPlainObject(item)) {\n        // Case 3: Plain object, assume keys = signatures, values = functions\n        theseSignatures = item;\n\n        if (!named) {\n          thisName = getObjectName(item);\n        }\n      }\n\n      if (Object.keys(theseSignatures).length === 0) {\n        var err = new TypeError('Argument to \\'typed\\' at index ' + i + ' is not a (typed) function, ' + 'nor an object with signatures as keys and functions as values.');\n        err.data = {\n          index: i,\n          argument: item\n        };\n        throw err;\n      }\n\n      if (!named) {\n        name = checkName(name, thisName);\n      }\n\n      mergeSignatures(allSignatures, theseSignatures);\n    }\n\n    return createTypedFunction(name || '', allSignatures);\n  };\n\n  typed.create = create;\n  typed.createCount = saveTyped.createCount;\n  typed.onMismatch = _onMismatch;\n  typed.throwMismatchError = _onMismatch;\n  typed.createError = createError;\n  typed.clear = clear;\n  typed.clearConversions = clearConversions;\n  typed.addTypes = addTypes;\n  typed._findType = findType; // For unit testing only\n\n  typed.referTo = referTo;\n  typed.referToSelf = referToSelf;\n  typed.convert = convert;\n  typed.findSignature = findSignature;\n  typed.find = find;\n  typed.isTypedFunction = isTypedFunction;\n  typed.warnAgainstDeprecatedThis = true;\n  /**\n   * add a type (convenience wrapper for typed.addTypes)\n   * @param {{name: string, test: function}} type\n   * @param {boolean} [beforeObjectTest=true]\n   *                          If true, the new test will be inserted before\n   *                          the test with name 'Object' (if any), since\n   *                          tests for Object match Array and classes too.\n   */\n\n  typed.addType = function (type, beforeObjectTest) {\n    var before = 'any';\n\n    if (beforeObjectTest !== false && typeMap.has('Object')) {\n      before = 'Object';\n    }\n\n    typed.addTypes([type], before);\n  };\n  /**\n   * Verify that the ConversionDef conversion has a valid format.\n   *\n   * @param {conversionDef} conversion\n   * @return {void}\n   * @throws {TypeError|SyntaxError}\n   */\n\n\n  function _validateConversion(conversion) {\n    if (!conversion || typeof conversion.from !== 'string' || typeof conversion.to !== 'string' || typeof conversion.convert !== 'function') {\n      throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');\n    }\n\n    if (conversion.to === conversion.from) {\n      throw new SyntaxError('Illegal to define conversion from \"' + conversion.from + '\" to itself.');\n    }\n  }\n  /**\n   * Add a conversion\n   *\n   * @param {ConversionDef} conversion\n   * @returns {void}\n   * @throws {TypeError}\n   */\n\n\n  typed.addConversion = function (conversion) {\n    _validateConversion(conversion);\n\n    var to = findType(conversion.to);\n\n    if (to.conversionsTo.every(function (other) {\n      return other.from !== conversion.from;\n    })) {\n      to.conversionsTo.push({\n        from: conversion.from,\n        convert: conversion.convert,\n        index: nConversions++\n      });\n    } else {\n      throw new Error('There is already a conversion from \"' + conversion.from + '\" to \"' + to.name + '\"');\n    }\n  };\n  /**\n   * Convenience wrapper to call addConversion on each conversion in a list.\n   *\n   @param {ConversionDef[]} conversions\n   @returns {void}\n   @throws {TypeError}\n   */\n\n\n  typed.addConversions = function (conversions) {\n    conversions.forEach(typed.addConversion);\n  };\n  /**\n   * Remove the specified conversion. The format is the same as for\n   * addConversion, and the convert function must match or an error\n   * is thrown.\n   *\n   * @param {{from: string, to: string, convert: function}} conversion\n   * @returns {void}\n   * @throws {TypeError|SyntaxError|Error}\n   */\n\n\n  typed.removeConversion = function (conversion) {\n    _validateConversion(conversion);\n\n    var to = findType(conversion.to);\n    var existingConversion = findInArray(to.conversionsTo, function (c) {\n      return c.from === conversion.from;\n    });\n\n    if (!existingConversion) {\n      throw new Error('Attempt to remove nonexistent conversion from ' + conversion.from + ' to ' + conversion.to);\n    }\n\n    if (existingConversion.convert !== conversion.convert) {\n      throw new Error('Conversion to remove does not match existing conversion');\n    }\n\n    var index = to.conversionsTo.indexOf(existingConversion);\n    to.conversionsTo.splice(index, 1);\n  };\n  /**\n   * Produce the specific signature that a typed function\n   * will execute on the given arguments. Here, a \"signature\" is an\n   * object with properties 'params', 'test', 'fn', and 'implementation'.\n   * This last property is a function that converts params as necessary\n   * and then calls 'fn'. Returns null if there is no matching signature.\n   * @param {typed-function} tf\n   * @param {any[]} argList\n   * @returns {{params: string, test: function, fn: function, implementation: function}}\n   */\n\n\n  typed.resolve = function (tf, argList) {\n    if (!isTypedFunction(tf)) {\n      throw new TypeError(NOT_TYPED_FUNCTION);\n    }\n\n    var sigs = tf._typedFunctionData.signatures;\n\n    for (var i = 0; i < sigs.length; ++i) {\n      if (sigs[i].test(argList)) {\n        return sigs[i];\n      }\n    }\n\n    return null;\n  };\n\n  return typed;\n}\n\nexport default create();\n//# sourceMappingURL=typed-function.mjs.map","import { isInteger } from '../number.js';\n/**\n * Formats a BigNumber in a given base\n * @param {BigNumber} n\n * @param {number} base\n * @param {number} size\n * @returns {string}\n */\n\nfunction formatBigNumberToBase(n, base, size) {\n  var BigNumberCtor = n.constructor;\n  var big2 = new BigNumberCtor(2);\n  var suffix = '';\n\n  if (size) {\n    if (size < 1) {\n      throw new Error('size must be in greater than 0');\n    }\n\n    if (!isInteger(size)) {\n      throw new Error('size must be an integer');\n    }\n\n    if (n.greaterThan(big2.pow(size - 1).sub(1)) || n.lessThan(big2.pow(size - 1).mul(-1))) {\n      throw new Error(\"Value must be in range [-2^\".concat(size - 1, \", 2^\").concat(size - 1, \"-1]\"));\n    }\n\n    if (!n.isInteger()) {\n      throw new Error('Value must be an integer');\n    }\n\n    if (n.lessThan(0)) {\n      n = n.add(big2.pow(size));\n    }\n\n    suffix = \"i\".concat(size);\n  }\n\n  switch (base) {\n    case 2:\n      return \"\".concat(n.toBinary()).concat(suffix);\n\n    case 8:\n      return \"\".concat(n.toOctal()).concat(suffix);\n\n    case 16:\n      return \"\".concat(n.toHexadecimal()).concat(suffix);\n\n    default:\n      throw new Error(\"Base \".concat(base, \" not supported \"));\n  }\n}\n/**\n * Convert a BigNumber to a formatted string representation.\n *\n * Syntax:\n *\n *    format(value)\n *    format(value, options)\n *    format(value, precision)\n *    format(value, fn)\n *\n * Where:\n *\n *    {number} value   The value to be formatted\n *    {Object} options An object with formatting options. Available options:\n *                     {string} notation\n *                         Number notation. Choose from:\n *                         'fixed'          Always use regular number notation.\n *                                          For example '123.40' and '14000000'\n *                         'exponential'    Always use exponential notation.\n *                                          For example '1.234e+2' and '1.4e+7'\n *                         'auto' (default) Regular number notation for numbers\n *                                          having an absolute value between\n *                                          `lower` and `upper` bounds, and uses\n *                                          exponential notation elsewhere.\n *                                          Lower bound is included, upper bound\n *                                          is excluded.\n *                                          For example '123.4' and '1.4e7'.\n *                         'bin', 'oct, or\n *                         'hex'            Format the number using binary, octal,\n *                                          or hexadecimal notation.\n *                                          For example '0b1101' and '0x10fe'.\n *                     {number} wordSize    The word size in bits to use for formatting\n *                                          in binary, octal, or hexadecimal notation.\n *                                          To be used only with 'bin', 'oct', or 'hex'\n *                                          values for 'notation' option. When this option\n *                                          is defined the value is formatted as a signed\n *                                          twos complement integer of the given word size\n *                                          and the size suffix is appended to the output.\n *                                          For example\n *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.\n *                                          Default value is undefined.\n *                     {number} precision   A number between 0 and 16 to round\n *                                          the digits of the number.\n *                                          In case of notations 'exponential',\n *                                          'engineering', and 'auto',\n *                                          `precision` defines the total\n *                                          number of significant digits returned.\n *                                          In case of notation 'fixed',\n *                                          `precision` defines the number of\n *                                          significant digits after the decimal\n *                                          point.\n *                                          `precision` is undefined by default.\n *                     {number} lowerExp    Exponent determining the lower boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `-3`.\n *                     {number} upperExp    Exponent determining the upper boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `5`.\n *    {Function} fn    A custom formatting function. Can be used to override the\n *                     built-in notations. Function `fn` is called with `value` as\n *                     parameter and must return a string. Is useful for example to\n *                     format all values inside a matrix in a particular way.\n *\n * Examples:\n *\n *    format(6.4)                                        // '6.4'\n *    format(1240000)                                    // '1.24e6'\n *    format(1/3)                                        // '0.3333333333333333'\n *    format(1/3, 3)                                     // '0.333'\n *    format(21385, 2)                                   // '21000'\n *    format(12e8, {notation: 'fixed'})                  // returns '1200000000'\n *    format(2.3,    {notation: 'fixed', precision: 4})  // returns '2.3000'\n *    format(52.8,   {notation: 'exponential'})          // returns '5.28e+1'\n *    format(12400,  {notation: 'engineering'})          // returns '12.400e+3'\n *\n * @param {BigNumber} value\n * @param {Object | Function | number} [options]\n * @return {string} str The formatted value\n */\n\n\nexport function format(value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  } // handle special cases\n\n\n  if (!value.isFinite()) {\n    return value.isNaN() ? 'NaN' : value.gt(0) ? 'Infinity' : '-Infinity';\n  } // default values for options\n\n\n  var notation = 'auto';\n  var precision;\n  var wordSize;\n\n  if (options !== undefined) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    } // determine precision from options\n\n\n    if (typeof options === 'number') {\n      precision = options;\n    } else if (options.precision) {\n      precision = options.precision;\n    }\n\n    if (options.wordSize) {\n      wordSize = options.wordSize;\n\n      if (typeof wordSize !== 'number') {\n        throw new Error('Option \"wordSize\" must be a number');\n      }\n    }\n  } // handle the various notations\n\n\n  switch (notation) {\n    case 'fixed':\n      return toFixed(value, precision);\n\n    case 'exponential':\n      return toExponential(value, precision);\n\n    case 'engineering':\n      return toEngineering(value, precision);\n\n    case 'bin':\n      return formatBigNumberToBase(value, 2, wordSize);\n\n    case 'oct':\n      return formatBigNumberToBase(value, 8, wordSize);\n\n    case 'hex':\n      return formatBigNumberToBase(value, 16, wordSize);\n\n    case 'auto':\n      {\n        // determine lower and upper bound for exponential notation.\n        // TODO: implement support for upper and lower to be BigNumbers themselves\n        var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;\n        var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5; // handle special case zero\n\n        if (value.isZero()) return '0'; // determine whether or not to output exponential notation\n\n        var str;\n        var rounded = value.toSignificantDigits(precision);\n        var exp = rounded.e;\n\n        if (exp >= lowerExp && exp < upperExp) {\n          // normal number notation\n          str = rounded.toFixed();\n        } else {\n          // exponential notation\n          str = toExponential(value, precision);\n        } // remove trailing zeros after the decimal point\n\n\n        return str.replace(/((\\.\\d*?)(0+))($|e)/, function () {\n          var digits = arguments[2];\n          var e = arguments[4];\n          return digits !== '.' ? digits + e : e;\n        });\n      }\n\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' + 'Choose \"auto\", \"exponential\", \"fixed\", \"bin\", \"oct\", or \"hex.');\n  }\n}\n/**\n * Format a BigNumber in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\n * @param {BigNumber | string} value\n * @param {number} [precision]        Optional number of significant figures to return.\n */\n\nexport function toEngineering(value, precision) {\n  // find nearest lower multiple of 3 for exponent\n  var e = value.e;\n  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3; // find difference in exponents, and calculate the value without exponent\n\n  var valueWithoutExp = value.mul(Math.pow(10, -newExp));\n  var valueStr = valueWithoutExp.toPrecision(precision);\n\n  if (valueStr.indexOf('e') !== -1) {\n    valueStr = valueWithoutExp.toString();\n  }\n\n  return valueStr + 'e' + (e >= 0 ? '+' : '') + newExp.toString();\n}\n/**\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n * @param {BigNumber} value\n * @param {number} [precision]  Number of digits in formatted output.\n *                              If not provided, the maximum available digits\n *                              is used.\n * @returns {string} str\n */\n\nexport function toExponential(value, precision) {\n  if (precision !== undefined) {\n    return value.toExponential(precision - 1); // Note the offset of one\n  } else {\n    return value.toExponential();\n  }\n}\n/**\n * Format a number with fixed notation.\n * @param {BigNumber} value\n * @param {number} [precision=undefined] Optional number of decimals after the\n *                                       decimal point. Undefined by default.\n */\n\nexport function toFixed(value, precision) {\n  return value.toFixed(precision);\n}","import { isBigNumber, isString, typeOf } from './is.js';\nimport { format as formatNumber } from './number.js';\nimport { format as formatBigNumber } from './bignumber/formatter.js';\n/**\n * Check if a text ends with a certain string.\n * @param {string} text\n * @param {string} search\n */\n\nexport function endsWith(text, search) {\n  var start = text.length - search.length;\n  var end = text.length;\n  return text.substring(start, end) === search;\n}\n/**\n * Format a value of any type into a string.\n *\n * Usage:\n *     math.format(value)\n *     math.format(value, precision)\n *     math.format(value, options)\n *\n * When value is a function:\n *\n * - When the function has a property `syntax`, it returns this\n *   syntax description.\n * - In other cases, a string `'function'` is returned.\n *\n * When `value` is an Object:\n *\n * - When the object contains a property `format` being a function, this\n *   function is invoked as `value.format(options)` and the result is returned.\n * - When the object has its own `toString` method, this method is invoked\n *   and the result is returned.\n * - In other cases the function will loop over all object properties and\n *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n *\n * Example usage:\n *     math.format(2/7)                // '0.2857142857142857'\n *     math.format(math.pi, 3)         // '3.14'\n *     math.format(new Complex(2, 3))  // '2 + 3i'\n *     math.format('hello')            // '\"hello\"'\n *\n * @param {*} value             Value to be stringified\n * @param {Object | number | Function} [options]\n *     Formatting options. See src/utils/number.js:format for a\n *     description of the available options controlling number output.\n *     This generic \"format\" also supports the option property `truncate: NN`\n *     giving the maximum number NN of characters to return (if there would\n *     have been more, they are deleted and replaced by an ellipsis).\n * @return {string} str\n */\n\nexport function format(value, options) {\n  var result = _format(value, options);\n\n  if (options && typeof options === 'object' && 'truncate' in options && result.length > options.truncate) {\n    return result.substring(0, options.truncate - 3) + '...';\n  }\n\n  return result;\n}\n\nfunction _format(value, options) {\n  if (typeof value === 'number') {\n    return formatNumber(value, options);\n  }\n\n  if (isBigNumber(value)) {\n    return formatBigNumber(value, options);\n  } // note: we use unsafe duck-typing here to check for Fractions, this is\n  // ok here since we're only invoking toString or concatenating its values\n\n\n  if (looksLikeFraction(value)) {\n    if (!options || options.fraction !== 'decimal') {\n      // output as ratio, like '1/3'\n      return value.s * value.n + '/' + value.d;\n    } else {\n      // output as decimal, like '0.(3)'\n      return value.toString();\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return formatArray(value, options);\n  }\n\n  if (isString(value)) {\n    return '\"' + value + '\"';\n  }\n\n  if (typeof value === 'function') {\n    return value.syntax ? String(value.syntax) : 'function';\n  }\n\n  if (value && typeof value === 'object') {\n    if (typeof value.format === 'function') {\n      return value.format(options);\n    } else if (value && value.toString(options) !== {}.toString()) {\n      // this object has a non-native toString method, use that one\n      return value.toString(options);\n    } else {\n      var entries = Object.keys(value).map(key => {\n        return '\"' + key + '\": ' + format(value[key], options);\n      });\n      return '{' + entries.join(', ') + '}';\n    }\n  }\n\n  return String(value);\n}\n/**\n * Stringify a value into a string enclosed in double quotes.\n * Unescaped double quotes and backslashes inside the value are escaped.\n * @param {*} value\n * @return {string}\n */\n\n\nexport function stringify(value) {\n  var text = String(value);\n  var escaped = '';\n  var i = 0;\n\n  while (i < text.length) {\n    var c = text.charAt(i);\n\n    if (c === '\\\\') {\n      escaped += c;\n      i++;\n      c = text.charAt(i);\n\n      if (c === '' || '\"\\\\/bfnrtu'.indexOf(c) === -1) {\n        escaped += '\\\\'; // no valid escape character -> escape it\n      }\n\n      escaped += c;\n    } else if (c === '\"') {\n      escaped += '\\\\\"';\n    } else {\n      escaped += c;\n    }\n\n    i++;\n  }\n\n  return '\"' + escaped + '\"';\n}\n/**\n * Escape special HTML characters\n * @param {*} value\n * @return {string}\n */\n\nexport function escape(value) {\n  var text = String(value);\n  text = text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  return text;\n}\n/**\n * Recursively format an n-dimensional matrix\n * Example output: \"[[1, 2], [3, 4]]\"\n * @param {Array} array\n * @param {Object | number | Function} [options]  Formatting options. See\n *                                                lib/utils/number:format for a\n *                                                description of the available\n *                                                options.\n * @returns {string} str\n */\n\nfunction formatArray(array, options) {\n  if (Array.isArray(array)) {\n    var str = '[';\n    var len = array.length;\n\n    for (var i = 0; i < len; i++) {\n      if (i !== 0) {\n        str += ', ';\n      }\n\n      str += formatArray(array[i], options);\n    }\n\n    str += ']';\n    return str;\n  } else {\n    return format(array, options);\n  }\n}\n/**\n * Check whether a value looks like a Fraction (unsafe duck-type check)\n * @param {*} value\n * @return {boolean}\n */\n\n\nfunction looksLikeFraction(value) {\n  return value && typeof value === 'object' && typeof value.s === 'number' && typeof value.n === 'number' && typeof value.d === 'number' || false;\n}\n/**\n * Compare two strings\n * @param {string} x\n * @param {string} y\n * @returns {number}\n */\n\n\nexport function compareText(x, y) {\n  // we don't want to convert numbers to string, only accept string input\n  if (!isString(x)) {\n    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + typeOf(x) + ', index: 0)');\n  }\n\n  if (!isString(y)) {\n    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + typeOf(y) + ', index: 1)');\n  }\n\n  return x === y ? 0 : x > y ? 1 : -1;\n}","/**\n * Create a range error with the message:\n *     'Dimension mismatch (<actual size> != <expected size>)'\n * @param {number | number[]} actual        The actual size\n * @param {number | number[]} expected      The expected size\n * @param {string} [relation='!=']          Optional relation between actual\n *                                          and expected size: '!=', '<', etc.\n * @extends RangeError\n */\nexport function DimensionError(actual, expected, relation) {\n  if (!(this instanceof DimensionError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  this.actual = actual;\n  this.expected = expected;\n  this.relation = relation;\n  this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? '[' + actual.join(', ') + ']' : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? '[' + expected.join(', ') + ']' : expected) + ')';\n  this.stack = new Error().stack;\n}\nDimensionError.prototype = new RangeError();\nDimensionError.prototype.constructor = RangeError;\nDimensionError.prototype.name = 'DimensionError';\nDimensionError.prototype.isDimensionError = true;","/**\n * Create a range error with the message:\n *     'Index out of range (index < min)'\n *     'Index out of range (index < max)'\n *\n * @param {number} index     The actual index\n * @param {number} [min=0]   Minimum index (included)\n * @param {number} [max]     Maximum index (excluded)\n * @extends RangeError\n */\nexport function IndexError(index, min, max) {\n  if (!(this instanceof IndexError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  this.index = index;\n\n  if (arguments.length < 3) {\n    this.min = 0;\n    this.max = min;\n  } else {\n    this.min = min;\n    this.max = max;\n  }\n\n  if (this.min !== undefined && this.index < this.min) {\n    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';\n  } else if (this.max !== undefined && this.index >= this.max) {\n    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';\n  } else {\n    this.message = 'Index out of range (' + this.index + ')';\n  }\n\n  this.stack = new Error().stack;\n}\nIndexError.prototype = new RangeError();\nIndexError.prototype.constructor = RangeError;\nIndexError.prototype.name = 'IndexError';\nIndexError.prototype.isIndexError = true;","import { isInteger } from './number.js';\nimport { isNumber } from './is.js';\nimport { format } from './string.js';\nimport { DimensionError } from '../error/DimensionError.js';\nimport { IndexError } from '../error/IndexError.js';\n/**\n * Calculate the size of a multi dimensional array.\n * This function checks the size of the first entry, it does not validate\n * whether all dimensions match. (use function `validate` for that)\n * @param {Array} x\n * @Return {Number[]} size\n */\n\nexport function arraySize(x) {\n  var s = [];\n\n  while (Array.isArray(x)) {\n    s.push(x.length);\n    x = x[0];\n  }\n\n  return s;\n}\n/**\n * Recursively validate whether each element in a multi dimensional array\n * has a size corresponding to the provided size array.\n * @param {Array} array    Array to be validated\n * @param {number[]} size  Array with the size of each dimension\n * @param {number} dim   Current dimension\n * @throws DimensionError\n * @private\n */\n\nfunction _validate(array, size, dim) {\n  var i;\n  var len = array.length;\n\n  if (len !== size[dim]) {\n    throw new DimensionError(len, size[dim]);\n  }\n\n  if (dim < size.length - 1) {\n    // recursively validate each child array\n    var dimNext = dim + 1;\n\n    for (i = 0; i < len; i++) {\n      var child = array[i];\n\n      if (!Array.isArray(child)) {\n        throw new DimensionError(size.length - 1, size.length, '<');\n      }\n\n      _validate(array[i], size, dimNext);\n    }\n  } else {\n    // last dimension. none of the childs may be an array\n    for (i = 0; i < len; i++) {\n      if (Array.isArray(array[i])) {\n        throw new DimensionError(size.length + 1, size.length, '>');\n      }\n    }\n  }\n}\n/**\n * Validate whether each element in a multi dimensional array has\n * a size corresponding to the provided size array.\n * @param {Array} array    Array to be validated\n * @param {number[]} size  Array with the size of each dimension\n * @throws DimensionError\n */\n\n\nexport function validate(array, size) {\n  var isScalar = size.length === 0;\n\n  if (isScalar) {\n    // scalar\n    if (Array.isArray(array)) {\n      throw new DimensionError(array.length, 0);\n    }\n  } else {\n    // array\n    _validate(array, size, 0);\n  }\n}\n/**\n * Test whether index is an integer number with index >= 0 and index < length\n * when length is provided\n * @param {number} index    Zero-based index\n * @param {number} [length] Length of the array\n */\n\nexport function validateIndex(index, length) {\n  if (!isNumber(index) || !isInteger(index)) {\n    throw new TypeError('Index must be an integer (value: ' + index + ')');\n  }\n\n  if (index < 0 || typeof length === 'number' && index >= length) {\n    throw new IndexError(index, length);\n  }\n}\n/**\n * Resize a multi dimensional array. The resized array is returned.\n * @param {Array} array         Array to be resized\n * @param {Array.<number>} size Array with the size of each dimension\n * @param {*} [defaultValue=0]  Value to be filled in in new entries,\n *                              zero by default. Specify for example `null`,\n *                              to clearly see entries that are not explicitly\n *                              set.\n * @return {Array} array         The resized array\n */\n\nexport function resize(array, size, defaultValue) {\n  // TODO: add support for scalars, having size=[] ?\n  // check the type of the arguments\n  if (!Array.isArray(array) || !Array.isArray(size)) {\n    throw new TypeError('Array expected');\n  }\n\n  if (size.length === 0) {\n    throw new Error('Resizing to scalar is not supported');\n  } // check whether size contains positive integers\n\n\n  size.forEach(function (value) {\n    if (!isNumber(value) || !isInteger(value) || value < 0) {\n      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format(size) + ')');\n    }\n  }); // recursively resize the array\n\n  var _defaultValue = defaultValue !== undefined ? defaultValue : 0;\n\n  _resize(array, size, 0, _defaultValue);\n\n  return array;\n}\n/**\n * Recursively resize a multi dimensional array\n * @param {Array} array         Array to be resized\n * @param {number[]} size       Array with the size of each dimension\n * @param {number} dim          Current dimension\n * @param {*} [defaultValue]    Value to be filled in in new entries,\n *                              undefined by default.\n * @private\n */\n\nfunction _resize(array, size, dim, defaultValue) {\n  var i;\n  var elem;\n  var oldLen = array.length;\n  var newLen = size[dim];\n  var minLen = Math.min(oldLen, newLen); // apply new length\n\n  array.length = newLen;\n\n  if (dim < size.length - 1) {\n    // non-last dimension\n    var dimNext = dim + 1; // resize existing child arrays\n\n    for (i = 0; i < minLen; i++) {\n      // resize child array\n      elem = array[i];\n\n      if (!Array.isArray(elem)) {\n        elem = [elem]; // add a dimension\n\n        array[i] = elem;\n      }\n\n      _resize(elem, size, dimNext, defaultValue);\n    } // create new child arrays\n\n\n    for (i = minLen; i < newLen; i++) {\n      // get child array\n      elem = [];\n      array[i] = elem; // resize new child array\n\n      _resize(elem, size, dimNext, defaultValue);\n    }\n  } else {\n    // last dimension\n    // remove dimensions of existing values\n    for (i = 0; i < minLen; i++) {\n      while (Array.isArray(array[i])) {\n        array[i] = array[i][0];\n      }\n    } // fill new elements with the default value\n\n\n    for (i = minLen; i < newLen; i++) {\n      array[i] = defaultValue;\n    }\n  }\n}\n/**\n * Re-shape a multi dimensional array to fit the specified dimensions\n * @param {Array} array           Array to be reshaped\n * @param {Array.<number>} sizes  List of sizes for each dimension\n * @returns {Array}               Array whose data has been formatted to fit the\n *                                specified dimensions\n *\n * @throws {DimensionError}       If the product of the new dimension sizes does\n *                                not equal that of the old ones\n */\n\n\nexport function reshape(array, sizes) {\n  var flatArray = flatten(array);\n  var currentLength = flatArray.length;\n\n  if (!Array.isArray(array) || !Array.isArray(sizes)) {\n    throw new TypeError('Array expected');\n  }\n\n  if (sizes.length === 0) {\n    throw new DimensionError(0, currentLength, '!=');\n  }\n\n  sizes = processSizesWildcard(sizes, currentLength);\n  var newLength = product(sizes);\n\n  if (currentLength !== newLength) {\n    throw new DimensionError(newLength, currentLength, '!=');\n  }\n\n  try {\n    return _reshape(flatArray, sizes);\n  } catch (e) {\n    if (e instanceof DimensionError) {\n      throw new DimensionError(newLength, currentLength, '!=');\n    }\n\n    throw e;\n  }\n}\n/**\n * Replaces the wildcard -1 in the sizes array.\n * @param {Array.<number>} sizes  List of sizes for each dimension. At most on wildcard.\n * @param {number} currentLength  Number of elements in the array.\n * @throws {Error}                If more than one wildcard or unable to replace it.\n * @returns {Array.<number>}      The sizes array with wildcard replaced.\n */\n\nexport function processSizesWildcard(sizes, currentLength) {\n  var newLength = product(sizes);\n  var processedSizes = sizes.slice();\n  var WILDCARD = -1;\n  var wildCardIndex = sizes.indexOf(WILDCARD);\n  var isMoreThanOneWildcard = sizes.indexOf(WILDCARD, wildCardIndex + 1) >= 0;\n\n  if (isMoreThanOneWildcard) {\n    throw new Error('More than one wildcard in sizes');\n  }\n\n  var hasWildcard = wildCardIndex >= 0;\n  var canReplaceWildcard = currentLength % newLength === 0;\n\n  if (hasWildcard) {\n    if (canReplaceWildcard) {\n      processedSizes[wildCardIndex] = -currentLength / newLength;\n    } else {\n      throw new Error('Could not replace wildcard, since ' + currentLength + ' is no multiple of ' + -newLength);\n    }\n  }\n\n  return processedSizes;\n}\n/**\n * Computes the product of all array elements.\n * @param {Array<number>} array Array of factors\n * @returns {number}            Product of all elements\n */\n\nfunction product(array) {\n  return array.reduce((prev, curr) => prev * curr, 1);\n}\n/**\n * Iteratively re-shape a multi dimensional array to fit the specified dimensions\n * @param {Array} array           Array to be reshaped\n * @param {Array.<number>} sizes  List of sizes for each dimension\n * @returns {Array}               Array whose data has been formatted to fit the\n *                                specified dimensions\n */\n\n\nfunction _reshape(array, sizes) {\n  // testing if there are enough elements for the requested shape\n  var tmpArray = array;\n  var tmpArray2; // for each dimensions starting by the last one and ignoring the first one\n\n  for (var sizeIndex = sizes.length - 1; sizeIndex > 0; sizeIndex--) {\n    var size = sizes[sizeIndex];\n    tmpArray2 = []; // aggregate the elements of the current tmpArray in elements of the requested size\n\n    var length = tmpArray.length / size;\n\n    for (var i = 0; i < length; i++) {\n      tmpArray2.push(tmpArray.slice(i * size, (i + 1) * size));\n    } // set it as the new tmpArray for the next loop turn or for return\n\n\n    tmpArray = tmpArray2;\n  }\n\n  return tmpArray;\n}\n/**\n * Squeeze a multi dimensional array\n * @param {Array} array\n * @param {Array} [size]\n * @returns {Array} returns the array itself\n */\n\n\nexport function squeeze(array, size) {\n  var s = size || arraySize(array); // squeeze outer dimensions\n\n  while (Array.isArray(array) && array.length === 1) {\n    array = array[0];\n    s.shift();\n  } // find the first dimension to be squeezed\n\n\n  var dims = s.length;\n\n  while (s[dims - 1] === 1) {\n    dims--;\n  } // squeeze inner dimensions\n\n\n  if (dims < s.length) {\n    array = _squeeze(array, dims, 0);\n    s.length = dims;\n  }\n\n  return array;\n}\n/**\n * Recursively squeeze a multi dimensional array\n * @param {Array} array\n * @param {number} dims Required number of dimensions\n * @param {number} dim  Current dimension\n * @returns {Array | *} Returns the squeezed array\n * @private\n */\n\nfunction _squeeze(array, dims, dim) {\n  var i, ii;\n\n  if (dim < dims) {\n    var next = dim + 1;\n\n    for (i = 0, ii = array.length; i < ii; i++) {\n      array[i] = _squeeze(array[i], dims, next);\n    }\n  } else {\n    while (Array.isArray(array)) {\n      array = array[0];\n    }\n  }\n\n  return array;\n}\n/**\n * Unsqueeze a multi dimensional array: add dimensions when missing\n *\n * Paramter `size` will be mutated to match the new, unqueezed matrix size.\n *\n * @param {Array} array\n * @param {number} dims       Desired number of dimensions of the array\n * @param {number} [outer]    Number of outer dimensions to be added\n * @param {Array} [size] Current size of array.\n * @returns {Array} returns the array itself\n * @private\n */\n\n\nexport function unsqueeze(array, dims, outer, size) {\n  var s = size || arraySize(array); // unsqueeze outer dimensions\n\n  if (outer) {\n    for (var i = 0; i < outer; i++) {\n      array = [array];\n      s.unshift(1);\n    }\n  } // unsqueeze inner dimensions\n\n\n  array = _unsqueeze(array, dims, 0);\n\n  while (s.length < dims) {\n    s.push(1);\n  }\n\n  return array;\n}\n/**\n * Recursively unsqueeze a multi dimensional array\n * @param {Array} array\n * @param {number} dims Required number of dimensions\n * @param {number} dim  Current dimension\n * @returns {Array | *} Returns the squeezed array\n * @private\n */\n\nfunction _unsqueeze(array, dims, dim) {\n  var i, ii;\n\n  if (Array.isArray(array)) {\n    var next = dim + 1;\n\n    for (i = 0, ii = array.length; i < ii; i++) {\n      array[i] = _unsqueeze(array[i], dims, next);\n    }\n  } else {\n    for (var d = dim; d < dims; d++) {\n      array = [array];\n    }\n  }\n\n  return array;\n}\n/**\n * Flatten a multi dimensional array, put all elements in a one dimensional\n * array\n * @param {Array} array   A multi dimensional array\n * @return {Array}        The flattened array (1 dimensional)\n */\n\n\nexport function flatten(array) {\n  if (!Array.isArray(array)) {\n    // if not an array, return as is\n    return array;\n  }\n\n  var flat = [];\n  array.forEach(function callback(value) {\n    if (Array.isArray(value)) {\n      value.forEach(callback); // traverse through sub-arrays recursively\n    } else {\n      flat.push(value);\n    }\n  });\n  return flat;\n}\n/**\n * A safe map\n * @param {Array} array\n * @param {function} callback\n */\n\nexport function map(array, callback) {\n  return Array.prototype.map.call(array, callback);\n}\n/**\n * A safe forEach\n * @param {Array} array\n * @param {function} callback\n */\n\nexport function forEach(array, callback) {\n  Array.prototype.forEach.call(array, callback);\n}\n/**\n * A safe filter\n * @param {Array} array\n * @param {function} callback\n */\n\nexport function filter(array, callback) {\n  if (arraySize(array).length !== 1) {\n    throw new Error('Only one dimensional matrices supported');\n  }\n\n  return Array.prototype.filter.call(array, callback);\n}\n/**\n * Filter values in a callback given a regular expression\n * @param {Array} array\n * @param {RegExp} regexp\n * @return {Array} Returns the filtered array\n * @private\n */\n\nexport function filterRegExp(array, regexp) {\n  if (arraySize(array).length !== 1) {\n    throw new Error('Only one dimensional matrices supported');\n  }\n\n  return Array.prototype.filter.call(array, entry => regexp.test(entry));\n}\n/**\n * A safe join\n * @param {Array} array\n * @param {string} separator\n */\n\nexport function join(array, separator) {\n  return Array.prototype.join.call(array, separator);\n}\n/**\n * Assign a numeric identifier to every element of a sorted array\n * @param {Array} a  An array\n * @return {Array} An array of objects containing the original value and its identifier\n */\n\nexport function identify(a) {\n  if (!Array.isArray(a)) {\n    throw new TypeError('Array input expected');\n  }\n\n  if (a.length === 0) {\n    return a;\n  }\n\n  var b = [];\n  var count = 0;\n  b[0] = {\n    value: a[0],\n    identifier: 0\n  };\n\n  for (var i = 1; i < a.length; i++) {\n    if (a[i] === a[i - 1]) {\n      count++;\n    } else {\n      count = 0;\n    }\n\n    b.push({\n      value: a[i],\n      identifier: count\n    });\n  }\n\n  return b;\n}\n/**\n * Remove the numeric identifier from the elements\n * @param {array} a  An array\n * @return {array} An array of values without identifiers\n */\n\nexport function generalize(a) {\n  if (!Array.isArray(a)) {\n    throw new TypeError('Array input expected');\n  }\n\n  if (a.length === 0) {\n    return a;\n  }\n\n  var b = [];\n\n  for (var i = 0; i < a.length; i++) {\n    b.push(a[i].value);\n  }\n\n  return b;\n}\n/**\n * Check the datatype of a given object\n * This is a low level implementation that should only be used by\n * parent Matrix classes such as SparseMatrix or DenseMatrix\n * This method does not validate Array Matrix shape\n * @param {Array} array\n * @param {function} typeOf   Callback function to use to determine the type of a value\n * @return {string}\n */\n\nexport function getArrayDataType(array, typeOf) {\n  var type; // to hold type info\n\n  var length = 0; // to hold length value to ensure it has consistent sizes\n\n  for (var i = 0; i < array.length; i++) {\n    var item = array[i];\n    var isArray = Array.isArray(item); // Saving the target matrix row size\n\n    if (i === 0 && isArray) {\n      length = item.length;\n    } // If the current item is an array but the length does not equal the targetVectorSize\n\n\n    if (isArray && item.length !== length) {\n      return undefined;\n    }\n\n    var itemType = isArray ? getArrayDataType(item, typeOf) // recurse into a nested array\n    : typeOf(item);\n\n    if (type === undefined) {\n      type = itemType; // first item\n    } else if (type !== itemType) {\n      return 'mixed';\n    } else {// we're good, everything has the same type so far\n    }\n  }\n\n  return type;\n}\n/**\n * Return the last item from an array\n * @param array\n * @returns {*}\n */\n\nexport function last(array) {\n  return array[array.length - 1];\n}\n/**\n * Get all but the last element of array.\n */\n\nexport function initial(array) {\n  return array.slice(0, array.length - 1);\n}\n/**\n * Test whether an array or string contains an item\n * @param {Array | string} array\n * @param {*} item\n * @return {boolean}\n */\n\nexport function contains(array, item) {\n  return array.indexOf(item) !== -1;\n}","import { contains } from './array.js';\nimport { pickShallow } from './object.js';\n/**\n * Create a factory function, which can be used to inject dependencies.\n *\n * The created functions are memoized, a consecutive call of the factory\n * with the exact same inputs will return the same function instance.\n * The memoized cache is exposed on `factory.cache` and can be cleared\n * if needed.\n *\n * Example:\n *\n *     const name = 'log'\n *     const dependencies = ['config', 'typed', 'divideScalar', 'Complex']\n *\n *     export const createLog = factory(name, dependencies, ({ typed, config, divideScalar, Complex }) => {\n *       // ... create the function log here and return it\n *     }\n *\n * @param {string} name           Name of the function to be created\n * @param {string[]} dependencies The names of all required dependencies\n * @param {function} create       Callback function called with an object with all dependencies\n * @param {Object} [meta]         Optional object with meta information that will be attached\n *                                to the created factory function as property `meta`.\n * @returns {function}\n */\n\nexport function factory(name, dependencies, create, meta) {\n  function assertAndCreate(scope) {\n    // we only pass the requested dependencies to the factory function\n    // to prevent functions to rely on dependencies that are not explicitly\n    // requested.\n    var deps = pickShallow(scope, dependencies.map(stripOptionalNotation));\n    assertDependencies(name, dependencies, scope);\n    return create(deps);\n  }\n\n  assertAndCreate.isFactory = true;\n  assertAndCreate.fn = name;\n  assertAndCreate.dependencies = dependencies.slice().sort();\n\n  if (meta) {\n    assertAndCreate.meta = meta;\n  }\n\n  return assertAndCreate;\n}\n/**\n * Sort all factories such that when loading in order, the dependencies are resolved.\n *\n * @param {Array} factories\n * @returns {Array} Returns a new array with the sorted factories.\n */\n\nexport function sortFactories(factories) {\n  var factoriesByName = {};\n  factories.forEach(factory => {\n    factoriesByName[factory.fn] = factory;\n  });\n\n  function containsDependency(factory, dependency) {\n    // TODO: detect circular references\n    if (isFactory(factory)) {\n      if (contains(factory.dependencies, dependency.fn || dependency.name)) {\n        return true;\n      }\n\n      if (factory.dependencies.some(d => containsDependency(factoriesByName[d], dependency))) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  var sorted = [];\n\n  function addFactory(factory) {\n    var index = 0;\n\n    while (index < sorted.length && !containsDependency(sorted[index], factory)) {\n      index++;\n    }\n\n    sorted.splice(index, 0, factory);\n  } // sort regular factory functions\n\n\n  factories.filter(isFactory).forEach(addFactory); // sort legacy factory functions AFTER the regular factory functions\n\n  factories.filter(factory => !isFactory(factory)).forEach(addFactory);\n  return sorted;\n} // TODO: comment or cleanup if unused in the end\n\nexport function create(factories) {\n  var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  sortFactories(factories).forEach(factory => factory(scope));\n  return scope;\n}\n/**\n * Test whether an object is a factory. This is the case when it has\n * properties name, dependencies, and a function create.\n * @param {*} obj\n * @returns {boolean}\n */\n\nexport function isFactory(obj) {\n  return typeof obj === 'function' && typeof obj.fn === 'string' && Array.isArray(obj.dependencies);\n}\n/**\n * Assert that all dependencies of a list with dependencies are available in the provided scope.\n *\n * Will throw an exception when there are dependencies missing.\n *\n * @param {string} name   Name for the function to be created. Used to generate a useful error message\n * @param {string[]} dependencies\n * @param {Object} scope\n */\n\nexport function assertDependencies(name, dependencies, scope) {\n  var allDefined = dependencies.filter(dependency => !isOptionalDependency(dependency)) // filter optionals\n  .every(dependency => scope[dependency] !== undefined);\n\n  if (!allDefined) {\n    var missingDependencies = dependencies.filter(dependency => scope[dependency] === undefined); // TODO: create a custom error class for this, a MathjsError or something like that\n\n    throw new Error(\"Cannot create function \\\"\".concat(name, \"\\\", \") + \"some dependencies are missing: \".concat(missingDependencies.map(d => \"\\\"\".concat(d, \"\\\"\")).join(', '), \".\"));\n  }\n}\nexport function isOptionalDependency(dependency) {\n  return dependency && dependency[0] === '?';\n}\nexport function stripOptionalNotation(dependency) {\n  return dependency && dependency[0] === '?' ? dependency.slice(1) : dependency;\n}","import { setSafeProperty, hasSafeProperty, getSafeProperty } from './customs.js';\nimport { isObject } from './is.js';\n/**\n * A map facade on a bare object.\n *\n * The small number of methods needed to implement a scope,\n * forwarding on to the SafeProperty functions. Over time, the codebase\n * will stop using this method, as all objects will be Maps, rather than\n * more security prone objects.\n */\n\nexport class ObjectWrappingMap {\n  constructor(object) {\n    this.wrappedObject = object;\n  }\n\n  keys() {\n    return Object.keys(this.wrappedObject);\n  }\n\n  get(key) {\n    return getSafeProperty(this.wrappedObject, key);\n  }\n\n  set(key, value) {\n    setSafeProperty(this.wrappedObject, key, value);\n    return this;\n  }\n\n  has(key) {\n    return hasSafeProperty(this.wrappedObject, key);\n  }\n\n}\n/**\n * Creates an empty map, or whatever your platform's polyfill is.\n *\n * @returns an empty Map or Map like object.\n */\n\nexport function createEmptyMap() {\n  return new Map();\n}\n/**\n * Creates a Map from the given object.\n *\n * @param { Map | { [key: string]: unknown } | undefined } mapOrObject\n * @returns\n */\n\nexport function createMap(mapOrObject) {\n  if (!mapOrObject) {\n    return createEmptyMap();\n  }\n\n  if (isMap(mapOrObject)) {\n    return mapOrObject;\n  }\n\n  if (isObject(mapOrObject)) {\n    return new ObjectWrappingMap(mapOrObject);\n  }\n\n  throw new Error('createMap can create maps from objects or Maps');\n}\n/**\n * Unwraps a map into an object.\n *\n * @param {Map} map\n * @returns { [key: string]: unknown }\n */\n\nexport function toObject(map) {\n  if (map instanceof ObjectWrappingMap) {\n    return map.wrappedObject;\n  }\n\n  var object = {};\n\n  for (var key of map.keys()) {\n    var value = map.get(key);\n    setSafeProperty(object, key, value);\n  }\n\n  return object;\n}\n/**\n * Returns `true` if the passed object appears to be a Map (i.e. duck typing).\n *\n * Methods looked for are `get`, `set`, `keys` and `has`.\n *\n * @param {Map | object} object\n * @returns\n */\n\nexport function isMap(object) {\n  // We can use the fast instanceof, or a slower duck typing check.\n  // The duck typing method needs to cover enough methods to not be confused with DenseMatrix.\n  if (!object) {\n    return false;\n  }\n\n  return object instanceof Map || object instanceof ObjectWrappingMap || typeof object.set === 'function' && typeof object.get === 'function' && typeof object.keys === 'function' && typeof object.has === 'function';\n}\n/**\n * Copies the contents of key-value pairs from each `objects` in to `map`.\n *\n * Object is `objects` can be a `Map` or object.\n *\n * This is the `Map` analog to `Object.assign`.\n */\n\nexport function assign(map) {\n  for (var _len = arguments.length, objects = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    objects[_key - 1] = arguments[_key];\n  }\n\n  for (var args of objects) {\n    if (!args) {\n      continue;\n    }\n\n    if (isMap(args)) {\n      for (var key of args.keys()) {\n        map.set(key, args.get(key));\n      }\n    } else if (isObject(args)) {\n      for (var _key2 of Object.keys(args)) {\n        map.set(_key2, args[_key2]);\n      }\n    }\n  }\n\n  return map;\n}","import { hasOwnProperty } from './object.js';\n/**\n * Get a property of a plain object\n * Throws an error in case the object is not a plain object or the\n * property is not defined on the object itself\n * @param {Object} object\n * @param {string} prop\n * @return {*} Returns the property value when safe\n */\n\nfunction getSafeProperty(object, prop) {\n  // only allow getting safe properties of a plain object\n  if (isPlainObject(object) && isSafeProperty(object, prop)) {\n    return object[prop];\n  }\n\n  if (typeof object[prop] === 'function' && isSafeMethod(object, prop)) {\n    throw new Error('Cannot access method \"' + prop + '\" as a property');\n  }\n\n  throw new Error('No access to property \"' + prop + '\"');\n}\n/**\n * Set a property on a plain object.\n * Throws an error in case the object is not a plain object or the\n * property would override an inherited property like .constructor or .toString\n * @param {Object} object\n * @param {string} prop\n * @param {*} value\n * @return {*} Returns the value\n */\n// TODO: merge this function into access.js?\n\n\nfunction setSafeProperty(object, prop, value) {\n  // only allow setting safe properties of a plain object\n  if (isPlainObject(object) && isSafeProperty(object, prop)) {\n    object[prop] = value;\n    return value;\n  }\n\n  throw new Error('No access to property \"' + prop + '\"');\n}\n\nfunction getSafeProperties(object) {\n  return Object.keys(object).filter(prop => hasOwnProperty(object, prop));\n}\n\nfunction hasSafeProperty(object, prop) {\n  return prop in object;\n}\n/**\n * Test whether a property is safe to use for an object.\n * For example .toString and .constructor are not safe\n * @param {string} prop\n * @return {boolean} Returns true when safe\n */\n\n\nfunction isSafeProperty(object, prop) {\n  if (!object || typeof object !== 'object') {\n    return false;\n  } // SAFE: whitelisted\n  // e.g length\n\n\n  if (hasOwnProperty(safeNativeProperties, prop)) {\n    return true;\n  } // UNSAFE: inherited from Object prototype\n  // e.g constructor\n\n\n  if (prop in Object.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Object.prototype is a root object\n    return false;\n  } // UNSAFE: inherited from Function prototype\n  // e.g call, apply\n\n\n  if (prop in Function.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Function.prototype is a root object\n    return false;\n  }\n\n  return true;\n}\n/**\n * Validate whether a method is safe.\n * Throws an error when that's not the case.\n * @param {Object} object\n * @param {string} method\n */\n// TODO: merge this function into assign.js?\n\n\nfunction validateSafeMethod(object, method) {\n  if (!isSafeMethod(object, method)) {\n    throw new Error('No access to method \"' + method + '\"');\n  }\n}\n/**\n * Check whether a method is safe.\n * Throws an error when that's not the case (for example for `constructor`).\n * @param {Object} object\n * @param {string} method\n * @return {boolean} Returns true when safe, false otherwise\n */\n\n\nfunction isSafeMethod(object, method) {\n  if (object === null || object === undefined || typeof object[method] !== 'function') {\n    return false;\n  } // UNSAFE: ghosted\n  // e.g overridden toString\n  // Note that IE10 doesn't support __proto__ and we can't do this check there.\n\n\n  if (hasOwnProperty(object, method) && Object.getPrototypeOf && method in Object.getPrototypeOf(object)) {\n    return false;\n  } // SAFE: whitelisted\n  // e.g toString\n\n\n  if (hasOwnProperty(safeNativeMethods, method)) {\n    return true;\n  } // UNSAFE: inherited from Object prototype\n  // e.g constructor\n\n\n  if (method in Object.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Object.prototype is a root object\n    return false;\n  } // UNSAFE: inherited from Function prototype\n  // e.g call, apply\n\n\n  if (method in Function.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Function.prototype is a root object\n    return false;\n  }\n\n  return true;\n}\n\nfunction isPlainObject(object) {\n  return typeof object === 'object' && object && object.constructor === Object;\n}\n\nvar safeNativeProperties = {\n  length: true,\n  name: true\n};\nvar safeNativeMethods = {\n  toString: true,\n  valueOf: true,\n  toLocaleString: true\n};\nexport { getSafeProperty };\nexport { setSafeProperty };\nexport { isSafeProperty };\nexport { hasSafeProperty };\nexport { getSafeProperties };\nexport { validateSafeMethod };\nexport { isSafeMethod };\nexport { isPlainObject };","/**\n * Create a typed-function which checks the types of the arguments and\n * can match them against multiple provided signatures. The typed-function\n * automatically converts inputs in order to find a matching signature.\n * Typed functions throw informative errors in case of wrong input arguments.\n *\n * See the library [typed-function](https://github.com/josdejong/typed-function)\n * for detailed documentation.\n *\n * Syntax:\n *\n *     math.typed(name, signatures) : function\n *     math.typed(signatures) : function\n *\n * Examples:\n *\n *     // create a typed function with multiple types per argument (type union)\n *     const fn2 = typed({\n *       'number | boolean': function (b) {\n *         return 'b is a number or boolean'\n *       },\n *       'string, number | boolean': function (a, b) {\n *         return 'a is a string, b is a number or boolean'\n *       }\n *     })\n *\n *     // create a typed function with an any type argument\n *     const log = typed({\n *       'string, any': function (event, data) {\n *         console.log('event: ' + event + ', data: ' + JSON.stringify(data))\n *       }\n *     })\n *\n * @param {string} [name]                          Optional name for the typed-function\n * @param {Object<string, function>} signatures   Object with one or multiple function signatures\n * @returns {function} The created typed-function.\n */\nimport { isAccessorNode, isArray, isArrayNode, isAssignmentNode, isBigNumber, isBlockNode, isBoolean, isChain, isCollection, isComplex, isConditionalNode, isConstantNode, isDate, isDenseMatrix, isFraction, isFunction, isFunctionAssignmentNode, isFunctionNode, isHelp, isIndex, isIndexNode, isMatrix, isNode, isNull, isNumber, isObject, isObjectNode, isOperatorNode, isParenthesisNode, isRange, isRangeNode, isRegExp, isResultSet, isSparseMatrix, isString, isSymbolNode, isUndefined, isUnit } from '../../utils/is.js';\nimport typedFunction from 'typed-function';\nimport { digits } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { isMap } from '../../utils/map.js'; // returns a new instance of typed-function\n\nvar _createTyped2 = function _createTyped() {\n  // initially, return the original instance of typed-function\n  // consecutively, return a new instance from typed.create.\n  _createTyped2 = typedFunction.create;\n  return typedFunction;\n};\n\nvar dependencies = ['?BigNumber', '?Complex', '?DenseMatrix', '?Fraction'];\n/**\n * Factory function for creating a new typed instance\n * @param {Object} dependencies   Object with data types like Complex and BigNumber\n * @returns {Function}\n */\n\nexport var createTyped = /* #__PURE__ */factory('typed', dependencies, function createTyped(_ref) {\n  var {\n    BigNumber,\n    Complex,\n    DenseMatrix,\n    Fraction\n  } = _ref;\n\n  // TODO: typed-function must be able to silently ignore signatures with unknown data types\n  // get a new instance of typed-function\n  var typed = _createTyped2(); // define all types. The order of the types determines in which order function\n  // arguments are type-checked (so for performance it's important to put the\n  // most used types first).\n\n\n  typed.clear();\n  typed.addTypes([{\n    name: 'number',\n    test: isNumber\n  }, {\n    name: 'Complex',\n    test: isComplex\n  }, {\n    name: 'BigNumber',\n    test: isBigNumber\n  }, {\n    name: 'Fraction',\n    test: isFraction\n  }, {\n    name: 'Unit',\n    test: isUnit\n  }, // The following type matches a valid variable name, i.e., an alphanumeric\n  // string starting with an alphabetic character. It is used (at least)\n  // in the definition of the derivative() function, as the argument telling\n  // what to differentiate over must (currently) be a variable.\n  {\n    name: 'identifier',\n    test: s => isString && /^(?:[A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u0870-\\u0887\\u0889-\\u088E\\u08A0-\\u08C9\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u1711\\u171F-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4C\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7CA\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7D9\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDD70-\\uDD7A\\uDD7C-\\uDD8A\\uDD8C-\\uDD92\\uDD94\\uDD95\\uDD97-\\uDDA1\\uDDA3-\\uDDB1\\uDDB3-\\uDDB9\\uDDBB\\uDDBC\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67\\uDF80-\\uDF85\\uDF87-\\uDFB0\\uDFB2-\\uDFBA]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD23\\uDE80-\\uDEA9\\uDEB0\\uDEB1\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45\\uDF70-\\uDF81\\uDFB0-\\uDFC4\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC71\\uDC72\\uDC75\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD44\\uDD47\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC5F-\\uDC61\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDEB8\\uDF00-\\uDF1A\\uDF40-\\uDF46]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCDF\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD2F\\uDD3F\\uDD41\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEB0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDEE0-\\uDEF2\\uDFB0]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC80-\\uDD43]|\\uD80B[\\uDF90-\\uDFF0]|[\\uD80C\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE70-\\uDEBE\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDD00-\\uDD08]|\\uD82B[\\uDFF0-\\uDFF3\\uDFF5-\\uDFFB\\uDFFD\\uDFFE]|\\uD82C[\\uDC00-\\uDD22\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD837[\\uDF00-\\uDF1E]|\\uD838[\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD4E\\uDE90-\\uDEAD\\uDEC0-\\uDEEB]|\\uD839[\\uDFE0-\\uDFE6\\uDFE8-\\uDFEB\\uDFED\\uDFEE\\uDFF0-\\uDFFE]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43\\uDD4B]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDEDF\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF38\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A])(?:[0-9A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u0870-\\u0887\\u0889-\\u088E\\u08A0-\\u08C9\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u1711\\u171F-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4C\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7CA\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7D9\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDD70-\\uDD7A\\uDD7C-\\uDD8A\\uDD8C-\\uDD92\\uDD94\\uDD95\\uDD97-\\uDDA1\\uDDA3-\\uDDB1\\uDDB3-\\uDDB9\\uDDBB\\uDDBC\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67\\uDF80-\\uDF85\\uDF87-\\uDFB0\\uDFB2-\\uDFBA]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD23\\uDE80-\\uDEA9\\uDEB0\\uDEB1\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45\\uDF70-\\uDF81\\uDFB0-\\uDFC4\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC71\\uDC72\\uDC75\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD44\\uDD47\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC5F-\\uDC61\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDEB8\\uDF00-\\uDF1A\\uDF40-\\uDF46]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCDF\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD2F\\uDD3F\\uDD41\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEB0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDEE0-\\uDEF2\\uDFB0]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC80-\\uDD43]|\\uD80B[\\uDF90-\\uDFF0]|[\\uD80C\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE70-\\uDEBE\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDD00-\\uDD08]|\\uD82B[\\uDFF0-\\uDFF3\\uDFF5-\\uDFFB\\uDFFD\\uDFFE]|\\uD82C[\\uDC00-\\uDD22\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD837[\\uDF00-\\uDF1E]|\\uD838[\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD4E\\uDE90-\\uDEAD\\uDEC0-\\uDEEB]|\\uD839[\\uDFE0-\\uDFE6\\uDFE8-\\uDFEB\\uDFED\\uDFEE\\uDFF0-\\uDFFE]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43\\uDD4B]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDEDF\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF38\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A])*$/.test(s)\n  }, {\n    name: 'string',\n    test: isString\n  }, {\n    name: 'Chain',\n    test: isChain\n  }, {\n    name: 'Array',\n    test: isArray\n  }, {\n    name: 'Matrix',\n    test: isMatrix\n  }, {\n    name: 'DenseMatrix',\n    test: isDenseMatrix\n  }, {\n    name: 'SparseMatrix',\n    test: isSparseMatrix\n  }, {\n    name: 'Range',\n    test: isRange\n  }, {\n    name: 'Index',\n    test: isIndex\n  }, {\n    name: 'boolean',\n    test: isBoolean\n  }, {\n    name: 'ResultSet',\n    test: isResultSet\n  }, {\n    name: 'Help',\n    test: isHelp\n  }, {\n    name: 'function',\n    test: isFunction\n  }, {\n    name: 'Date',\n    test: isDate\n  }, {\n    name: 'RegExp',\n    test: isRegExp\n  }, {\n    name: 'null',\n    test: isNull\n  }, {\n    name: 'undefined',\n    test: isUndefined\n  }, {\n    name: 'AccessorNode',\n    test: isAccessorNode\n  }, {\n    name: 'ArrayNode',\n    test: isArrayNode\n  }, {\n    name: 'AssignmentNode',\n    test: isAssignmentNode\n  }, {\n    name: 'BlockNode',\n    test: isBlockNode\n  }, {\n    name: 'ConditionalNode',\n    test: isConditionalNode\n  }, {\n    name: 'ConstantNode',\n    test: isConstantNode\n  }, {\n    name: 'FunctionNode',\n    test: isFunctionNode\n  }, {\n    name: 'FunctionAssignmentNode',\n    test: isFunctionAssignmentNode\n  }, {\n    name: 'IndexNode',\n    test: isIndexNode\n  }, {\n    name: 'Node',\n    test: isNode\n  }, {\n    name: 'ObjectNode',\n    test: isObjectNode\n  }, {\n    name: 'OperatorNode',\n    test: isOperatorNode\n  }, {\n    name: 'ParenthesisNode',\n    test: isParenthesisNode\n  }, {\n    name: 'RangeNode',\n    test: isRangeNode\n  }, {\n    name: 'SymbolNode',\n    test: isSymbolNode\n  }, {\n    name: 'Map',\n    test: isMap\n  }, {\n    name: 'Object',\n    test: isObject\n  } // order 'Object' last, it matches on other classes too\n  ]);\n  typed.addConversions([{\n    from: 'number',\n    to: 'BigNumber',\n    convert: function convert(x) {\n      if (!BigNumber) {\n        throwNoBignumber(x);\n      } // note: conversion from number to BigNumber can fail if x has >15 digits\n\n\n      if (digits(x) > 15) {\n        throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' + '(value: ' + x + '). ' + 'Use function bignumber(x) to convert to BigNumber.');\n      }\n\n      return new BigNumber(x);\n    }\n  }, {\n    from: 'number',\n    to: 'Complex',\n    convert: function convert(x) {\n      if (!Complex) {\n        throwNoComplex(x);\n      }\n\n      return new Complex(x, 0);\n    }\n  }, {\n    from: 'BigNumber',\n    to: 'Complex',\n    convert: function convert(x) {\n      if (!Complex) {\n        throwNoComplex(x);\n      }\n\n      return new Complex(x.toNumber(), 0);\n    }\n  }, {\n    from: 'Fraction',\n    to: 'BigNumber',\n    convert: function convert(x) {\n      throw new TypeError('Cannot implicitly convert a Fraction to BigNumber or vice versa. ' + 'Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.');\n    }\n  }, {\n    from: 'Fraction',\n    to: 'Complex',\n    convert: function convert(x) {\n      if (!Complex) {\n        throwNoComplex(x);\n      }\n\n      return new Complex(x.valueOf(), 0);\n    }\n  }, {\n    from: 'number',\n    to: 'Fraction',\n    convert: function convert(x) {\n      if (!Fraction) {\n        throwNoFraction(x);\n      }\n\n      var f = new Fraction(x);\n\n      if (f.valueOf() !== x) {\n        throw new TypeError('Cannot implicitly convert a number to a Fraction when there will be a loss of precision ' + '(value: ' + x + '). ' + 'Use function fraction(x) to convert to Fraction.');\n      }\n\n      return f;\n    }\n  }, {\n    // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`\n    //  from: 'Fraction',\n    //  to: 'number',\n    //  convert: function (x) {\n    //    return x.valueOf()\n    //  }\n    // }, {\n    from: 'string',\n    to: 'number',\n    convert: function convert(x) {\n      var n = Number(x);\n\n      if (isNaN(n)) {\n        throw new Error('Cannot convert \"' + x + '\" to a number');\n      }\n\n      return n;\n    }\n  }, {\n    from: 'string',\n    to: 'BigNumber',\n    convert: function convert(x) {\n      if (!BigNumber) {\n        throwNoBignumber(x);\n      }\n\n      try {\n        return new BigNumber(x);\n      } catch (err) {\n        throw new Error('Cannot convert \"' + x + '\" to BigNumber');\n      }\n    }\n  }, {\n    from: 'string',\n    to: 'Fraction',\n    convert: function convert(x) {\n      if (!Fraction) {\n        throwNoFraction(x);\n      }\n\n      try {\n        return new Fraction(x);\n      } catch (err) {\n        throw new Error('Cannot convert \"' + x + '\" to Fraction');\n      }\n    }\n  }, {\n    from: 'string',\n    to: 'Complex',\n    convert: function convert(x) {\n      if (!Complex) {\n        throwNoComplex(x);\n      }\n\n      try {\n        return new Complex(x);\n      } catch (err) {\n        throw new Error('Cannot convert \"' + x + '\" to Complex');\n      }\n    }\n  }, {\n    from: 'boolean',\n    to: 'number',\n    convert: function convert(x) {\n      return +x;\n    }\n  }, {\n    from: 'boolean',\n    to: 'BigNumber',\n    convert: function convert(x) {\n      if (!BigNumber) {\n        throwNoBignumber(x);\n      }\n\n      return new BigNumber(+x);\n    }\n  }, {\n    from: 'boolean',\n    to: 'Fraction',\n    convert: function convert(x) {\n      if (!Fraction) {\n        throwNoFraction(x);\n      }\n\n      return new Fraction(+x);\n    }\n  }, {\n    from: 'boolean',\n    to: 'string',\n    convert: function convert(x) {\n      return String(x);\n    }\n  }, {\n    from: 'Array',\n    to: 'Matrix',\n    convert: function convert(array) {\n      if (!DenseMatrix) {\n        throwNoMatrix();\n      }\n\n      return new DenseMatrix(array);\n    }\n  }, {\n    from: 'Matrix',\n    to: 'Array',\n    convert: function convert(matrix) {\n      return matrix.valueOf();\n    }\n  }]); // Provide a suggestion on how to call a function elementwise\n  // This was added primarily as guidance for the v10 -> v11 transition,\n  // and could potentially be removed in the future if it no longer seems\n  // to be helpful.\n\n  typed.onMismatch = (name, args, signatures) => {\n    var usualError = typed.createError(name, args, signatures);\n\n    if (['wrongType', 'mismatch'].includes(usualError.data.category) && args.length === 1 && isCollection(args[0]) && // check if the function can be unary:\n    signatures.some(sig => !sig.params.includes(','))) {\n      var err = new TypeError(\"Function '\".concat(name, \"' doesn't apply to matrices. To call it \") + \"elementwise on a matrix 'M', try 'map(M, \".concat(name, \")'.\"));\n      err.data = usualError.data;\n      throw err;\n    }\n\n    throw usualError;\n  }; // Provide a suggestion on how to call a function elementwise\n  // This was added primarily as guidance for the v10 -> v11 transition,\n  // and could potentially be removed in the future if it no longer seems\n  // to be helpful.\n\n\n  typed.onMismatch = (name, args, signatures) => {\n    var usualError = typed.createError(name, args, signatures);\n\n    if (['wrongType', 'mismatch'].includes(usualError.data.category) && args.length === 1 && isCollection(args[0]) && // check if the function can be unary:\n    signatures.some(sig => !sig.params.includes(','))) {\n      var err = new TypeError(\"Function '\".concat(name, \"' doesn't apply to matrices. To call it \") + \"elementwise on a matrix 'M', try 'map(M, \".concat(name, \")'.\"));\n      err.data = usualError.data;\n      throw err;\n    }\n\n    throw usualError;\n  };\n\n  return typed;\n});\n\nfunction throwNoBignumber(x) {\n  throw new Error(\"Cannot convert value \".concat(x, \" into a BigNumber: no class 'BigNumber' provided\"));\n}\n\nfunction throwNoComplex(x) {\n  throw new Error(\"Cannot convert value \".concat(x, \" into a Complex number: no class 'Complex' provided\"));\n}\n\nfunction throwNoMatrix() {\n  throw new Error('Cannot convert array into a Matrix: no class \\'DenseMatrix\\' provided');\n}\n\nfunction throwNoFraction(x) {\n  throw new Error(\"Cannot convert value \".concat(x, \" into a Fraction, no class 'Fraction' provided.\"));\n}","import { factory } from '../../utils/factory.js';\nvar name = 'ResultSet';\nvar dependencies = [];\nexport var createResultSet = /* #__PURE__ */factory(name, dependencies, () => {\n  /**\n   * A ResultSet contains a list or results\n   * @class ResultSet\n   * @param {Array} entries\n   * @constructor ResultSet\n   */\n  function ResultSet(entries) {\n    if (!(this instanceof ResultSet)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.entries = entries || [];\n  }\n  /**\n   * Attach type information\n   */\n\n\n  ResultSet.prototype.type = 'ResultSet';\n  ResultSet.prototype.isResultSet = true;\n  /**\n   * Returns the array with results hold by this ResultSet\n   * @memberof ResultSet\n   * @returns {Array} entries\n   */\n\n  ResultSet.prototype.valueOf = function () {\n    return this.entries;\n  };\n  /**\n   * Returns the stringified results of the ResultSet\n   * @memberof ResultSet\n   * @returns {string} string\n   */\n\n\n  ResultSet.prototype.toString = function () {\n    return '[' + this.entries.join(', ') + ']';\n  };\n  /**\n   * Get a JSON representation of the ResultSet\n   * @memberof ResultSet\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"ResultSet\", \"entries\": [...]}`\n   */\n\n\n  ResultSet.prototype.toJSON = function () {\n    return {\n      mathjs: 'ResultSet',\n      entries: this.entries\n    };\n  };\n  /**\n   * Instantiate a ResultSet from a JSON object\n   * @memberof ResultSet\n   * @param {Object} json  A JSON object structured as:\n   *                       `{\"mathjs\": \"ResultSet\", \"entries\": [...]}`\n   * @return {ResultSet}\n   */\n\n\n  ResultSet.fromJSON = function (json) {\n    return new ResultSet(json.entries);\n  };\n\n  return ResultSet;\n}, {\n  isClass: true\n});",";(function (globalScope) {\r\n  'use strict';\r\n\r\n\r\n  /*!\r\n   *  decimal.js v10.4.0\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js\r\n   *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Licence\r\n   */\r\n\r\n\r\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n    // The maximum exponent magnitude.\r\n    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\n  var EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n    // The limit on the value of `precision`, and on the value of the first argument to\r\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n    MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n    // Base conversion alphabet.\r\n    NUMERALS = '0123456789abcdef',\r\n\r\n    // The natural logarithm of 10 (1025 digits).\r\n    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n    // Pi (1025 digits).\r\n    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n    // The initial configuration properties of the Decimal constructor.\r\n    DEFAULTS = {\r\n\r\n      // These values must be integers within the stated ranges (inclusive).\r\n      // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n      // The maximum number of significant digits of the result of a calculation or base conversion.\r\n      // E.g. `Decimal.config({ precision: 20 });`\r\n      precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n      // The rounding mode used when rounding to `precision`.\r\n      //\r\n      // ROUND_UP         0 Away from zero.\r\n      // ROUND_DOWN       1 Towards zero.\r\n      // ROUND_CEIL       2 Towards +Infinity.\r\n      // ROUND_FLOOR      3 Towards -Infinity.\r\n      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      //\r\n      // E.g.\r\n      // `Decimal.rounding = 4;`\r\n      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n      rounding: 4,                           // 0 to 8\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n      // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN  6 The IEEE 754 remainder function.\r\n      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n      //\r\n      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n      // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n      // be used, but they may not give useful results.\r\n      modulo: 1,                             // 0 to 9\r\n\r\n      // The exponent value at and beneath which `toString` returns exponential notation.\r\n      // JavaScript numbers: -7\r\n      toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n      // The exponent value at and above which `toString` returns exponential notation.\r\n      // JavaScript numbers: 21\r\n      toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // JavaScript numbers: -324  (5e-324)\r\n      minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n      maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      crypto: false                          // true/false\r\n    },\r\n\r\n\r\n  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n    Decimal, inexact, noConflict, quadrant,\r\n    external = true,\r\n\r\n    decimalError = '[DecimalError] ',\r\n    invalidArgument = decimalError + 'Invalid argument: ',\r\n    precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n    cryptoUnavailable = decimalError + 'crypto unavailable',\r\n    tag = '[object Decimal]',\r\n\r\n    mathfloor = Math.floor,\r\n    mathpow = Math.pow,\r\n\r\n    isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n    isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n    isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n    BASE = 1e7,\r\n    LOG_BASE = 7,\r\n    MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n    LN10_PRECISION = LN10.length - 1,\r\n    PI_PRECISION = PI.length - 1,\r\n\r\n    // Decimal.prototype object\r\n    P = { toStringTag: tag };\r\n\r\n\r\n  // Decimal prototype methods\r\n\r\n\r\n  /*\r\n   *  absoluteValue             abs\r\n   *  ceil\r\n   *  clampedTo                 clamp\r\n   *  comparedTo                cmp\r\n   *  cosine                    cos\r\n   *  cubeRoot                  cbrt\r\n   *  decimalPlaces             dp\r\n   *  dividedBy                 div\r\n   *  dividedToIntegerBy        divToInt\r\n   *  equals                    eq\r\n   *  floor\r\n   *  greaterThan               gt\r\n   *  greaterThanOrEqualTo      gte\r\n   *  hyperbolicCosine          cosh\r\n   *  hyperbolicSine            sinh\r\n   *  hyperbolicTangent         tanh\r\n   *  inverseCosine             acos\r\n   *  inverseHyperbolicCosine   acosh\r\n   *  inverseHyperbolicSine     asinh\r\n   *  inverseHyperbolicTangent  atanh\r\n   *  inverseSine               asin\r\n   *  inverseTangent            atan\r\n   *  isFinite\r\n   *  isInteger                 isInt\r\n   *  isNaN\r\n   *  isNegative                isNeg\r\n   *  isPositive                isPos\r\n   *  isZero\r\n   *  lessThan                  lt\r\n   *  lessThanOrEqualTo         lte\r\n   *  logarithm                 log\r\n   *  [maximum]                 [max]\r\n   *  [minimum]                 [min]\r\n   *  minus                     sub\r\n   *  modulo                    mod\r\n   *  naturalExponential        exp\r\n   *  naturalLogarithm          ln\r\n   *  negated                   neg\r\n   *  plus                      add\r\n   *  precision                 sd\r\n   *  round\r\n   *  sine                      sin\r\n   *  squareRoot                sqrt\r\n   *  tangent                   tan\r\n   *  times                     mul\r\n   *  toBinary\r\n   *  toDecimalPlaces           toDP\r\n   *  toExponential\r\n   *  toFixed\r\n   *  toFraction\r\n   *  toHexadecimal             toHex\r\n   *  toNearest\r\n   *  toNumber\r\n   *  toOctal\r\n   *  toPower                   pow\r\n   *  toPrecision\r\n   *  toSignificantDigits       toSD\r\n   *  toString\r\n   *  truncated                 trunc\r\n   *  valueOf                   toJSON\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n   *\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of positive Infinity.\r\n   *\r\n   */\r\n  P.ceil = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n   * delineated by `min` and `max`.\r\n   *\r\n   * min {number|string|Decimal}\r\n   * max {number|string|Decimal}\r\n   *\r\n   */\r\n  P.clampedTo = P.clamp = function (min, max) {\r\n    var k,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n    min = new Ctor(min);\r\n    max = new Ctor(max);\r\n    if (!min.s || !max.s) return new Ctor(NaN);\r\n    if (min.gt(max)) throw Error(invalidArgument + max);\r\n    k = x.cmp(min);\r\n    return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if the value of this Decimal is greater than the value of `y`,\r\n   *  -1    if the value of this Decimal is less than the value of `y`,\r\n   *   0    if they have the same value,\r\n   *   NaN  if the value of either Decimal is NaN.\r\n   *\r\n   */\r\n  P.comparedTo = P.cmp = function (y) {\r\n    var i, j, xdL, ydL,\r\n      x = this,\r\n      xd = x.d,\r\n      yd = (y = new x.constructor(y)).d,\r\n      xs = x.s,\r\n      ys = y.s;\r\n\r\n    // Either NaN or ±Infinity?\r\n    if (!xd || !yd) {\r\n      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Either zero?\r\n    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n    // Signs differ?\r\n    if (xs !== ys) return xs;\r\n\r\n    // Compare exponents.\r\n    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * cos(0)         = 1\r\n   * cos(-0)        = 1\r\n   * cos(Infinity)  = NaN\r\n   * cos(-Infinity) = NaN\r\n   * cos(NaN)       = NaN\r\n   *\r\n   */\r\n  P.cosine = P.cos = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.d) return new Ctor(NaN);\r\n\r\n    // cos(0) = cos(-0) = 1\r\n    if (!x.d[0]) return new Ctor(1);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *\r\n   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   *  cbrt(0)  =  0\r\n   *  cbrt(-0) = -0\r\n   *  cbrt(1)  =  1\r\n   *  cbrt(-1) = -1\r\n   *  cbrt(N)  =  N\r\n   *  cbrt(-I) = -I\r\n   *  cbrt(I)  =  I\r\n   *\r\n   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n   *\r\n   */\r\n  P.cubeRoot = P.cbrt = function () {\r\n    var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = x.s * mathpow(x.s * x, 1 / 3);\r\n\r\n     // Math.cbrt underflow/overflow?\r\n     // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n    if (!s || Math.abs(s) == 1 / 0) {\r\n      n = digitsToString(x.d);\r\n      e = x.e;\r\n\r\n      // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n      if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n      s = mathpow(n, 1 / 3);\r\n\r\n      // Rarely, e may be one less than the result exponent value.\r\n      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n      r.s = x.s;\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Halley's method.\r\n    // TODO? Compare Newton's method.\r\n    for (;;) {\r\n      t = r;\r\n      t3 = t.times(t).times(t);\r\n      t3plusx = t3.plus(x);\r\n      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n        // , i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of decimal places of the value of this Decimal.\r\n   *\r\n   */\r\n  P.decimalPlaces = P.dp = function () {\r\n    var w,\r\n      d = this.d,\r\n      n = NaN;\r\n\r\n    if (d) {\r\n      w = d.length - 1;\r\n      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      w = d[w];\r\n      if (w) for (; w % 10 == 0; w /= 10) n--;\r\n      if (n < 0) n = 0;\r\n    }\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedBy = P.div = function (y) {\r\n    return divide(this, new this.constructor(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedToIntegerBy = P.divToInt = function (y) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.equals = P.eq = function (y) {\r\n    return this.cmp(y) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of negative Infinity.\r\n   *\r\n   */\r\n  P.floor = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 3);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n   * false.\r\n   *\r\n   */\r\n  P.greaterThan = P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  P.greaterThanOrEqualTo = P.gte = function (y) {\r\n    var k = this.cmp(y);\r\n    return k == 1 || k === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [1, Infinity]\r\n   *\r\n   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n   *\r\n   * cosh(0)         = 1\r\n   * cosh(-0)        = 1\r\n   * cosh(Infinity)  = Infinity\r\n   * cosh(-Infinity) = Infinity\r\n   * cosh(NaN)       = NaN\r\n   *\r\n   *  x        time taken (ms)   result\r\n   * 1000      9                 9.8503555700852349694e+433\r\n   * 10000     25                4.4034091128314607936e+4342\r\n   * 100000    171               1.4033316802130615897e+43429\r\n   * 1000000   3817              1.5166076984010437725e+434294\r\n   * 10000000  abandoned after 2 minute wait\r\n   *\r\n   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicCosine = P.cosh = function () {\r\n    var k, n, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      one = new Ctor(1);\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n    if (x.isZero()) return one;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    // TODO? Estimation reused from cosine() and may not be optimal here.\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      n = (1 / tinyPow(4, k)).toString();\r\n    } else {\r\n      k = 16;\r\n      n = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n    // Reverse argument reduction\r\n    var cosh2_x,\r\n      i = k,\r\n      d8 = new Ctor(8);\r\n    for (; i--;) {\r\n      cosh2_x = x.times(x);\r\n      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n    }\r\n\r\n    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n   *\r\n   * sinh(0)         = 0\r\n   * sinh(-0)        = -0\r\n   * sinh(Infinity)  = Infinity\r\n   * sinh(-Infinity) = -Infinity\r\n   * sinh(NaN)       = NaN\r\n   *\r\n   * x        time taken (ms)\r\n   * 10       2 ms\r\n   * 100      5 ms\r\n   * 1000     14 ms\r\n   * 10000    82 ms\r\n   * 100000   886 ms            1.4033316802130615897e+43429\r\n   * 200000   2613 ms\r\n   * 300000   5407 ms\r\n   * 400000   8824 ms\r\n   * 500000   13026 ms          8.7080643612718084129e+217146\r\n   * 1000000  48543 ms\r\n   *\r\n   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicSine = P.sinh = function () {\r\n    var k, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    if (len < 3) {\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n    } else {\r\n\r\n      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n      // 3 multiplications and 1 addition\r\n\r\n      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n      // 4 multiplications and 2 additions\r\n\r\n      // Estimate the optimum number of times to use the argument reduction.\r\n      k = 1.4 * Math.sqrt(len);\r\n      k = k > 16 ? 16 : k | 0;\r\n\r\n      x = x.times(1 / tinyPow(5, k));\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n      // Reverse argument reduction\r\n      var sinh2_x,\r\n        d5 = new Ctor(5),\r\n        d16 = new Ctor(16),\r\n        d20 = new Ctor(20);\r\n      for (; k--;) {\r\n        sinh2_x = x.times(x);\r\n        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n      }\r\n    }\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * tanh(x) = sinh(x) / cosh(x)\r\n   *\r\n   * tanh(0)         = 0\r\n   * tanh(-0)        = -0\r\n   * tanh(Infinity)  = 1\r\n   * tanh(-Infinity) = -1\r\n   * tanh(NaN)       = NaN\r\n   *\r\n   */\r\n  P.hyperbolicTangent = P.tanh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 7;\r\n    Ctor.rounding = 1;\r\n\r\n    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n   * this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [0, pi]\r\n   *\r\n   * acos(x) = pi/2 - asin(x)\r\n   *\r\n   * acos(0)       = pi/2\r\n   * acos(-0)      = pi/2\r\n   * acos(1)       = 0\r\n   * acos(-1)      = pi\r\n   * acos(1/2)     = pi/3\r\n   * acos(-1/2)    = 2*pi/3\r\n   * acos(|x| > 1) = NaN\r\n   * acos(NaN)     = NaN\r\n   *\r\n   */\r\n  P.inverseCosine = P.acos = function () {\r\n    var halfPi,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      k = x.abs().cmp(1),\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n      return k === 0\r\n        // |x| is 1\r\n        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n        // |x| > 1 or x is NaN\r\n        : new Ctor(NaN);\r\n    }\r\n\r\n    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.asin();\r\n    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return halfPi.minus(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [1, Infinity]\r\n   * Range: [0, Infinity]\r\n   *\r\n   * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n   *\r\n   * acosh(x < 1)     = NaN\r\n   * acosh(NaN)       = NaN\r\n   * acosh(Infinity)  = Infinity\r\n   * acosh(-Infinity) = NaN\r\n   * acosh(0)         = NaN\r\n   * acosh(-0)        = NaN\r\n   * acosh(1)         = 0\r\n   * acosh(-1)        = NaN\r\n   *\r\n   */\r\n  P.inverseHyperbolicCosine = P.acosh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n    if (!x.isFinite()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n   *\r\n   * asinh(NaN)       = NaN\r\n   * asinh(Infinity)  = Infinity\r\n   * asinh(-Infinity) = -Infinity\r\n   * asinh(0)         = 0\r\n   * asinh(-0)        = -0\r\n   *\r\n   */\r\n  P.inverseHyperbolicSine = P.asinh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n   *\r\n   * atanh(|x| > 1)   = NaN\r\n   * atanh(NaN)       = NaN\r\n   * atanh(Infinity)  = NaN\r\n   * atanh(-Infinity) = NaN\r\n   * atanh(0)         = 0\r\n   * atanh(-0)        = -0\r\n   * atanh(1)         = Infinity\r\n   * atanh(-1)        = -Infinity\r\n   *\r\n   */\r\n  P.inverseHyperbolicTangent = P.atanh = function () {\r\n    var pr, rm, wpr, xsd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    xsd = x.sd();\r\n\r\n    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n    Ctor.precision = wpr = xsd - x.e;\r\n\r\n    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n    Ctor.precision = pr + 4;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.ln();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(0.5);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n   *\r\n   * asin(0)       = 0\r\n   * asin(-0)      = -0\r\n   * asin(1/2)     = pi/6\r\n   * asin(-1/2)    = -pi/6\r\n   * asin(1)       = pi/2\r\n   * asin(-1)      = -pi/2\r\n   * asin(|x| > 1) = NaN\r\n   * asin(NaN)     = NaN\r\n   *\r\n   * TODO? Compare performance of Taylor series.\r\n   *\r\n   */\r\n  P.inverseSine = P.asin = function () {\r\n    var halfPi, k,\r\n      pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    k = x.abs().cmp(1);\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n\r\n      // |x| is 1\r\n      if (k === 0) {\r\n        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        halfPi.s = x.s;\r\n        return halfPi;\r\n      }\r\n\r\n      // |x| > 1 or x is NaN\r\n      return new Ctor(NaN);\r\n    }\r\n\r\n    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n   *\r\n   * atan(0)         = 0\r\n   * atan(-0)        = -0\r\n   * atan(1)         = pi/4\r\n   * atan(-1)        = -pi/4\r\n   * atan(Infinity)  = pi/2\r\n   * atan(-Infinity) = -pi/2\r\n   * atan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.inverseTangent = P.atan = function () {\r\n    var i, j, k, n, px, t, r, wpr, x2,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (!x.isFinite()) {\r\n      if (!x.s) return new Ctor(NaN);\r\n      if (pr + 4 <= PI_PRECISION) {\r\n        r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        r.s = x.s;\r\n        return r;\r\n      }\r\n    } else if (x.isZero()) {\r\n      return new Ctor(x);\r\n    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n\r\n    Ctor.precision = wpr = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n    // Argument reduction\r\n    // Ensure |x| < 0.42\r\n    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n    k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n    external = false;\r\n\r\n    j = Math.ceil(wpr / LOG_BASE);\r\n    n = 1;\r\n    x2 = x.times(x);\r\n    r = new Ctor(x);\r\n    px = x;\r\n\r\n    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n    for (; i !== -1;) {\r\n      px = px.times(x2);\r\n      t = r.minus(px.div(n += 2));\r\n\r\n      px = px.times(x2);\r\n      r = t.plus(px.div(n += 2));\r\n\r\n      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n    }\r\n\r\n    if (k) r = r.times(2 << (k - 1));\r\n\r\n    external = true;\r\n\r\n    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n   *\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.d;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n   *\r\n   */\r\n  P.isInteger = P.isInt = function () {\r\n    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is NaN, otherwise return false.\r\n   *\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is negative, otherwise return false.\r\n   *\r\n   */\r\n  P.isNegative = P.isNeg = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is positive, otherwise return false.\r\n   *\r\n   */\r\n  P.isPositive = P.isPos = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n   *\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.d && this.d[0] === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThan = P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThanOrEqualTo = P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * If no base is specified, return log[10](arg).\r\n   *\r\n   * log[base](arg) = ln(arg) / ln(base)\r\n   *\r\n   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n   * otherwise:\r\n   *\r\n   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n   * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n   *\r\n   * log[-b](a)       = NaN\r\n   * log[0](a)        = NaN\r\n   * log[1](a)        = NaN\r\n   * log[NaN](a)      = NaN\r\n   * log[Infinity](a) = NaN\r\n   * log[b](0)        = -Infinity\r\n   * log[b](-0)       = -Infinity\r\n   * log[b](-a)       = NaN\r\n   * log[b](1)        = 0\r\n   * log[b](Infinity) = Infinity\r\n   * log[b](NaN)      = NaN\r\n   *\r\n   * [base] {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  P.logarithm = P.log = function (base) {\r\n    var isBase10, d, denominator, k, inf, num, sd, r,\r\n      arg = this,\r\n      Ctor = arg.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding,\r\n      guard = 5;\r\n\r\n    // Default base is 10.\r\n    if (base == null) {\r\n      base = new Ctor(10);\r\n      isBase10 = true;\r\n    } else {\r\n      base = new Ctor(base);\r\n      d = base.d;\r\n\r\n      // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n      isBase10 = base.eq(10);\r\n    }\r\n\r\n    d = arg.d;\r\n\r\n    // Is arg negative, non-finite, 0 or 1?\r\n    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n    }\r\n\r\n    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n    // integer power of 10.\r\n    if (isBase10) {\r\n      if (d.length > 1) {\r\n        inf = true;\r\n      } else {\r\n        for (k = d[0]; k % 10 === 0;) k /= 10;\r\n        inf = k !== 1;\r\n      }\r\n    }\r\n\r\n    external = false;\r\n    sd = pr + guard;\r\n    num = naturalLogarithm(arg, sd);\r\n    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n    // The result will have 5 rounding digits.\r\n    r = divide(num, denominator, sd, 1);\r\n\r\n    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n    // calculate 10 further digits.\r\n    //\r\n    // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n    // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n    // further digits, the last 14 are nines, round up and assume the result is exact.\r\n    // Also assume the result is exact if the last 14 are zero.\r\n    //\r\n    // Example of a result that will be incorrectly rounded:\r\n    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n    // place is still 2.6.\r\n    if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n      do {\r\n        sd += 10;\r\n        num = naturalLogarithm(arg, sd);\r\n        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n        r = divide(num, denominator, sd, 1);\r\n\r\n        if (!inf) {\r\n\r\n          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n            r = finalise(r, pr + 1, 0);\r\n          }\r\n\r\n          break;\r\n        }\r\n      } while (checkRoundingDigits(r.d, k += 10, rm));\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.max = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'lt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.min = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'gt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return y negated if x is finite and y is ±Infinity.\r\n      else if (x.d) y.s = -y.s;\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with different signs.\r\n      // Return NaN if both are ±Infinity with the same sign.\r\n      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n    // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.plus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return y negated if x is zero and y is non-zero.\r\n      if (yd[0]) y.s = -y.s;\r\n\r\n      // Return x if y is zero and x is non-zero.\r\n      else if (xd[0]) y = new Ctor(x);\r\n\r\n      // Return zero if both are zero.\r\n      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n      else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    e = mathfloor(y.e / LOG_BASE);\r\n    xe = mathfloor(x.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    k = xe - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (k) {\r\n      xLTy = k < 0;\r\n\r\n      if (xLTy) {\r\n        d = xd;\r\n        k = -k;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = xe;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Numbers with massively different exponents would result in a very high number of\r\n      // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n      if (k > i) {\r\n        k = i;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      d.reverse();\r\n      for (i = k; i--;) d.push(0);\r\n      d.reverse();\r\n\r\n    // Base 1e7 exponents equal.\r\n    } else {\r\n\r\n      // Check digits to determine which is the bigger number.\r\n\r\n      i = xd.length;\r\n      len = yd.length;\r\n      xLTy = i < len;\r\n      if (xLTy) len = i;\r\n\r\n      for (i = 0; i < len; i++) {\r\n        if (xd[i] != yd[i]) {\r\n          xLTy = xd[i] < yd[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      k = 0;\r\n    }\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      xd = yd;\r\n      yd = d;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    len = xd.length;\r\n\r\n    // Append zeros to `xd` if shorter.\r\n    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n    // Subtract yd from xd.\r\n    for (i = yd.length; i > k;) {\r\n\r\n      if (xd[--i] < yd[i]) {\r\n        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n        --xd[j];\r\n        xd[i] += BASE;\r\n      }\r\n\r\n      xd[i] -= yd[i];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] === 0;) xd.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n    // Zero?\r\n    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * The result depends on the modulo mode.\r\n   *\r\n   */\r\n  P.modulo = P.mod = function (y) {\r\n    var q,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n    // Return x if y is ±Infinity or x is ±0.\r\n    if (!y.d || x.d && !x.d[0]) {\r\n      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n    }\r\n\r\n    // Prevent rounding of intermediate calculations.\r\n    external = false;\r\n\r\n    if (Ctor.modulo == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // result = x - q * y    where  0 <= result < abs(y)\r\n      q = divide(x, y.abs(), 0, 3, 1);\r\n      q.s *= y.s;\r\n    } else {\r\n      q = divide(x, y, 0, Ctor.modulo, 1);\r\n    }\r\n\r\n    q = q.times(y);\r\n\r\n    external = true;\r\n\r\n    return x.minus(q);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalExponential = P.exp = function () {\r\n    return naturalExponential(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalLogarithm = P.ln = function () {\r\n    return naturalLogarithm(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n   * -1.\r\n   *\r\n   */\r\n  P.negated = P.neg = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = -x.s;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with the same sign.\r\n      // Return NaN if both are ±Infinity with different signs.\r\n      // Return y if x is finite and y is ±Infinity.\r\n      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n     // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.minus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return x if y is zero.\r\n      // Return y if y is non-zero.\r\n      if (!yd[0]) y = new Ctor(x);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    k = mathfloor(x.e / LOG_BASE);\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    i = k - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (i) {\r\n\r\n      if (i < 0) {\r\n        d = xd;\r\n        i = -i;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = k;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n      k = Math.ceil(pr / LOG_BASE);\r\n      len = k > len ? k + 1 : len + 1;\r\n\r\n      if (i > len) {\r\n        i = len;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n      d.reverse();\r\n      for (; i--;) d.push(0);\r\n      d.reverse();\r\n    }\r\n\r\n    len = xd.length;\r\n    i = yd.length;\r\n\r\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n    if (len - i < 0) {\r\n      i = len;\r\n      d = yd;\r\n      yd = xd;\r\n      xd = d;\r\n    }\r\n\r\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n    for (carry = 0; i;) {\r\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n      xd[i] %= BASE;\r\n    }\r\n\r\n    if (carry) {\r\n      xd.unshift(carry);\r\n      ++e;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of significant digits of the value of this Decimal.\r\n   *\r\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n   *\r\n   */\r\n  P.precision = P.sd = function (z) {\r\n    var k,\r\n      x = this;\r\n\r\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n    if (x.d) {\r\n      k = getPrecision(x.d);\r\n      if (z && x.e + 1 > k) k = x.e + 1;\r\n    } else {\r\n      k = NaN;\r\n    }\r\n\r\n    return k;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n   * rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.round = function () {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   *\r\n   * sin(0)         = 0\r\n   * sin(-0)        = -0\r\n   * sin(Infinity)  = NaN\r\n   * sin(-Infinity) = NaN\r\n   * sin(NaN)       = NaN\r\n   *\r\n   */\r\n  P.sine = P.sin = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N)  =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I)  =  I\r\n   *  sqrt(0)  =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, sd, r, rep, t,\r\n      x = this,\r\n      d = x.d,\r\n      e = x.e,\r\n      s = x.s,\r\n      Ctor = x.constructor;\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !d || !d[0]) {\r\n      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n    }\r\n\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+x);\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = digitsToString(d);\r\n\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(n);\r\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Newton-Raphson iteration.\r\n    for (;;) {\r\n      t = r;\r\n      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * tan(0)         = 0\r\n   * tan(-0)        = -0\r\n   * tan(Infinity)  = NaN\r\n   * tan(-Infinity) = NaN\r\n   * tan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.tangent = P.tan = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.sin();\r\n    x.s = 1;\r\n    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var carry, e, i, k, r, rL, t, xdL, ydL,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      xd = x.d,\r\n      yd = (y = new Ctor(y)).d;\r\n\r\n    y.s *= x.s;\r\n\r\n     // If either is NaN, ±Infinity or ±0...\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n        // Return NaN if either is NaN.\r\n        // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n        ? NaN\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        // Return ±0 if either is ±0.\r\n        : !xd || !yd ? y.s / 0 : y.s * 0);\r\n    }\r\n\r\n    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Ensure xd points to the longer array.\r\n    if (xdL < ydL) {\r\n      r = xd;\r\n      xd = yd;\r\n      yd = r;\r\n      rL = xdL;\r\n      xdL = ydL;\r\n      ydL = rL;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    r = [];\r\n    rL = xdL + ydL;\r\n    for (i = rL; i--;) r.push(0);\r\n\r\n    // Multiply!\r\n    for (i = ydL; --i >= 0;) {\r\n      carry = 0;\r\n      for (k = xdL + i; k > i;) {\r\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n        r[k--] = t % BASE | 0;\r\n        carry = t / BASE | 0;\r\n      }\r\n\r\n      r[k] = (r[k] + carry) % BASE | 0;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; !r[--rL];) r.pop();\r\n\r\n    if (carry) ++e;\r\n    else r.shift();\r\n\r\n    y.d = r;\r\n    y.e = getBase10Exponent(r, e);\r\n\r\n    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toBinary = function (sd, rm) {\r\n    return toStringBinary(this, 2, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n   *\r\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n    if (dp === void 0) return x;\r\n\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    return finalise(x, dp + x.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n   * `dp` fixed decimal places using rounding mode `rounding`.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x, true);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), dp + 1, rm);\r\n      str = finiteToString(x, true, dp + 1);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n   * omitted.\r\n   *\r\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   * (-0).toFixed(3) is '0.000'.\r\n   * (-0.5).toFixed(0) is '-0'.\r\n   *\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var str, y,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n      str = finiteToString(y, false, dp + y.e + 1);\r\n    }\r\n\r\n    // To determine whether to add the minus sign look at the value before it was rounded,\r\n    // i.e. look at `x` rather than `y`.\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n   * numerator and an integer denominator.\r\n   *\r\n   * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n   * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n   * value necessary to represent the number exactly.\r\n   *\r\n   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n   *\r\n   */\r\n  P.toFraction = function (maxD) {\r\n    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n      x = this,\r\n      xd = x.d,\r\n      Ctor = x.constructor;\r\n\r\n    if (!xd) return new Ctor(x);\r\n\r\n    n1 = d0 = new Ctor(1);\r\n    d1 = n0 = new Ctor(0);\r\n\r\n    d = new Ctor(d1);\r\n    e = d.e = getPrecision(xd) - x.e - 1;\r\n    k = e % LOG_BASE;\r\n    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n    if (maxD == null) {\r\n\r\n      // d is 10**e, the minimum max-denominator needed.\r\n      maxD = e > 0 ? d : n1;\r\n    } else {\r\n      n = new Ctor(maxD);\r\n      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n      maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n    }\r\n\r\n    external = false;\r\n    n = new Ctor(digitsToString(xd));\r\n    pr = Ctor.precision;\r\n    Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n    for (;;)  {\r\n      q = divide(n, d, 0, 1, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.cmp(maxD) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      d2 = n1;\r\n      n1 = n0.plus(q.times(d2));\r\n      n0 = d2;\r\n      d2 = d;\r\n      d = n.minus(q.times(d2));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n        ? [n1, d1] : [n0, d0];\r\n\r\n    Ctor.precision = pr;\r\n    external = true;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toHexadecimal = P.toHex = function (sd, rm) {\r\n    return toStringBinary(this, 16, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n   * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n   *\r\n   * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n   * or `y` is NaN, in which case the return value will be also be NaN.\r\n   *\r\n   * The return value is not affected by the value of `precision`.\r\n   *\r\n   * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toNearest() rounding mode not an integer: {rm}'\r\n   * 'toNearest() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toNearest = function (y, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (y == null) {\r\n\r\n      // If x is not finite, return x.\r\n      if (!x.d) return x;\r\n\r\n      y = new Ctor(1);\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      y = new Ctor(y);\r\n      if (rm === void 0) {\r\n        rm = Ctor.rounding;\r\n      } else {\r\n        checkInt32(rm, 0, 8);\r\n      }\r\n\r\n      // If x is not finite, return x if y is not NaN, else NaN.\r\n      if (!x.d) return y.s ? x : y;\r\n\r\n      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n      if (!y.d) {\r\n        if (y.s) y.s = x.s;\r\n        return y;\r\n      }\r\n    }\r\n\r\n    // If y is not zero, calculate the nearest multiple of y to x.\r\n    if (y.d[0]) {\r\n      external = false;\r\n      x = divide(x, y, 0, rm, 1).times(y);\r\n      external = true;\r\n      finalise(x);\r\n\r\n    // If y is zero, return zero with the sign of x.\r\n    } else {\r\n      y.s = x.s;\r\n      x = y;\r\n    }\r\n\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Decimal converted to a number primitive.\r\n   * Zero keeps its sign.\r\n   *\r\n   */\r\n  P.toNumber = function () {\r\n    return +this;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toOctal = function (sd, rm) {\r\n    return toStringBinary(this, 8, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n   * to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * ECMAScript compliant.\r\n   *\r\n   *   pow(x, NaN)                           = NaN\r\n   *   pow(x, ±0)                            = 1\r\n\r\n   *   pow(NaN, non-zero)                    = NaN\r\n   *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n   *   pow(abs(x) > 1, -Infinity)            = +0\r\n   *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n   *   pow(abs(x) < 1, +Infinity)            = +0\r\n   *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n   *   pow(+Infinity, y > 0)                 = +Infinity\r\n   *   pow(+Infinity, y < 0)                 = +0\r\n   *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n   *   pow(-Infinity, even integer > 0)      = +Infinity\r\n   *   pow(-Infinity, odd integer < 0)       = -0\r\n   *   pow(-Infinity, even integer < 0)      = +0\r\n   *   pow(+0, y > 0)                        = +0\r\n   *   pow(+0, y < 0)                        = +Infinity\r\n   *   pow(-0, odd integer > 0)              = -0\r\n   *   pow(-0, even integer > 0)             = +0\r\n   *   pow(-0, odd integer < 0)              = -Infinity\r\n   *   pow(-0, even integer < 0)             = +Infinity\r\n   *   pow(finite x < 0, finite non-integer) = NaN\r\n   *\r\n   * For non-integer or very large exponents pow(x, y) is calculated using\r\n   *\r\n   *   x^y = exp(y*ln(x))\r\n   *\r\n   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n   * probability of an incorrectly rounded result\r\n   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n   * i.e. 1 in 250,000,000,000,000\r\n   *\r\n   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n   *\r\n   * y {number|string|Decimal} The power to which to raise this Decimal.\r\n   *\r\n   */\r\n  P.toPower = P.pow = function (y) {\r\n    var e, k, pr, r, rm, s,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      yn = +(y = new Ctor(y));\r\n\r\n    // Either ±Infinity, NaN or ±0?\r\n    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (x.eq(1)) return x;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n    // y exponent\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n      r = intPow(Ctor, x, k, pr);\r\n      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n    }\r\n\r\n    s = x.s;\r\n\r\n    // if x is negative\r\n    if (s < 0) {\r\n\r\n      // if y is not an integer\r\n      if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n      // Result is positive if x is negative and the last digit of integer y is even.\r\n      if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n      // if x.eq(-1)\r\n      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n        x.s = s;\r\n        return x;\r\n      }\r\n    }\r\n\r\n    // Estimate result exponent.\r\n    // x^y = 10^e,  where e = y * log10(x)\r\n    // log10(x) = log10(x_significand) + x_exponent\r\n    // log10(x_significand) = ln(x_significand) / ln(10)\r\n    k = mathpow(+x, yn);\r\n    e = k == 0 || !isFinite(k)\r\n      ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n      : new Ctor(k + '').e;\r\n\r\n    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n    // Overflow/underflow?\r\n    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n    external = false;\r\n    Ctor.rounding = x.s = 1;\r\n\r\n    // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n    // new Decimal(2.32456).pow('2087987436534566.46411')\r\n    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n    k = Math.min(12, (e + '').length);\r\n\r\n    // r = x^y = exp(y*ln(x))\r\n    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n    if (r.d) {\r\n\r\n      // Truncate to the required precision plus five rounding digits.\r\n      r = finalise(r, pr + 5, 1);\r\n\r\n      // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n      // the result.\r\n      if (checkRoundingDigits(r.d, pr, rm)) {\r\n        e = pr + 10;\r\n\r\n        // Truncate to the increased precision plus five rounding digits.\r\n        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n        // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n      }\r\n    }\r\n\r\n    r.s = s;\r\n    external = true;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), sd, rm);\r\n      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n   * omitted.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toSD() digits out of range: {sd}'\r\n   * 'toSD() digits not an integer: {sd}'\r\n   * 'toSD() rounding mode not an integer: {rm}'\r\n   * 'toSD() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toSignificantDigits = P.toSD = function (sd, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    return finalise(new Ctor(x), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   *\r\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n   *\r\n   */\r\n  P.toString = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n   *\r\n   */\r\n  P.truncated = P.trunc = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   * Unlike `toString`, negative zero will include the minus sign.\r\n   *\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n  /*\r\n   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n   *                           finiteToString, naturalExponential, naturalLogarithm\r\n   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n   *  convertBase              toStringBinary, parseOther\r\n   *  cos                      P.cos\r\n   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n   *                           taylorSeries, atan2, parseOther\r\n   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n   *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n   *                           naturalLogarithm, ceil, floor, round, trunc\r\n   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n   *                           toStringBinary\r\n   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n   *  getLn10                  P.logarithm, naturalLogarithm\r\n   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n   *  getPrecision             P.precision, P.toFraction\r\n   *  getZeroString            digitsToString, finiteToString\r\n   *  intPow                   P.toPower, parseOther\r\n   *  isOdd                    toLessThanHalfPi\r\n   *  maxOrMin                 max, min\r\n   *  naturalExponential       P.naturalExponential, P.toPower\r\n   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n   *                           P.toPower, naturalExponential\r\n   *  nonFiniteToString        finiteToString, toStringBinary\r\n   *  parseDecimal             Decimal\r\n   *  parseOther               Decimal\r\n   *  sin                      P.sin\r\n   *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n   *  toLessThanHalfPi         P.cos, P.sin\r\n   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n   *  truncate                 intPow\r\n   *\r\n   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n   *                           naturalLogarithm, config, parseOther, random, Decimal\r\n   */\r\n\r\n\r\n  function digitsToString(d) {\r\n    var i, k, ws,\r\n      indexOfLastWord = d.length - 1,\r\n      str = '',\r\n      w = d[0];\r\n\r\n    if (indexOfLastWord > 0) {\r\n      str += w;\r\n      for (i = 1; i < indexOfLastWord; i++) {\r\n        ws = d[i] + '';\r\n        k = LOG_BASE - ws.length;\r\n        if (k) str += getZeroString(k);\r\n        str += ws;\r\n      }\r\n\r\n      w = d[i];\r\n      ws = w + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n    } else if (w === 0) {\r\n      return '0';\r\n    }\r\n\r\n    // Remove trailing zeros of last w.\r\n    for (; w % 10 === 0;) w /= 10;\r\n\r\n    return str + w;\r\n  }\r\n\r\n\r\n  function checkInt32(i, min, max) {\r\n    if (i !== ~~i || i < min || i > max) {\r\n      throw Error(invalidArgument + i);\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n   * `repeating == null` if caller is `log` or `pow`,\r\n   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n   */\r\n  function checkRoundingDigits(d, i, rm, repeating) {\r\n    var di, k, r, rd;\r\n\r\n    // Get the length of the first word of the array d.\r\n    for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n    // Is the rounding digit in the first word of d?\r\n    if (--i < 0) {\r\n      i += LOG_BASE;\r\n      di = 0;\r\n    } else {\r\n      di = Math.ceil((i + 1) / LOG_BASE);\r\n      i %= LOG_BASE;\r\n    }\r\n\r\n    // i is the index (0 - 6) of the rounding digit.\r\n    // E.g. if within the word 3487563 the first rounding digit is 5,\r\n    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n    k = mathpow(10, LOG_BASE - i);\r\n    rd = d[di] % k | 0;\r\n\r\n    if (repeating == null) {\r\n      if (i < 3) {\r\n        if (i == 0) rd = rd / 100 | 0;\r\n        else if (i == 1) rd = rd / 10 | 0;\r\n        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n      } else {\r\n        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n      }\r\n    } else {\r\n      if (i < 4) {\r\n        if (i == 0) rd = rd / 1000 | 0;\r\n        else if (i == 1) rd = rd / 100 | 0;\r\n        else if (i == 2) rd = rd / 10 | 0;\r\n        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n      } else {\r\n        r = ((repeating || rm < 4) && rd + 1 == k ||\r\n        (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  // Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n  // Eg. convertBase('255', 10, 16) returns [15, 15].\r\n  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n  function convertBase(str, baseIn, baseOut) {\r\n    var j,\r\n      arr = [0],\r\n      arrL,\r\n      i = 0,\r\n      strL = str.length;\r\n\r\n    for (; i < strL;) {\r\n      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n      arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n      for (j = 0; j < arr.length; j++) {\r\n        if (arr[j] > baseOut - 1) {\r\n          if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n          arr[j + 1] += arr[j] / baseOut | 0;\r\n          arr[j] %= baseOut;\r\n        }\r\n      }\r\n    }\r\n\r\n    return arr.reverse();\r\n  }\r\n\r\n\r\n  /*\r\n   * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function cosine(Ctor, x) {\r\n    var k, len, y;\r\n\r\n    if (x.isZero()) return x;\r\n\r\n    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    len = x.d.length;\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      y = (1 / tinyPow(4, k)).toString();\r\n    } else {\r\n      k = 16;\r\n      y = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    Ctor.precision += k;\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n    // Reverse argument reduction\r\n    for (var i = k; i--;) {\r\n      var cos2x = x.times(x);\r\n      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n    }\r\n\r\n    Ctor.precision -= k;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Perform division in the specified base.\r\n   */\r\n  var divide = (function () {\r\n\r\n    // Assumes non-zero x and k, and hence non-zero result.\r\n    function multiplyInteger(x, k, base) {\r\n      var temp,\r\n        carry = 0,\r\n        i = x.length;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        temp = x[i] * k + carry;\r\n        x[i] = temp % base | 0;\r\n        carry = temp / base | 0;\r\n      }\r\n\r\n      if (carry) x.unshift(carry);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, r;\r\n\r\n      if (aL != bL) {\r\n        r = aL > bL ? 1 : -1;\r\n      } else {\r\n        for (i = r = 0; i < aL; i++) {\r\n          if (a[i] != b[i]) {\r\n            r = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return r;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1;) a.shift();\r\n    }\r\n\r\n    return function (x, y, pr, rm, dp, base) {\r\n      var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n        yL, yz,\r\n        Ctor = x.constructor,\r\n        sign = x.s == y.s ? 1 : -1,\r\n        xd = x.d,\r\n        yd = y.d;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n        return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n      }\r\n\r\n      if (base) {\r\n        logBase = 1;\r\n        e = x.e - y.e;\r\n      } else {\r\n        base = BASE;\r\n        logBase = LOG_BASE;\r\n        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n      }\r\n\r\n      yL = yd.length;\r\n      xL = xd.length;\r\n      q = new Ctor(sign);\r\n      qd = q.d = [];\r\n\r\n      // Result exponent may be one less than e.\r\n      // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n      for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n      if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n      if (pr == null) {\r\n        sd = pr = Ctor.precision;\r\n        rm = Ctor.rounding;\r\n      } else if (dp) {\r\n        sd = pr + (x.e - y.e) + 1;\r\n      } else {\r\n        sd = pr;\r\n      }\r\n\r\n      if (sd < 0) {\r\n        qd.push(1);\r\n        more = true;\r\n      } else {\r\n\r\n        // Convert precision in number of base 10 digits to base 1e7 digits.\r\n        sd = sd / logBase + 2 | 0;\r\n        i = 0;\r\n\r\n        // divisor < 1e7\r\n        if (yL == 1) {\r\n          k = 0;\r\n          yd = yd[0];\r\n          sd++;\r\n\r\n          // k is the carry.\r\n          for (; (i < xL || k) && sd--; i++) {\r\n            t = k * base + (xd[i] || 0);\r\n            qd[i] = t / yd | 0;\r\n            k = t % yd | 0;\r\n          }\r\n\r\n          more = k || i < xL;\r\n\r\n        // divisor >= 1e7\r\n        } else {\r\n\r\n          // Normalise xd and yd so highest order digit of yd is >= base/2\r\n          k = base / (yd[0] + 1) | 0;\r\n\r\n          if (k > 1) {\r\n            yd = multiplyInteger(yd, k, base);\r\n            xd = multiplyInteger(xd, k, base);\r\n            yL = yd.length;\r\n            xL = xd.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xd.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL;) rem[remL++] = 0;\r\n\r\n          yz = yd.slice();\r\n          yz.unshift(0);\r\n          yd0 = yd[0];\r\n\r\n          if (yd[1] >= base / 2) ++yd0;\r\n\r\n          do {\r\n            k = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yd, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, k.\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // k will be how many times the divisor goes into the current remainder.\r\n              k = rem0 / yd0 | 0;\r\n\r\n              //  Algorithm:\r\n              //  1. product = divisor * trial digit (k)\r\n              //  2. if product > remainder: product -= divisor, k--\r\n              //  3. remainder -= product\r\n              //  4. if product was < remainder at 2:\r\n              //    5. compare new remainder and divisor\r\n              //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n              if (k > 1) {\r\n                if (k >= base) k = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiplyInteger(yd, k, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                cmp = compare(prod, rem, prodL, remL);\r\n\r\n                // product > remainder.\r\n                if (cmp == 1) {\r\n                  k--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n                }\r\n              } else {\r\n\r\n                // cmp is -1.\r\n                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n                // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n                if (k == 0) cmp = k = 1;\r\n                prod = yd.slice();\r\n              }\r\n\r\n              prodL = prod.length;\r\n              if (prodL < remL) prod.unshift(0);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n\r\n              // If product was < previous remainder.\r\n              if (cmp == -1) {\r\n                remL = rem.length;\r\n\r\n                // Compare divisor and new remainder.\r\n                cmp = compare(yd, rem, yL, remL);\r\n\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                if (cmp < 1) {\r\n                  k++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yd, remL, base);\r\n                }\r\n              }\r\n\r\n              remL = rem.length;\r\n            } else if (cmp === 0) {\r\n              k++;\r\n              rem = [0];\r\n            }    // if cmp === 1, k will be 0\r\n\r\n            // Add the next digit, k, to the result array.\r\n            qd[i++] = k;\r\n\r\n            // Update the remainder.\r\n            if (cmp && rem[0]) {\r\n              rem[remL++] = xd[xi] || 0;\r\n            } else {\r\n              rem = [xd[xi]];\r\n              remL = 1;\r\n            }\r\n\r\n          } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n          more = rem[0] !== void 0;\r\n        }\r\n\r\n        // Leading zero?\r\n        if (!qd[0]) qd.shift();\r\n      }\r\n\r\n      // logBase is 1 when divide is being used for base conversion.\r\n      if (logBase == 1) {\r\n        q.e = e;\r\n        inexact = more;\r\n      } else {\r\n\r\n        // To calculate q.e, first get the number of digits of qd[0].\r\n        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n        q.e = i + e * logBase - 1;\r\n\r\n        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n   * Check for over/under-flow.\r\n   */\r\n   function finalise(x, sd, rm, isTruncated) {\r\n    var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n      Ctor = x.constructor;\r\n\r\n    // Don't round if sd is null or undefined.\r\n    out: if (sd != null) {\r\n      xd = x.d;\r\n\r\n      // Infinity/NaN.\r\n      if (!xd) return x;\r\n\r\n      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // w: the word of xd containing rd, a base 1e7 number.\r\n      // xdi: the index of w within xd.\r\n      // digits: the number of digits of w.\r\n      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n      // they had leading zeros)\r\n      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n      // Get the length of the first word of the digits array xd.\r\n      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n      i = sd - digits;\r\n\r\n      // Is the rounding digit in the first word of xd?\r\n      if (i < 0) {\r\n        i += LOG_BASE;\r\n        j = sd;\r\n        w = xd[xdi = 0];\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      } else {\r\n        xdi = Math.ceil((i + 1) / LOG_BASE);\r\n        k = xd.length;\r\n        if (xdi >= k) {\r\n          if (isTruncated) {\r\n\r\n            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n            for (; k++ <= xdi;) xd.push(0);\r\n            w = rd = 0;\r\n            digits = 1;\r\n            i %= LOG_BASE;\r\n            j = i - LOG_BASE + 1;\r\n          } else {\r\n            break out;\r\n          }\r\n        } else {\r\n          w = k = xd[xdi];\r\n\r\n          // Get the number of digits of w.\r\n          for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n          // Get the index of rd within w.\r\n          i %= LOG_BASE;\r\n\r\n          // Get the index of rd within w, adjusted for leading zeros.\r\n          // The number of leading zeros of w is given by LOG_BASE - digits.\r\n          j = i - LOG_BASE + digits;\r\n\r\n          // Get the rounding digit at index j of w.\r\n          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n        }\r\n      }\r\n\r\n      // Are there any non-zero digits after the rounding digit?\r\n      isTruncated = isTruncated || sd < 0 ||\r\n        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n      // will give 714.\r\n\r\n      roundUp = rm < 4\r\n        ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n        : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n            rm == (x.s < 0 ? 8 : 7));\r\n\r\n      if (sd < 1 || !xd[0]) {\r\n        xd.length = 0;\r\n        if (roundUp) {\r\n\r\n          // Convert sd to decimal places.\r\n          sd -= x.e + 1;\r\n\r\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n          x.e = -sd || 0;\r\n        } else {\r\n\r\n          // Zero.\r\n          xd[0] = x.e = 0;\r\n        }\r\n\r\n        return x;\r\n      }\r\n\r\n      // Remove excess digits.\r\n      if (i == 0) {\r\n        xd.length = xdi;\r\n        k = 1;\r\n        xdi--;\r\n      } else {\r\n        xd.length = xdi + 1;\r\n        k = mathpow(10, LOG_BASE - i);\r\n\r\n        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n        // j > 0 means i > number of leading zeros of w.\r\n        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n      }\r\n\r\n      if (roundUp) {\r\n        for (;;) {\r\n\r\n          // Is the digit to be rounded up in the first word of xd?\r\n          if (xdi == 0) {\r\n\r\n            // i will be the length of xd[0] before k is added.\r\n            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n            j = xd[0] += k;\r\n            for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n            // if i != k the length has increased.\r\n            if (i != k) {\r\n              x.e++;\r\n              if (xd[0] == BASE) xd[0] = 1;\r\n            }\r\n\r\n            break;\r\n          } else {\r\n            xd[xdi] += k;\r\n            if (xd[xdi] != BASE) break;\r\n            xd[xdi--] = 0;\r\n            k = 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove trailing zeros.\r\n      for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n    }\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > Ctor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < Ctor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // Ctor.underflow = true;\r\n      } // else Ctor.underflow = false;\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function finiteToString(x, isExp, sd) {\r\n    if (!x.isFinite()) return nonFiniteToString(x);\r\n    var k,\r\n      e = x.e,\r\n      str = digitsToString(x.d),\r\n      len = str.length;\r\n\r\n    if (isExp) {\r\n      if (sd && (k = sd - len) > 0) {\r\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n      } else if (len > 1) {\r\n        str = str.charAt(0) + '.' + str.slice(1);\r\n      }\r\n\r\n      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n    } else if (e < 0) {\r\n      str = '0.' + getZeroString(-e - 1) + str;\r\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n    } else if (e >= len) {\r\n      str += getZeroString(e + 1 - len);\r\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n    } else {\r\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n      if (sd && (k = sd - len) > 0) {\r\n        if (e + 1 === len) str += '.';\r\n        str += getZeroString(k);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // Calculate the base 10 exponent from the base 1e7 exponent.\r\n  function getBase10Exponent(digits, e) {\r\n    var w = digits[0];\r\n\r\n    // Add the number of digits of the first word of the digits array.\r\n    for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n    return e;\r\n  }\r\n\r\n\r\n  function getLn10(Ctor, sd, pr) {\r\n    if (sd > LN10_PRECISION) {\r\n\r\n      // Reset global state in case the exception is caught.\r\n      external = true;\r\n      if (pr) Ctor.precision = pr;\r\n      throw Error(precisionLimitExceeded);\r\n    }\r\n    return finalise(new Ctor(LN10), sd, 1, true);\r\n  }\r\n\r\n\r\n  function getPi(Ctor, sd, rm) {\r\n    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n    return finalise(new Ctor(PI), sd, rm, true);\r\n  }\r\n\r\n\r\n  function getPrecision(digits) {\r\n    var w = digits.length - 1,\r\n      len = w * LOG_BASE + 1;\r\n\r\n    w = digits[w];\r\n\r\n    // If non-zero...\r\n    if (w) {\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      for (; w % 10 == 0; w /= 10) len--;\r\n\r\n      // Add the number of digits of the first word.\r\n      for (w = digits[0]; w >= 10; w /= 10) len++;\r\n    }\r\n\r\n    return len;\r\n  }\r\n\r\n\r\n  function getZeroString(k) {\r\n    var zs = '';\r\n    for (; k--;) zs += '0';\r\n    return zs;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n   * integer of type number.\r\n   *\r\n   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n   *\r\n   */\r\n  function intPow(Ctor, x, n, pr) {\r\n    var isTruncated,\r\n      r = new Ctor(1),\r\n\r\n      // Max n of 9007199254740991 takes 53 loop iterations.\r\n      // Maximum digits array length; leaves [28, 34] guard digits.\r\n      k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n    external = false;\r\n\r\n    for (;;) {\r\n      if (n % 2) {\r\n        r = r.times(x);\r\n        if (truncate(r.d, k)) isTruncated = true;\r\n      }\r\n\r\n      n = mathfloor(n / 2);\r\n      if (n === 0) {\r\n\r\n        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n        n = r.d.length - 1;\r\n        if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n        break;\r\n      }\r\n\r\n      x = x.times(x);\r\n      truncate(x.d, k);\r\n    }\r\n\r\n    external = true;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  function isOdd(n) {\r\n    return n.d[n.d.length - 1] & 1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n   */\r\n  function maxOrMin(Ctor, args, ltgt) {\r\n    var y,\r\n      x = new Ctor(args[0]),\r\n      i = 0;\r\n\r\n    for (; ++i < args.length;) {\r\n      y = new Ctor(args[i]);\r\n      if (!y.s) {\r\n        x = y;\r\n        break;\r\n      } else if (x[ltgt](y)) {\r\n        x = y;\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   * Taylor/Maclaurin series.\r\n   *\r\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n   *\r\n   * Argument reduction:\r\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n   *   exp(x) = exp(x / 2^k)^(2^k)\r\n   *\r\n   * Previously, the argument was initially reduced by\r\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n   * found to be slower than just dividing repeatedly by 32 as above.\r\n   *\r\n   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n   *\r\n   *  exp(Infinity)  = Infinity\r\n   *  exp(-Infinity) = 0\r\n   *  exp(NaN)       = NaN\r\n   *  exp(±0)        = 1\r\n   *\r\n   *  exp(x) is non-terminating for any finite, non-zero x.\r\n   *\r\n   *  The result will always be correctly rounded.\r\n   *\r\n   */\r\n  function naturalExponential(x, sd) {\r\n    var denominator, guard, j, pow, sum, t, wpr,\r\n      rep = 0,\r\n      i = 0,\r\n      k = 0,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // 0/NaN/Infinity?\r\n    if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n      return new Ctor(x.d\r\n        ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n        : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    t = new Ctor(0.03125);\r\n\r\n    // while abs(x) >= 0.1\r\n    while (x.e > -2) {\r\n\r\n      // x = x / 2^5\r\n      x = x.times(t);\r\n      k += 5;\r\n    }\r\n\r\n    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n    // necessary to ensure the first 4 rounding digits are correct.\r\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n    wpr += guard;\r\n    denominator = pow = sum = new Ctor(1);\r\n    Ctor.precision = wpr;\r\n\r\n    for (;;) {\r\n      pow = finalise(pow.times(x), wpr, 1);\r\n      denominator = denominator.times(++i);\r\n      t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        j = k;\r\n        while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n        // Check to see if the first 4 rounding digits are [49]999.\r\n        // If so, repeat the summation with a higher precision, otherwise\r\n        // e.g. with precision: 18, rounding: 1\r\n        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n\r\n          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += 10;\r\n            denominator = pow = t = new Ctor(1);\r\n            i = 0;\r\n            rep++;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   *  ln(-n)        = NaN\r\n   *  ln(0)         = -Infinity\r\n   *  ln(-0)        = -Infinity\r\n   *  ln(1)         = 0\r\n   *  ln(Infinity)  = Infinity\r\n   *  ln(-Infinity) = NaN\r\n   *  ln(NaN)       = NaN\r\n   *\r\n   *  ln(n) (n != 1) is non-terminating.\r\n   *\r\n   */\r\n  function naturalLogarithm(y, sd) {\r\n    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n      n = 1,\r\n      guard = 10,\r\n      x = y,\r\n      xd = x.d,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // Is x negative or Infinity, NaN, 0 or 1?\r\n    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    Ctor.precision = wpr += guard;\r\n    c = digitsToString(xd);\r\n    c0 = c.charAt(0);\r\n\r\n    if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n      // Argument reduction.\r\n      // The series converges faster the closer the argument is to 1, so using\r\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n      // later be divided by this number, then separate out the power of 10 using\r\n      // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n      // max n is 6 (gives 0.7 - 1.3)\r\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n        x = x.times(y);\r\n        c = digitsToString(x.d);\r\n        c0 = c.charAt(0);\r\n        n++;\r\n      }\r\n\r\n      e = x.e;\r\n\r\n      if (c0 > 1) {\r\n        x = new Ctor('0.' + c);\r\n        e++;\r\n      } else {\r\n        x = new Ctor(c0 + '.' + c.slice(1));\r\n      }\r\n    } else {\r\n\r\n      // The argument reduction method above may result in overflow if the argument y is a massive\r\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n      Ctor.precision = pr;\r\n\r\n      return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n    }\r\n\r\n    // x1 is x reduced to a value near 1.\r\n    x1 = x;\r\n\r\n    // Taylor series.\r\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n    x2 = finalise(x.times(x), wpr, 1);\r\n    denominator = 3;\r\n\r\n    for (;;) {\r\n      numerator = finalise(numerator.times(x2), wpr, 1);\r\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        sum = sum.times(2);\r\n\r\n        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n        sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n        // been repeated previously) and the first 4 rounding digits 9999?\r\n        // If so, restart the summation with a higher precision, otherwise\r\n        // e.g. with precision: 12, rounding: 1\r\n        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += guard;\r\n            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n            x2 = finalise(x.times(x), wpr, 1);\r\n            denominator = rep = 1;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n      denominator += 2;\r\n    }\r\n  }\r\n\r\n\r\n  // ±Infinity, NaN.\r\n  function nonFiniteToString(x) {\r\n    // Unsigned.\r\n    return String(x.s * x.s / 0);\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from string `str`.\r\n   */\r\n  function parseDecimal(x, str) {\r\n    var e, i, len;\r\n\r\n    // Decimal point?\r\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = str.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +str.slice(i + 1);\r\n      str = str.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n    str = str.slice(i, len);\r\n\r\n    if (str) {\r\n      len -= i;\r\n      x.e = e = e - i - 1;\r\n      x.d = [];\r\n\r\n      // Transform base\r\n\r\n      // e is the base 10 exponent.\r\n      // i is where to slice str to get the first word of the digits array.\r\n      i = (e + 1) % LOG_BASE;\r\n      if (e < 0) i += LOG_BASE;\r\n\r\n      if (i < len) {\r\n        if (i) x.d.push(+str.slice(0, i));\r\n        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n        str = str.slice(i);\r\n        i = LOG_BASE - str.length;\r\n      } else {\r\n        i -= len;\r\n      }\r\n\r\n      for (; i--;) str += '0';\r\n      x.d.push(+str);\r\n\r\n      if (external) {\r\n\r\n        // Overflow?\r\n        if (x.e > x.constructor.maxE) {\r\n\r\n          // Infinity.\r\n          x.d = null;\r\n          x.e = NaN;\r\n\r\n        // Underflow?\r\n        } else if (x.e < x.constructor.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n          // x.constructor.underflow = true;\r\n        } // else x.constructor.underflow = false;\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n   */\r\n  function parseOther(x, str) {\r\n    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n    if (str.indexOf('_') > -1) {\r\n      str = str.replace(/(\\d)_(?=\\d)/g, '$1');\r\n      if (isDecimal.test(str)) return parseDecimal(x, str);\r\n    } else if (str === 'Infinity' || str === 'NaN') {\r\n      if (!+str) x.s = NaN;\r\n      x.e = NaN;\r\n      x.d = null;\r\n      return x;\r\n    }\r\n\r\n    if (isHex.test(str))  {\r\n      base = 16;\r\n      str = str.toLowerCase();\r\n    } else if (isBinary.test(str))  {\r\n      base = 2;\r\n    } else if (isOctal.test(str))  {\r\n      base = 8;\r\n    } else {\r\n      throw Error(invalidArgument + str);\r\n    }\r\n\r\n    // Is there a binary exponent part?\r\n    i = str.search(/p/i);\r\n\r\n    if (i > 0) {\r\n      p = +str.slice(i + 1);\r\n      str = str.substring(2, i);\r\n    } else {\r\n      str = str.slice(2);\r\n    }\r\n\r\n    // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n    // fraction part will be restored.\r\n    i = str.indexOf('.');\r\n    isFloat = i >= 0;\r\n    Ctor = x.constructor;\r\n\r\n    if (isFloat) {\r\n      str = str.replace('.', '');\r\n      len = str.length;\r\n      i = len - i;\r\n\r\n      // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n      divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n    }\r\n\r\n    xd = convertBase(str, base, BASE);\r\n    xe = xd.length - 1;\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xe; xd[i] === 0; --i) xd.pop();\r\n    if (i < 0) return new Ctor(x.s * 0);\r\n    x.e = getBase10Exponent(xd, xe);\r\n    x.d = xd;\r\n    external = false;\r\n\r\n    // At what precision to perform the division to ensure exact conversion?\r\n    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n    // Therefore using 4 * the number of digits of str will always be enough.\r\n    if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n    // Multiply by the binary exponent part if present.\r\n    if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\r\n    external = true;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function sine(Ctor, x) {\r\n    var k,\r\n      len = x.d.length;\r\n\r\n    if (len < 3) {\r\n      return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\r\n    }\r\n\r\n    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    x = x.times(1 / tinyPow(5, k));\r\n    x = taylorSeries(Ctor, 2, x, x);\r\n\r\n    // Reverse argument reduction\r\n    var sin2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sin2_x = x.times(x);\r\n      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\n  function taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n    var j, t, u, x2,\r\n      i = 1,\r\n      pr = Ctor.precision,\r\n      k = Math.ceil(pr / LOG_BASE);\r\n\r\n    external = false;\r\n    x2 = x.times(x);\r\n    u = new Ctor(y);\r\n\r\n    for (;;) {\r\n      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      t = u.plus(y);\r\n\r\n      if (t.d[k] !== void 0) {\r\n        for (j = k; t.d[j] === u.d[j] && j--;);\r\n        if (j == -1) break;\r\n      }\r\n\r\n      j = u;\r\n      u = y;\r\n      y = t;\r\n      t = j;\r\n      i++;\r\n    }\r\n\r\n    external = true;\r\n    t.d.length = k + 1;\r\n\r\n    return t;\r\n  }\r\n\r\n\r\n  // Exponent e must be positive and non-zero.\r\n  function tinyPow(b, e) {\r\n    var n = b;\r\n    while (--e) n *= b;\r\n    return n;\r\n  }\r\n\r\n\r\n  // Return the absolute value of `x` reduced to less than or equal to half pi.\r\n  function toLessThanHalfPi(Ctor, x) {\r\n    var t,\r\n      isNeg = x.s < 0,\r\n      pi = getPi(Ctor, Ctor.precision, 1),\r\n      halfPi = pi.times(0.5);\r\n\r\n    x = x.abs();\r\n\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isNeg ? 4 : 1;\r\n      return x;\r\n    }\r\n\r\n    t = x.divToInt(pi);\r\n\r\n    if (t.isZero()) {\r\n      quadrant = isNeg ? 3 : 2;\r\n    } else {\r\n      x = x.minus(t.times(pi));\r\n\r\n      // 0 <= x < pi\r\n      if (x.lte(halfPi)) {\r\n        quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n        return x;\r\n      }\r\n\r\n      quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n    }\r\n\r\n    return x.minus(pi).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return the value of Decimal `x` as a string in base `baseOut`.\r\n   *\r\n   * If the optional `sd` argument is present include a binary exponent suffix.\r\n   */\r\n  function toStringBinary(x, baseOut, sd, rm) {\r\n    var base, e, i, k, len, roundUp, str, xd, y,\r\n      Ctor = x.constructor,\r\n      isExp = sd !== void 0;\r\n\r\n    if (isExp) {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    } else {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    }\r\n\r\n    if (!x.isFinite()) {\r\n      str = nonFiniteToString(x);\r\n    } else {\r\n      str = finiteToString(x);\r\n      i = str.indexOf('.');\r\n\r\n      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n      // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n      // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n      if (isExp) {\r\n        base = 2;\r\n        if (baseOut == 16) {\r\n          sd = sd * 4 - 3;\r\n        } else if (baseOut == 8) {\r\n          sd = sd * 3 - 2;\r\n        }\r\n      } else {\r\n        base = baseOut;\r\n      }\r\n\r\n      // Convert the number as an integer then divide the result by its base raised to a power such\r\n      // that the fraction part will be restored.\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        str = str.replace('.', '');\r\n        y = new Ctor(1);\r\n        y.e = str.length - i;\r\n        y.d = convertBase(finiteToString(y), 10, base);\r\n        y.e = y.d.length;\r\n      }\r\n\r\n      xd = convertBase(str, 10, base);\r\n      e = len = xd.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xd[--len] == 0;) xd.pop();\r\n\r\n      if (!xd[0]) {\r\n        str = isExp ? '0p+0' : '0';\r\n      } else {\r\n        if (i < 0) {\r\n          e--;\r\n        } else {\r\n          x = new Ctor(x);\r\n          x.d = xd;\r\n          x.e = e;\r\n          x = divide(x, y, sd, rm, 0, base);\r\n          xd = x.d;\r\n          e = x.e;\r\n          roundUp = inexact;\r\n        }\r\n\r\n        // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        i = xd[sd];\r\n        k = base / 2;\r\n        roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n        roundUp = rm < 4\r\n          ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n          : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n            rm === (x.s < 0 ? 8 : 7));\r\n\r\n        xd.length = sd;\r\n\r\n        if (roundUp) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (; ++xd[--sd] > base - 1;) {\r\n            xd[sd] = 0;\r\n            if (!sd) {\r\n              ++e;\r\n              xd.unshift(1);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n        // Add binary exponent suffix?\r\n        if (isExp) {\r\n          if (len > 1) {\r\n            if (baseOut == 16 || baseOut == 8) {\r\n              i = baseOut == 16 ? 4 : 3;\r\n              for (--len; len % i; len++) str += '0';\r\n              xd = convertBase(str, base, baseOut);\r\n              for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n              // xd[0] will always be be 1\r\n              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n            } else {\r\n              str = str.charAt(0) + '.' + str.slice(1);\r\n            }\r\n          }\r\n\r\n          str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n        } else if (e < 0) {\r\n          for (; ++e;) str = '0' + str;\r\n          str = '0.' + str;\r\n        } else {\r\n          if (++e > len) for (e -= len; e-- ;) str += '0';\r\n          else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n        }\r\n      }\r\n\r\n      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n    }\r\n\r\n    return x.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Does not strip trailing zeros.\r\n  function truncate(arr, len) {\r\n    if (arr.length > len) {\r\n      arr.length = len;\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n  // Decimal methods\r\n\r\n\r\n  /*\r\n   *  abs\r\n   *  acos\r\n   *  acosh\r\n   *  add\r\n   *  asin\r\n   *  asinh\r\n   *  atan\r\n   *  atanh\r\n   *  atan2\r\n   *  cbrt\r\n   *  ceil\r\n   *  clamp\r\n   *  clone\r\n   *  config\r\n   *  cos\r\n   *  cosh\r\n   *  div\r\n   *  exp\r\n   *  floor\r\n   *  hypot\r\n   *  ln\r\n   *  log\r\n   *  log2\r\n   *  log10\r\n   *  max\r\n   *  min\r\n   *  mod\r\n   *  mul\r\n   *  pow\r\n   *  random\r\n   *  round\r\n   *  set\r\n   *  sign\r\n   *  sin\r\n   *  sinh\r\n   *  sqrt\r\n   *  sub\r\n   *  sum\r\n   *  tan\r\n   *  tanh\r\n   *  trunc\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function abs(x) {\r\n    return new this(x).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function acos(x) {\r\n    return new this(x).acos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function acosh(x) {\r\n    return new this(x).acosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function add(x, y) {\r\n    return new this(x).plus(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function asin(x) {\r\n    return new this(x).asin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function asinh(x) {\r\n    return new this(x).asinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function atan(x) {\r\n    return new this(x).atan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function atanh(x) {\r\n    return new this(x).atanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi, pi]\r\n   *\r\n   * y {number|string|Decimal} The y-coordinate.\r\n   * x {number|string|Decimal} The x-coordinate.\r\n   *\r\n   * atan2(±0, -0)               = ±pi\r\n   * atan2(±0, +0)               = ±0\r\n   * atan2(±0, -x)               = ±pi for x > 0\r\n   * atan2(±0, x)                = ±0 for x > 0\r\n   * atan2(-y, ±0)               = -pi/2 for y > 0\r\n   * atan2(y, ±0)                = pi/2 for y > 0\r\n   * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n   * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n   * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n   * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n   * atan2(±Infinity, +Infinity) = ±pi/4\r\n   * atan2(NaN, x) = NaN\r\n   * atan2(y, NaN) = NaN\r\n   *\r\n   */\r\n  function atan2(y, x) {\r\n    y = new this(y);\r\n    x = new this(x);\r\n    var r,\r\n      pr = this.precision,\r\n      rm = this.rounding,\r\n      wpr = pr + 4;\r\n\r\n    // Either NaN\r\n    if (!y.s || !x.s) {\r\n      r = new this(NaN);\r\n\r\n    // Both ±Infinity\r\n    } else if (!y.d && !x.d) {\r\n      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n      r.s = y.s;\r\n\r\n    // x is ±Infinity or y is ±0\r\n    } else if (!x.d || y.isZero()) {\r\n      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n      r.s = y.s;\r\n\r\n    // y is ±Infinity or x is ±0\r\n    } else if (!y.d || x.isZero()) {\r\n      r = getPi(this, wpr, 1).times(0.5);\r\n      r.s = y.s;\r\n\r\n    // Both non-zero and finite\r\n    } else if (x.s < 0) {\r\n      this.precision = wpr;\r\n      this.rounding = 1;\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n      x = getPi(this, wpr, 1);\r\n      this.precision = pr;\r\n      this.rounding = rm;\r\n      r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n    } else {\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function cbrt(x) {\r\n    return new this(x).cbrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ceil(x) {\r\n    return finalise(x = new this(x), x.e + 1, 2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * min {number|string|Decimal}\r\n   * max {number|string|Decimal}\r\n   *\r\n   */\r\n  function clamp(x, min, max) {\r\n    return new this(x).clamp(min, max);\r\n  }\r\n\r\n\r\n  /*\r\n   * Configure global settings for a Decimal constructor.\r\n   *\r\n   * `obj` is an object with one or more of the following properties,\r\n   *\r\n   *   precision  {number}\r\n   *   rounding   {number}\r\n   *   toExpNeg   {number}\r\n   *   toExpPos   {number}\r\n   *   maxE       {number}\r\n   *   minE       {number}\r\n   *   modulo     {number}\r\n   *   crypto     {boolean|number}\r\n   *   defaults   {true}\r\n   *\r\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n   *\r\n   */\r\n  function config(obj) {\r\n    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n    var i, p, v,\r\n      useDefaults = obj.defaults === true,\r\n      ps = [\r\n        'precision', 1, MAX_DIGITS,\r\n        'rounding', 0, 8,\r\n        'toExpNeg', -EXP_LIMIT, 0,\r\n        'toExpPos', 0, EXP_LIMIT,\r\n        'maxE', 0, EXP_LIMIT,\r\n        'minE', -EXP_LIMIT, 0,\r\n        'modulo', 0, 9\r\n      ];\r\n\r\n    for (i = 0; i < ps.length; i += 3) {\r\n      if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n      if ((v = obj[p]) !== void 0) {\r\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n        else throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (v === true || v === false || v === 0 || v === 1) {\r\n        if (v) {\r\n          if (typeof crypto != 'undefined' && crypto &&\r\n            (crypto.getRandomValues || crypto.randomBytes)) {\r\n            this[p] = true;\r\n          } else {\r\n            throw Error(cryptoUnavailable);\r\n          }\r\n        } else {\r\n          this[p] = false;\r\n        }\r\n      } else {\r\n        throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cos(x) {\r\n    return new this(x).cos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cosh(x) {\r\n    return new this(x).cosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n   * constructor.\r\n   *\r\n   */\r\n  function clone(obj) {\r\n    var i, p, ps;\r\n\r\n    /*\r\n     * The Decimal constructor and exported function.\r\n     * Return a new Decimal instance.\r\n     *\r\n     * v {number|string|Decimal} A numeric value.\r\n     *\r\n     */\r\n    function Decimal(v) {\r\n      var e, i, t,\r\n        x = this;\r\n\r\n      // Decimal called without new.\r\n      if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n      // which points to Object.\r\n      x.constructor = Decimal;\r\n\r\n      // Duplicate.\r\n      if (isDecimalInstance(v)) {\r\n        x.s = v.s;\r\n\r\n        if (external) {\r\n          if (!v.d || v.e > Decimal.maxE) {\r\n\r\n            // Infinity.\r\n            x.e = NaN;\r\n            x.d = null;\r\n          } else if (v.e < Decimal.minE) {\r\n\r\n            // Zero.\r\n            x.e = 0;\r\n            x.d = [0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.d = v.d.slice();\r\n          }\r\n        } else {\r\n          x.e = v.e;\r\n          x.d = v.d ? v.d.slice() : v.d;\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      t = typeof v;\r\n\r\n      if (t === 'number') {\r\n        if (v === 0) {\r\n          x.s = 1 / v < 0 ? -1 : 1;\r\n          x.e = 0;\r\n          x.d = [0];\r\n          return;\r\n        }\r\n\r\n        if (v < 0) {\r\n          v = -v;\r\n          x.s = -1;\r\n        } else {\r\n          x.s = 1;\r\n        }\r\n\r\n        // Fast path for small integers.\r\n        if (v === ~~v && v < 1e7) {\r\n          for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n\r\n          if (external) {\r\n            if (e > Decimal.maxE) {\r\n              x.e = NaN;\r\n              x.d = null;\r\n            } else if (e < Decimal.minE) {\r\n              x.e = 0;\r\n              x.d = [0];\r\n            } else {\r\n              x.e = e;\r\n              x.d = [v];\r\n            }\r\n          } else {\r\n            x.e = e;\r\n            x.d = [v];\r\n          }\r\n\r\n          return;\r\n\r\n        // Infinity, NaN.\r\n        } else if (v * 0 !== 0) {\r\n          if (!v) x.s = NaN;\r\n          x.e = NaN;\r\n          x.d = null;\r\n          return;\r\n        }\r\n\r\n        return parseDecimal(x, v.toString());\r\n\r\n      } else if (t !== 'string') {\r\n        throw Error(invalidArgument + v);\r\n      }\r\n\r\n      // Minus sign?\r\n      if ((i = v.charCodeAt(0)) === 45) {\r\n        v = v.slice(1);\r\n        x.s = -1;\r\n      } else {\r\n        // Plus sign?\r\n        if (i === 43) v = v.slice(1);\r\n        x.s = 1;\r\n      }\r\n\r\n      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n    }\r\n\r\n    Decimal.prototype = P;\r\n\r\n    Decimal.ROUND_UP = 0;\r\n    Decimal.ROUND_DOWN = 1;\r\n    Decimal.ROUND_CEIL = 2;\r\n    Decimal.ROUND_FLOOR = 3;\r\n    Decimal.ROUND_HALF_UP = 4;\r\n    Decimal.ROUND_HALF_DOWN = 5;\r\n    Decimal.ROUND_HALF_EVEN = 6;\r\n    Decimal.ROUND_HALF_CEIL = 7;\r\n    Decimal.ROUND_HALF_FLOOR = 8;\r\n    Decimal.EUCLID = 9;\r\n\r\n    Decimal.config = Decimal.set = config;\r\n    Decimal.clone = clone;\r\n    Decimal.isDecimal = isDecimalInstance;\r\n\r\n    Decimal.abs = abs;\r\n    Decimal.acos = acos;\r\n    Decimal.acosh = acosh;        // ES6\r\n    Decimal.add = add;\r\n    Decimal.asin = asin;\r\n    Decimal.asinh = asinh;        // ES6\r\n    Decimal.atan = atan;\r\n    Decimal.atanh = atanh;        // ES6\r\n    Decimal.atan2 = atan2;\r\n    Decimal.cbrt = cbrt;          // ES6\r\n    Decimal.ceil = ceil;\r\n    Decimal.clamp = clamp;\r\n    Decimal.cos = cos;\r\n    Decimal.cosh = cosh;          // ES6\r\n    Decimal.div = div;\r\n    Decimal.exp = exp;\r\n    Decimal.floor = floor;\r\n    Decimal.hypot = hypot;        // ES6\r\n    Decimal.ln = ln;\r\n    Decimal.log = log;\r\n    Decimal.log10 = log10;        // ES6\r\n    Decimal.log2 = log2;          // ES6\r\n    Decimal.max = max;\r\n    Decimal.min = min;\r\n    Decimal.mod = mod;\r\n    Decimal.mul = mul;\r\n    Decimal.pow = pow;\r\n    Decimal.random = random;\r\n    Decimal.round = round;\r\n    Decimal.sign = sign;          // ES6\r\n    Decimal.sin = sin;\r\n    Decimal.sinh = sinh;          // ES6\r\n    Decimal.sqrt = sqrt;\r\n    Decimal.sub = sub;\r\n    Decimal.sum = sum;\r\n    Decimal.tan = tan;\r\n    Decimal.tanh = tanh;          // ES6\r\n    Decimal.trunc = trunc;        // ES6\r\n\r\n    if (obj === void 0) obj = {};\r\n    if (obj) {\r\n      if (obj.defaults !== true) {\r\n        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n        for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n      }\r\n    }\r\n\r\n    Decimal.config(obj);\r\n\r\n    return Decimal;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function div(x, y) {\r\n    return new this(x).div(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n   *\r\n   */\r\n  function exp(x) {\r\n    return new this(x).exp();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function floor(x) {\r\n    return finalise(x = new this(x), x.e + 1, 3);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function hypot() {\r\n    var i, n,\r\n      t = new this(0);\r\n\r\n    external = false;\r\n\r\n    for (i = 0; i < arguments.length;) {\r\n      n = new this(arguments[i++]);\r\n      if (!n.d) {\r\n        if (n.s) {\r\n          external = true;\r\n          return new this(1 / 0);\r\n        }\r\n        t = n;\r\n      } else if (t.d) {\r\n        t = t.plus(n.times(n));\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return t.sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  function isDecimalInstance(obj) {\r\n    return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ln(x) {\r\n    return new this(x).ln();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * log[y](x)\r\n   *\r\n   * x {number|string|Decimal} The argument of the logarithm.\r\n   * y {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  function log(x, y) {\r\n    return new this(x).log(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log2(x) {\r\n    return new this(x).log(2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log10(x) {\r\n    return new this(x).log(10);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function max() {\r\n    return maxOrMin(this, arguments, 'lt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function min() {\r\n    return maxOrMin(this, arguments, 'gt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mod(x, y) {\r\n    return new this(x).mod(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mul(x, y) {\r\n    return new this(x).mul(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The base.\r\n   * y {number|string|Decimal} The exponent.\r\n   *\r\n   */\r\n  function pow(x, y) {\r\n    return new this(x).pow(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n   * are produced).\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n   *\r\n   */\r\n  function random(sd) {\r\n    var d, e, k, n,\r\n      i = 0,\r\n      r = new this(1),\r\n      rd = [];\r\n\r\n    if (sd === void 0) sd = this.precision;\r\n    else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    k = Math.ceil(sd / LOG_BASE);\r\n\r\n    if (!this.crypto) {\r\n      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n    // Browsers supporting crypto.getRandomValues.\r\n    } else if (crypto.getRandomValues) {\r\n      d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n      for (; i < k;) {\r\n        n = d[i];\r\n\r\n        // 0 <= n < 4294967296\r\n        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n        if (n >= 4.29e9) {\r\n          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n        } else {\r\n\r\n          // 0 <= n <= 4289999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd[i++] = n % 1e7;\r\n        }\r\n      }\r\n\r\n    // Node.js supporting crypto.randomBytes.\r\n    } else if (crypto.randomBytes) {\r\n\r\n      // buffer\r\n      d = crypto.randomBytes(k *= 4);\r\n\r\n      for (; i < k;) {\r\n\r\n        // 0 <= n < 2147483648\r\n        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n        if (n >= 2.14e9) {\r\n          crypto.randomBytes(4).copy(d, i);\r\n        } else {\r\n\r\n          // 0 <= n <= 2139999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd.push(n % 1e7);\r\n          i += 4;\r\n        }\r\n      }\r\n\r\n      i = k / 4;\r\n    } else {\r\n      throw Error(cryptoUnavailable);\r\n    }\r\n\r\n    k = rd[--i];\r\n    sd %= LOG_BASE;\r\n\r\n    // Convert trailing digits to zeros according to sd.\r\n    if (k && sd) {\r\n      n = mathpow(10, LOG_BASE - sd);\r\n      rd[i] = (k / n | 0) * n;\r\n    }\r\n\r\n    // Remove trailing words which are zero.\r\n    for (; rd[i] === 0; i--) rd.pop();\r\n\r\n    // Zero?\r\n    if (i < 0) {\r\n      e = 0;\r\n      rd = [0];\r\n    } else {\r\n      e = -1;\r\n\r\n      // Remove leading words which are zero and adjust exponent accordingly.\r\n      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n      // Count the digits of the first word of rd to determine leading zeros.\r\n      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n      // Adjust the exponent for leading zeros of the first word of rd.\r\n      if (k < LOG_BASE) e -= LOG_BASE - k;\r\n    }\r\n\r\n    r.e = e;\r\n    r.d = rd;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n   *\r\n   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function round(x) {\r\n    return finalise(x = new this(x), x.e + 1, this.rounding);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if x > 0,\r\n   *  -1    if x < 0,\r\n   *   0    if x is 0,\r\n   *  -0    if x is -0,\r\n   *   NaN  otherwise\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function sign(x) {\r\n    x = new this(x);\r\n    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sin(x) {\r\n    return new this(x).sin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sinh(x) {\r\n    return new this(x).sinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function sqrt(x) {\r\n    return new this(x).sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function sub(x, y) {\r\n    return new this(x).sub(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * Only the result is rounded, not the intermediate calculations.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function sum() {\r\n    var i = 0,\r\n      args = arguments,\r\n      x = new this(args[i]);\r\n\r\n    external = false;\r\n    for (; x.s && ++i < args.length;) x = x.plus(args[i]);\r\n    external = true;\r\n\r\n    return finalise(x, this.precision, this.rounding);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tan(x) {\r\n    return new this(x).tan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tanh(x) {\r\n    return new this(x).tanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` truncated to an integer.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function trunc(x) {\r\n    return finalise(x = new this(x), x.e + 1, 1);\r\n  }\r\n\r\n\r\n  // Create and configure initial Decimal constructor.\r\n  Decimal = clone(DEFAULTS);\r\n  Decimal.prototype.constructor = Decimal;\r\n  Decimal['default'] = Decimal.Decimal = Decimal;\r\n\r\n  // Create the internal constants from their string values.\r\n  LN10 = new Decimal(LN10);\r\n  PI = new Decimal(PI);\r\n\r\n\r\n  // Export.\r\n\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () {\r\n      return Decimal;\r\n    });\r\n\r\n  // Node and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    if (typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol') {\r\n      P[Symbol['for']('nodejs.util.inspect.custom')] = P.toString;\r\n      P[Symbol.toStringTag] = 'Decimal';\r\n    }\r\n\r\n    module.exports = Decimal;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalScope) {\r\n      globalScope = typeof self != 'undefined' && self && self.self == self ? self : window;\r\n    }\r\n\r\n    noConflict = globalScope.Decimal;\r\n    Decimal.noConflict = function () {\r\n      globalScope.Decimal = noConflict;\r\n      return Decimal;\r\n    };\r\n\r\n    globalScope.Decimal = Decimal;\r\n  }\r\n})(this);\r\n","import Decimal from 'decimal.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'BigNumber';\nvar dependencies = ['?on', 'config'];\nexport var createBigNumberClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    on,\n    config\n  } = _ref;\n  var BigNumber = Decimal.clone({\n    precision: config.precision,\n    modulo: Decimal.EUCLID\n  });\n  BigNumber.prototype = Object.create(BigNumber.prototype);\n  /**\n   * Attach type information\n   */\n\n  BigNumber.prototype.type = 'BigNumber';\n  BigNumber.prototype.isBigNumber = true;\n  /**\n   * Get a JSON representation of a BigNumber containing\n   * type information\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`\n   */\n\n  BigNumber.prototype.toJSON = function () {\n    return {\n      mathjs: 'BigNumber',\n      value: this.toString()\n    };\n  };\n  /**\n   * Instantiate a BigNumber from a JSON object\n   * @param {Object} json  a JSON object structured as:\n   *                       `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`\n   * @return {BigNumber}\n   */\n\n\n  BigNumber.fromJSON = function (json) {\n    return new BigNumber(json.value);\n  };\n\n  if (on) {\n    // listen for changed in the configuration, automatically apply changed precision\n    on('config', function (curr, prev) {\n      if (curr.precision !== prev.precision) {\n        BigNumber.config({\n          precision: curr.precision\n        });\n      }\n    });\n  }\n\n  return BigNumber;\n}, {\n  isClass: true\n});","/**\n * @license Complex.js v2.1.1 12/05/2020\n *\n * Copyright (c) 2020, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n/**\n *\n * This class allows the manipulation of complex numbers.\n * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.\n *\n * Object form\n * { re: <real>, im: <imaginary> }\n * { arg: <angle>, abs: <radius> }\n * { phi: <angle>, r: <radius> }\n *\n * Array / Vector form\n * [ real, imaginary ]\n *\n * Double form\n * 99.3 - Single double value\n *\n * String form\n * '23.1337' - Simple real number\n * '15+3i' - a simple complex number\n * '3-i' - a simple complex number\n *\n * Example:\n *\n * var c = new Complex('99.3+8i');\n * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);\n *\n */\n\n(function(root) {\n\n  'use strict';\n\n  var cosh = Math.cosh || function(x) {\n    return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;\n  };\n\n  var sinh = Math.sinh || function(x) {\n    return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;\n  };\n\n  /**\n   * Calculates cos(x) - 1 using Taylor series if x is small (-¼π ≤ x ≤ ¼π).\n   *\n   * @param {number} x\n   * @returns {number} cos(x) - 1\n   */\n  var cosm1 = function(x) {\n\n    var b = Math.PI / 4;\n    if (-b > x || x > b) {\n      return Math.cos(x) - 1.0;\n    }\n\n    /* Calculate horner form of polynomial of taylor series in Q\n    var fac = 1, alt = 1, pol = {};\n    for (var i = 0; i <= 16; i++) {\n      fac*= i || 1;\n      if (i % 2 == 0) {\n        pol[i] = new Fraction(1, alt * fac);\n        alt = -alt;\n      }\n    }\n    console.log(new Polynomial(pol).toHorner()); // (((((((1/20922789888000x^2-1/87178291200)x^2+1/479001600)x^2-1/3628800)x^2+1/40320)x^2-1/720)x^2+1/24)x^2-1/2)x^2+1\n    */\n\n    var xx = x * x;\n    return xx * (\n      xx * (\n        xx * (\n          xx * (\n            xx * (\n              xx * (\n                xx * (\n                  xx / 20922789888000\n                  - 1 / 87178291200)\n                + 1 / 479001600)\n              - 1 / 3628800)\n            + 1 / 40320)\n          - 1 / 720)\n        + 1 / 24)\n      - 1 / 2);\n  };\n\n  var hypot = function(x, y) {\n\n    var a = Math.abs(x);\n    var b = Math.abs(y);\n\n    if (a < 3000 && b < 3000) {\n      return Math.sqrt(a * a + b * b);\n    }\n\n    if (a < b) {\n      a = b;\n      b = x / y;\n    } else {\n      b = y / x;\n    }\n    return a * Math.sqrt(1 + b * b);\n  };\n\n  var parser_exit = function() {\n    throw SyntaxError('Invalid Param');\n  };\n\n  /**\n   * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows\n   *\n   * @param {number} a\n   * @param {number} b\n   * @returns {number}\n   */\n  function logHypot(a, b) {\n\n    var _a = Math.abs(a);\n    var _b = Math.abs(b);\n\n    if (a === 0) {\n      return Math.log(_b);\n    }\n\n    if (b === 0) {\n      return Math.log(_a);\n    }\n\n    if (_a < 3000 && _b < 3000) {\n      return Math.log(a * a + b * b) * 0.5;\n    }\n\n    /* I got 4 ideas to compute this property without overflow:\n     *\n     * Testing 1000000 times with random samples for a,b ∈ [1, 1000000000] against a big decimal library to get an error estimate\n     *\n     * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)\n\n     Math.log(a * a + b * b) / 2\n\n     *\n     *\n     * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)\n\n     var fn = function(a, b) {\n     a = Math.abs(a);\n     b = Math.abs(b);\n     var t = Math.min(a, b);\n     a = Math.max(a, b);\n     t = t / a;\n\n     return Math.log(a) + Math.log(1 + t * t) / 2;\n     };\n\n     * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)\n\n     Math.log(a / Math.cos(Math.atan2(b, a)))\n\n     * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)\n\n     Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))\n\n     */\n\n     a = a / 2;\n     b = b / 2;\n\n    return 0.5 * Math.log(a * a + b * b) + Math.LN2;\n  }\n\n  var parse = function(a, b) {\n\n    var z = { 're': 0, 'im': 0 };\n\n    if (a === undefined || a === null) {\n      z['re'] =\n      z['im'] = 0;\n    } else if (b !== undefined) {\n      z['re'] = a;\n      z['im'] = b;\n    } else\n      switch (typeof a) {\n\n        case 'object':\n\n          if ('im' in a && 're' in a) {\n            z['re'] = a['re'];\n            z['im'] = a['im'];\n          } else if ('abs' in a && 'arg' in a) {\n            if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) {\n              return Complex['INFINITY'];\n            }\n            z['re'] = a['abs'] * Math.cos(a['arg']);\n            z['im'] = a['abs'] * Math.sin(a['arg']);\n          } else if ('r' in a && 'phi' in a) {\n            if (!Number.isFinite(a['r']) && Number.isFinite(a['phi'])) {\n              return Complex['INFINITY'];\n            }\n            z['re'] = a['r'] * Math.cos(a['phi']);\n            z['im'] = a['r'] * Math.sin(a['phi']);\n          } else if (a.length === 2) { // Quick array check\n            z['re'] = a[0];\n            z['im'] = a[1];\n          } else {\n            parser_exit();\n          }\n          break;\n\n        case 'string':\n\n          z['im'] = /* void */\n          z['re'] = 0;\n\n          var tokens = a.match(/\\d+\\.?\\d*e[+-]?\\d+|\\d+\\.?\\d*|\\.\\d+|./g);\n          var plus = 1;\n          var minus = 0;\n\n          if (tokens === null) {\n            parser_exit();\n          }\n\n          for (var i = 0; i < tokens.length; i++) {\n\n            var c = tokens[i];\n\n            if (c === ' ' || c === '\\t' || c === '\\n') {\n              /* void */\n            } else if (c === '+') {\n              plus++;\n            } else if (c === '-') {\n              minus++;\n            } else if (c === 'i' || c === 'I') {\n\n              if (plus + minus === 0) {\n                parser_exit();\n              }\n\n              if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {\n                z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);\n                i++;\n              } else {\n                z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');\n              }\n              plus = minus = 0;\n\n            } else {\n\n              if (plus + minus === 0 || isNaN(c)) {\n                parser_exit();\n              }\n\n              if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {\n                z['im'] += parseFloat((minus % 2 ? '-' : '') + c);\n                i++;\n              } else {\n                z['re'] += parseFloat((minus % 2 ? '-' : '') + c);\n              }\n              plus = minus = 0;\n            }\n          }\n\n          // Still something on the stack\n          if (plus + minus > 0) {\n            parser_exit();\n          }\n          break;\n\n        case 'number':\n          z['im'] = 0;\n          z['re'] = a;\n          break;\n\n        default:\n          parser_exit();\n      }\n\n    if (isNaN(z['re']) || isNaN(z['im'])) {\n      // If a calculation is NaN, we treat it as NaN and don't throw\n      //parser_exit();\n    }\n\n    return z;\n  };\n\n  /**\n   * @constructor\n   * @returns {Complex}\n   */\n  function Complex(a, b) {\n\n    if (!(this instanceof Complex)) {\n      return new Complex(a, b);\n    }\n\n    var z = parse(a, b);\n\n    this['re'] = z['re'];\n    this['im'] = z['im'];\n  }\n\n  Complex.prototype = {\n\n    're': 0,\n    'im': 0,\n\n    /**\n     * Calculates the sign of a complex number, which is a normalized complex\n     *\n     * @returns {Complex}\n     */\n    'sign': function() {\n\n      var abs = this['abs']();\n\n      return new Complex(\n        this['re'] / abs,\n        this['im'] / abs);\n    },\n\n    /**\n     * Adds two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'add': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      // Infinity + Infinity = NaN\n      if (this['isInfinite']() && z['isInfinite']()) {\n        return Complex['NAN'];\n      }\n\n      // Infinity + z = Infinity { where z != Infinity }\n      if (this['isInfinite']() || z['isInfinite']()) {\n        return Complex['INFINITY'];\n      }\n\n      return new Complex(\n        this['re'] + z['re'],\n        this['im'] + z['im']);\n    },\n\n    /**\n     * Subtracts two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'sub': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      // Infinity - Infinity = NaN\n      if (this['isInfinite']() && z['isInfinite']()) {\n        return Complex['NAN'];\n      }\n\n      // Infinity - z = Infinity { where z != Infinity }\n      if (this['isInfinite']() || z['isInfinite']()) {\n        return Complex['INFINITY'];\n      }\n\n      return new Complex(\n        this['re'] - z['re'],\n        this['im'] - z['im']);\n    },\n\n    /**\n     * Multiplies two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'mul': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      // Infinity * 0 = NaN\n      if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {\n        return Complex['NAN'];\n      }\n\n      // Infinity * z = Infinity { where z != 0 }\n      if (this['isInfinite']() || z['isInfinite']()) {\n        return Complex['INFINITY'];\n      }\n\n      // Short circuit for real values\n      if (z['im'] === 0 && this['im'] === 0) {\n        return new Complex(this['re'] * z['re'], 0);\n      }\n\n      return new Complex(\n        this['re'] * z['re'] - this['im'] * z['im'],\n        this['re'] * z['im'] + this['im'] * z['re']);\n    },\n\n    /**\n     * Divides two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'div': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      // 0 / 0 = NaN and Infinity / Infinity = NaN\n      if ((this['isZero']() && z['isZero']()) || (this['isInfinite']() && z['isInfinite']())) {\n        return Complex['NAN'];\n      }\n\n      // Infinity / 0 = Infinity\n      if (this['isInfinite']() || z['isZero']()) {\n        return Complex['INFINITY'];\n      }\n\n      // 0 / Infinity = 0\n      if (this['isZero']() || z['isInfinite']()) {\n        return Complex['ZERO'];\n      }\n\n      a = this['re'];\n      b = this['im'];\n\n      var c = z['re'];\n      var d = z['im'];\n      var t, x;\n\n      if (0 === d) {\n        // Divisor is real\n        return new Complex(a / c, b / c);\n      }\n\n      if (Math.abs(c) < Math.abs(d)) {\n\n        x = c / d;\n        t = c * x + d;\n\n        return new Complex(\n          (a * x + b) / t,\n          (b * x - a) / t);\n\n      } else {\n\n        x = d / c;\n        t = d * x + c;\n\n        return new Complex(\n          (a + b * x) / t,\n          (b - a * x) / t);\n      }\n    },\n\n    /**\n     * Calculate the power of two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'pow': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      a = this['re'];\n      b = this['im'];\n\n      if (z['isZero']()) {\n        return Complex['ONE'];\n      }\n\n      // If the exponent is real\n      if (z['im'] === 0) {\n\n        if (b === 0 && a > 0) {\n\n          return new Complex(Math.pow(a, z['re']), 0);\n\n        } else if (a === 0) { // If base is fully imaginary\n\n          switch ((z['re'] % 4 + 4) % 4) {\n            case 0:\n              return new Complex(Math.pow(b, z['re']), 0);\n            case 1:\n              return new Complex(0, Math.pow(b, z['re']));\n            case 2:\n              return new Complex(-Math.pow(b, z['re']), 0);\n            case 3:\n              return new Complex(0, -Math.pow(b, z['re']));\n          }\n        }\n      }\n\n      /* I couldn't find a good formula, so here is a derivation and optimization\n       *\n       * z_1^z_2 = (a + bi)^(c + di)\n       *         = exp((c + di) * log(a + bi)\n       *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))\n       * =>...\n       * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\n       * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\n       *\n       * =>...\n       * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\n       * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\n       *\n       * =>\n       * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))\n       * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))\n       *\n       */\n\n      if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {\n        return Complex['ZERO'];\n      }\n\n      var arg = Math.atan2(b, a);\n      var loh = logHypot(a, b);\n\n      a = Math.exp(z['re'] * loh - z['im'] * arg);\n      b = z['im'] * loh + z['re'] * arg;\n      return new Complex(\n        a * Math.cos(b),\n        a * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex square root\n     *\n     * @returns {Complex}\n     */\n    'sqrt': function() {\n\n      var a = this['re'];\n      var b = this['im'];\n      var r = this['abs']();\n\n      var re, im;\n\n      if (a >= 0) {\n\n        if (b === 0) {\n          return new Complex(Math.sqrt(a), 0);\n        }\n\n        re = 0.5 * Math.sqrt(2.0 * (r + a));\n      } else {\n        re = Math.abs(b) / Math.sqrt(2 * (r - a));\n      }\n\n      if (a <= 0) {\n        im = 0.5 * Math.sqrt(2.0 * (r - a));\n      } else {\n        im = Math.abs(b) / Math.sqrt(2 * (r + a));\n      }\n\n      return new Complex(re, b < 0 ? -im : im);\n    },\n\n    /**\n     * Calculate the complex exponent\n     *\n     * @returns {Complex}\n     */\n    'exp': function() {\n\n      var tmp = Math.exp(this['re']);\n\n      if (this['im'] === 0) {\n        //return new Complex(tmp, 0);\n      }\n      return new Complex(\n        tmp * Math.cos(this['im']),\n        tmp * Math.sin(this['im']));\n    },\n\n    /**\n     * Calculate the complex exponent and subtracts one.\n     *\n     * This may be more accurate than `Complex(x).exp().sub(1)` if\n     * `x` is small.\n     *\n     * @returns {Complex}\n     */\n    'expm1': function() {\n\n      /**\n       * exp(a + i*b) - 1\n       = exp(a) * (cos(b) + j*sin(b)) - 1\n       = expm1(a)*cos(b) + cosm1(b) + j*exp(a)*sin(b)\n       */\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        Math.expm1(a) * Math.cos(b) + cosm1(b),\n        Math.exp(a) * Math.sin(b));\n    },\n\n    /**\n     * Calculate the natural log\n     *\n     * @returns {Complex}\n     */\n    'log': function() {\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0 && a > 0) {\n        //return new Complex(Math.log(a), 0);\n      }\n\n      return new Complex(\n        logHypot(a, b),\n        Math.atan2(b, a));\n    },\n\n    /**\n     * Calculate the magnitude of the complex number\n     *\n     * @returns {number}\n     */\n    'abs': function() {\n\n      return hypot(this['re'], this['im']);\n    },\n\n    /**\n     * Calculate the angle of the complex number\n     *\n     * @returns {number}\n     */\n    'arg': function() {\n\n      return Math.atan2(this['im'], this['re']);\n    },\n\n    /**\n     * Calculate the sine of the complex number\n     *\n     * @returns {Complex}\n     */\n    'sin': function() {\n\n      // sin(z) = ( e^iz - e^-iz ) / 2i \n      //        = sin(a)cosh(b) + i cos(a)sinh(b)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        Math.sin(a) * cosh(b),\n        Math.cos(a) * sinh(b));\n    },\n\n    /**\n     * Calculate the cosine\n     *\n     * @returns {Complex}\n     */\n    'cos': function() {\n\n      // cos(z) = ( e^iz + e^-iz ) / 2 \n      //        = cos(a)cosh(b) - i sin(a)sinh(b)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        Math.cos(a) * cosh(b),\n        -Math.sin(a) * sinh(b));\n    },\n\n    /**\n     * Calculate the tangent\n     *\n     * @returns {Complex}\n     */\n    'tan': function() {\n\n      // tan(z) = sin(z) / cos(z) \n      //        = ( e^iz - e^-iz ) / ( i( e^iz + e^-iz ) )\n      //        = ( e^2iz - 1 ) / i( e^2iz + 1 )\n      //        = ( sin(2a) + i sinh(2b) ) / ( cos(2a) + cosh(2b) )\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = Math.cos(a) + cosh(b);\n\n      return new Complex(\n        Math.sin(a) / d,\n        sinh(b) / d);\n    },\n\n    /**\n     * Calculate the cotangent\n     *\n     * @returns {Complex}\n     */\n    'cot': function() {\n\n      // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = Math.cos(a) - cosh(b);\n\n      return new Complex(\n        -Math.sin(a) / d,\n        sinh(b) / d);\n    },\n\n    /**\n     * Calculate the secant\n     *\n     * @returns {Complex}\n     */\n    'sec': function() {\n\n      // sec(c) = 2 / (e^(ci) + e^(-ci))\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);\n\n      return new Complex(\n        Math.cos(a) * cosh(b) / d,\n        Math.sin(a) * sinh(b) / d);\n    },\n\n    /**\n     * Calculate the cosecans\n     *\n     * @returns {Complex}\n     */\n    'csc': function() {\n\n      // csc(c) = 2i / (e^(ci) - e^(-ci))\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);\n\n      return new Complex(\n        Math.sin(a) * cosh(b) / d,\n        -Math.cos(a) * sinh(b) / d);\n    },\n\n    /**\n     * Calculate the complex arcus sinus\n     *\n     * @returns {Complex}\n     */\n    'asin': function() {\n\n      // asin(c) = -i * log(ci + sqrt(1 - c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var t1 = new Complex(\n        b * b - a * a + 1,\n        -2 * a * b)['sqrt']();\n\n      var t2 = new Complex(\n        t1['re'] - b,\n        t1['im'] + a)['log']();\n\n      return new Complex(t2['im'], -t2['re']);\n    },\n\n    /**\n     * Calculate the complex arcus cosinus\n     *\n     * @returns {Complex}\n     */\n    'acos': function() {\n\n      // acos(c) = i * log(c - i * sqrt(1 - c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var t1 = new Complex(\n        b * b - a * a + 1,\n        -2 * a * b)['sqrt']();\n\n      var t2 = new Complex(\n        t1['re'] - b,\n        t1['im'] + a)['log']();\n\n      return new Complex(Math.PI / 2 - t2['im'], t2['re']);\n    },\n\n    /**\n     * Calculate the complex arcus tangent\n     *\n     * @returns {Complex}\n     */\n    'atan': function() {\n\n      // atan(c) = i / 2 log((i + x) / (i - x))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0) {\n\n        if (b === 1) {\n          return new Complex(0, Infinity);\n        }\n\n        if (b === -1) {\n          return new Complex(0, -Infinity);\n        }\n      }\n\n      var d = a * a + (1.0 - b) * (1.0 - b);\n\n      var t1 = new Complex(\n        (1 - b * b - a * a) / d,\n        -2 * a / d).log();\n\n      return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);\n    },\n\n    /**\n     * Calculate the complex arcus cotangent\n     *\n     * @returns {Complex}\n     */\n    'acot': function() {\n\n      // acot(c) = i / 2 log((c - i) / (c + i))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0) {\n        return new Complex(Math.atan2(1, a), 0);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).atan()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).atan();\n    },\n\n    /**\n     * Calculate the complex arcus secant\n     *\n     * @returns {Complex}\n     */\n    'asec': function() {\n\n      // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(0, Infinity);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).acos()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).acos();\n    },\n\n    /**\n     * Calculate the complex arcus cosecans\n     *\n     * @returns {Complex}\n     */\n    'acsc': function() {\n\n      // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(Math.PI / 2, Infinity);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).asin()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).asin();\n    },\n\n    /**\n     * Calculate the complex sinh\n     *\n     * @returns {Complex}\n     */\n    'sinh': function() {\n\n      // sinh(c) = (e^c - e^-c) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        sinh(a) * Math.cos(b),\n        cosh(a) * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex cosh\n     *\n     * @returns {Complex}\n     */\n    'cosh': function() {\n\n      // cosh(c) = (e^c + e^-c) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        cosh(a) * Math.cos(b),\n        sinh(a) * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex tanh\n     *\n     * @returns {Complex}\n     */\n    'tanh': function() {\n\n      // tanh(c) = (e^c - e^-c) / (e^c + e^-c)\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = cosh(a) + Math.cos(b);\n\n      return new Complex(\n        sinh(a) / d,\n        Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex coth\n     *\n     * @returns {Complex}\n     */\n    'coth': function() {\n\n      // coth(c) = (e^c + e^-c) / (e^c - e^-c)\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = cosh(a) - Math.cos(b);\n\n      return new Complex(\n        sinh(a) / d,\n        -Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex coth\n     *\n     * @returns {Complex}\n     */\n    'csch': function() {\n\n      // csch(c) = 2 / (e^c - e^-c)\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = Math.cos(2 * b) - cosh(2 * a);\n\n      return new Complex(\n        -2 * sinh(a) * Math.cos(b) / d,\n        2 * cosh(a) * Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex sech\n     *\n     * @returns {Complex}\n     */\n    'sech': function() {\n\n      // sech(c) = 2 / (e^c + e^-c)\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = Math.cos(2 * b) + cosh(2 * a);\n\n      return new Complex(\n        2 * cosh(a) * Math.cos(b) / d,\n        -2 * sinh(a) * Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex asinh\n     *\n     * @returns {Complex}\n     */\n    'asinh': function() {\n\n      // asinh(c) = log(c + sqrt(c^2 + 1))\n\n      var tmp = this['im'];\n      this['im'] = -this['re'];\n      this['re'] = tmp;\n      var res = this['asin']();\n\n      this['re'] = -this['im'];\n      this['im'] = tmp;\n      tmp = res['re'];\n\n      res['re'] = -res['im'];\n      res['im'] = tmp;\n      return res;\n    },\n\n    /**\n     * Calculate the complex acosh\n     *\n     * @returns {Complex}\n     */\n    'acosh': function() {\n\n      // acosh(c) = log(c + sqrt(c^2 - 1))\n\n      var res = this['acos']();\n      if (res['im'] <= 0) {\n        var tmp = res['re'];\n        res['re'] = -res['im'];\n        res['im'] = tmp;\n      } else {\n        var tmp = res['im'];\n        res['im'] = -res['re'];\n        res['re'] = tmp;\n      }\n      return res;\n    },\n\n    /**\n     * Calculate the complex atanh\n     *\n     * @returns {Complex}\n     */\n    'atanh': function() {\n\n      // atanh(c) = log((1+c) / (1-c)) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var noIM = a > 1 && b === 0;\n      var oneMinus = 1 - a;\n      var onePlus = 1 + a;\n      var d = oneMinus * oneMinus + b * b;\n\n      var x = (d !== 0)\n        ? new Complex(\n          (onePlus * oneMinus - b * b) / d,\n          (b * oneMinus + onePlus * b) / d)\n        : new Complex(\n          (a !== -1) ? (a / 0) : 0,\n          (b !== 0) ? (b / 0) : 0);\n\n      var temp = x['re'];\n      x['re'] = logHypot(x['re'], x['im']) / 2;\n      x['im'] = Math.atan2(x['im'], temp) / 2;\n      if (noIM) {\n        x['im'] = -x['im'];\n      }\n      return x;\n    },\n\n    /**\n     * Calculate the complex acoth\n     *\n     * @returns {Complex}\n     */\n    'acoth': function() {\n\n      // acoth(c) = log((c+1) / (c-1)) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(0, Math.PI / 2);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).atanh()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).atanh();\n    },\n\n    /**\n     * Calculate the complex acsch\n     *\n     * @returns {Complex}\n     */\n    'acsch': function() {\n\n      // acsch(c) = log((1+sqrt(1+c^2))/c)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0) {\n\n        return new Complex(\n          (a !== 0)\n            ? Math.log(a + Math.sqrt(a * a + 1))\n            : Infinity, 0);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).asinh()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).asinh();\n    },\n\n    /**\n     * Calculate the complex asech\n     *\n     * @returns {Complex}\n     */\n    'asech': function() {\n\n      // asech(c) = log((1+sqrt(1-c^2))/c)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (this['isZero']()) {\n        return Complex['INFINITY'];\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).acosh()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).acosh();\n    },\n\n    /**\n     * Calculate the complex inverse 1/z\n     *\n     * @returns {Complex}\n     */\n    'inverse': function() {\n\n      // 1 / 0 = Infinity and 1 / Infinity = 0\n      if (this['isZero']()) {\n        return Complex['INFINITY'];\n      }\n\n      if (this['isInfinite']()) {\n        return Complex['ZERO'];\n      }\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var d = a * a + b * b;\n\n      return new Complex(a / d, -b / d);\n    },\n\n    /**\n     * Returns the complex conjugate\n     *\n     * @returns {Complex}\n     */\n    'conjugate': function() {\n\n      return new Complex(this['re'], -this['im']);\n    },\n\n    /**\n     * Gets the negated complex number\n     *\n     * @returns {Complex}\n     */\n    'neg': function() {\n\n      return new Complex(-this['re'], -this['im']);\n    },\n\n    /**\n     * Ceils the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'ceil': function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      return new Complex(\n        Math.ceil(this['re'] * places) / places,\n        Math.ceil(this['im'] * places) / places);\n    },\n\n    /**\n     * Floors the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'floor': function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      return new Complex(\n        Math.floor(this['re'] * places) / places,\n        Math.floor(this['im'] * places) / places);\n    },\n\n    /**\n     * Ceils the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'round': function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      return new Complex(\n        Math.round(this['re'] * places) / places,\n        Math.round(this['im'] * places) / places);\n    },\n\n    /**\n     * Compares two complex numbers\n     *\n     * **Note:** new Complex(Infinity).equals(Infinity) === false\n     *\n     * @returns {boolean}\n     */\n    'equals': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&\n        Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];\n    },\n\n    /**\n     * Clones the actual object\n     *\n     * @returns {Complex}\n     */\n    'clone': function() {\n\n      return new Complex(this['re'], this['im']);\n    },\n\n    /**\n     * Gets a string of the actual complex number\n     *\n     * @returns {string}\n     */\n    'toString': function() {\n\n      var a = this['re'];\n      var b = this['im'];\n      var ret = \"\";\n\n      if (this['isNaN']()) {\n        return 'NaN';\n      }\n\n      if (this['isInfinite']()) {\n        return 'Infinity';\n      }\n\n      if (Math.abs(a) < Complex['EPSILON']) {\n        a = 0;\n      }\n\n      if (Math.abs(b) < Complex['EPSILON']) {\n        b = 0;\n      }\n\n      // If is real number\n      if (b === 0) {\n        return ret + a;\n      }\n\n      if (a !== 0) {\n        ret += a;\n        ret += \" \";\n        if (b < 0) {\n          b = -b;\n          ret += \"-\";\n        } else {\n          ret += \"+\";\n        }\n        ret += \" \";\n      } else if (b < 0) {\n        b = -b;\n        ret += \"-\";\n      }\n\n      if (1 !== b) { // b is the absolute imaginary part\n        ret += b;\n      }\n      return ret + \"i\";\n    },\n\n    /**\n     * Returns the actual number as a vector\n     *\n     * @returns {Array}\n     */\n    'toVector': function() {\n\n      return [this['re'], this['im']];\n    },\n\n    /**\n     * Returns the actual real value of the current object\n     *\n     * @returns {number|null}\n     */\n    'valueOf': function() {\n\n      if (this['im'] === 0) {\n        return this['re'];\n      }\n      return null;\n    },\n\n    /**\n     * Determines whether a complex number is not on the Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isNaN': function() {\n      return isNaN(this['re']) || isNaN(this['im']);\n    },\n\n    /**\n     * Determines whether or not a complex number is at the zero pole of the\n     * Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isZero': function() {\n      return this['im'] === 0 && this['re'] === 0;\n    },\n\n    /**\n     * Determines whether a complex number is not at the infinity pole of the\n     * Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isFinite': function() {\n      return isFinite(this['re']) && isFinite(this['im']);\n    },\n\n    /**\n     * Determines whether or not a complex number is at the infinity pole of the\n     * Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isInfinite': function() {\n      return !(this['isNaN']() || this['isFinite']());\n    }\n  };\n\n  Complex['ZERO'] = new Complex(0, 0);\n  Complex['ONE'] = new Complex(1, 0);\n  Complex['I'] = new Complex(0, 1);\n  Complex['PI'] = new Complex(Math.PI, 0);\n  Complex['E'] = new Complex(Math.E, 0);\n  Complex['INFINITY'] = new Complex(Infinity, Infinity);\n  Complex['NAN'] = new Complex(NaN, NaN);\n  Complex['EPSILON'] = 1e-15;\n\n  if (typeof define === 'function' && define['amd']) {\n    define([], function() {\n      return Complex;\n    });\n  } else if (typeof exports === 'object') {\n    Object.defineProperty(Complex, \"__esModule\", { 'value': true });\n    Complex['default'] = Complex;\n    Complex['Complex'] = Complex;\n    module['exports'] = Complex;\n  } else {\n    root['Complex'] = Complex;\n  }\n\n})(this);\n","import Complex from 'complex.js';\nimport { format } from '../../utils/number.js';\nimport { isNumber, isUnit } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Complex';\nvar dependencies = [];\nexport var createComplexClass = /* #__PURE__ */factory(name, dependencies, () => {\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(Complex, 'name', {\n    value: 'Complex'\n  });\n  Complex.prototype.constructor = Complex;\n  Complex.prototype.type = 'Complex';\n  Complex.prototype.isComplex = true;\n  /**\n   * Get a JSON representation of the complex number\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}`\n   */\n\n  Complex.prototype.toJSON = function () {\n    return {\n      mathjs: 'Complex',\n      re: this.re,\n      im: this.im\n    };\n  };\n  /*\n   * Return the value of the complex number in polar notation\n   * The angle phi will be set in the interval of [-pi, pi].\n   * @return {{r: number, phi: number}} Returns and object with properties r and phi.\n   */\n\n\n  Complex.prototype.toPolar = function () {\n    return {\n      r: this.abs(),\n      phi: this.arg()\n    };\n  };\n  /**\n   * Get a string representation of the complex number,\n   * with optional formatting options.\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string} str\n   */\n\n\n  Complex.prototype.format = function (options) {\n    var str = '';\n    var im = this.im;\n    var re = this.re;\n    var strRe = format(this.re, options);\n    var strIm = format(this.im, options); // round either re or im when smaller than the configured precision\n\n    var precision = isNumber(options) ? options : options ? options.precision : null;\n\n    if (precision !== null) {\n      var epsilon = Math.pow(10, -precision);\n\n      if (Math.abs(re / im) < epsilon) {\n        re = 0;\n      }\n\n      if (Math.abs(im / re) < epsilon) {\n        im = 0;\n      }\n    }\n\n    if (im === 0) {\n      // real value\n      str = strRe;\n    } else if (re === 0) {\n      // purely complex value\n      if (im === 1) {\n        str = 'i';\n      } else if (im === -1) {\n        str = '-i';\n      } else {\n        str = strIm + 'i';\n      }\n    } else {\n      // complex value\n      if (im < 0) {\n        if (im === -1) {\n          str = strRe + ' - i';\n        } else {\n          str = strRe + ' - ' + strIm.substring(1) + 'i';\n        }\n      } else {\n        if (im === 1) {\n          str = strRe + ' + i';\n        } else {\n          str = strRe + ' + ' + strIm + 'i';\n        }\n      }\n    }\n\n    return str;\n  };\n  /**\n   * Create a complex number from polar coordinates\n   *\n   * Usage:\n   *\n   *     Complex.fromPolar(r: number, phi: number) : Complex\n   *     Complex.fromPolar({r: number, phi: number}) : Complex\n   *\n   * @param {*} args...\n   * @return {Complex}\n   */\n\n\n  Complex.fromPolar = function (args) {\n    switch (arguments.length) {\n      case 1:\n        {\n          var arg = arguments[0];\n\n          if (typeof arg === 'object') {\n            return Complex(arg);\n          } else {\n            throw new TypeError('Input has to be an object with r and phi keys.');\n          }\n        }\n\n      case 2:\n        {\n          var r = arguments[0];\n          var phi = arguments[1];\n\n          if (isNumber(r)) {\n            if (isUnit(phi) && phi.hasBase('ANGLE')) {\n              // convert unit to a number in radians\n              phi = phi.toNumber('rad');\n            }\n\n            if (isNumber(phi)) {\n              return new Complex({\n                r,\n                phi\n              });\n            }\n\n            throw new TypeError('Phi is not a number nor an angle unit.');\n          } else {\n            throw new TypeError('Radius r is not a number.');\n          }\n        }\n\n      default:\n        throw new SyntaxError('Wrong number of arguments in function fromPolar');\n    }\n  };\n\n  Complex.prototype.valueOf = Complex.prototype.toString;\n  /**\n   * Create a Complex number from a JSON object\n   * @param {Object} json  A JSON Object structured as\n   *                       {\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}\n   *                       All properties are optional, default values\n   *                       for `re` and `im` are 0.\n   * @return {Complex} Returns a new Complex number\n   */\n\n  Complex.fromJSON = function (json) {\n    return new Complex(json);\n  };\n  /**\n   * Compare two complex numbers, `a` and `b`:\n   *\n   * - Returns 1 when the real part of `a` is larger than the real part of `b`\n   * - Returns -1 when the real part of `a` is smaller than the real part of `b`\n   * - Returns 1 when the real parts are equal\n   *   and the imaginary part of `a` is larger than the imaginary part of `b`\n   * - Returns -1 when the real parts are equal\n   *   and the imaginary part of `a` is smaller than the imaginary part of `b`\n   * - Returns 0 when both real and imaginary parts are equal.\n   *\n   * @params {Complex} a\n   * @params {Complex} b\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n\n\n  Complex.compare = function (a, b) {\n    if (a.re > b.re) {\n      return 1;\n    }\n\n    if (a.re < b.re) {\n      return -1;\n    }\n\n    if (a.im > b.im) {\n      return 1;\n    }\n\n    if (a.im < b.im) {\n      return -1;\n    }\n\n    return 0;\n  };\n\n  return Complex;\n}, {\n  isClass: true\n});","/**\n * @license Fraction.js v4.2.0 05/03/2022\n * https://www.xarg.org/2014/03/rational-numbers-in-javascript/\n *\n * Copyright (c) 2021, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n\n/**\n *\n * This class offers the possibility to calculate fractions.\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\n *\n * Array/Object form\n * [ 0 => <nominator>, 1 => <denominator> ]\n * [ n => <nominator>, d => <denominator> ]\n *\n * Integer form\n * - Single integer value\n *\n * Double form\n * - Single double value\n *\n * String form\n * 123.456 - a simple double\n * 123/456 - a string fraction\n * 123.'456' - a double with repeating decimal places\n * 123.(456) - synonym\n * 123.45'6' - a double with repeating last place\n * 123.45(6) - synonym\n *\n * Example:\n *\n * var f = new Fraction(\"9.4'31'\");\n * f.mul([-4, 3]).div(4.9);\n *\n */\n\n(function(root) {\n\n  \"use strict\";\n\n  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\n  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.\n  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\n  var MAX_CYCLE_LEN = 2000;\n\n  // Parsed data to avoid calling \"new\" all the time\n  var P = {\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1\n  };\n\n  function assign(n, s) {\n\n    if (isNaN(n = parseInt(n, 10))) {\n      throw Fraction['InvalidParameter'];\n    }\n    return n * s;\n  }\n\n  // Creates a new Fraction internally without the need of the bulky constructor\n  function newFraction(n, d) {\n\n    if (d === 0) {\n      throw Fraction['DivisionByZero'];\n    }\n\n    var f = Object.create(Fraction.prototype);\n    f[\"s\"] = n < 0 ? -1 : 1;\n\n    n = n < 0 ? -n : n;\n\n    var a = gcd(n, d);\n\n    f[\"n\"] = n / a;\n    f[\"d\"] = d / a;\n    return f;\n  }\n\n  function factorize(num) {\n\n    var factors = {};\n\n    var n = num;\n    var i = 2;\n    var s = 4;\n\n    while (s <= n) {\n\n      while (n % i === 0) {\n        n/= i;\n        factors[i] = (factors[i] || 0) + 1;\n      }\n      s+= 1 + 2 * i++;\n    }\n\n    if (n !== num) {\n      if (n > 1)\n        factors[n] = (factors[n] || 0) + 1;\n    } else {\n      factors[num] = (factors[num] || 0) + 1;\n    }\n    return factors;\n  }\n\n  var parse = function(p1, p2) {\n\n    var n = 0, d = 1, s = 1;\n    var v = 0, w = 0, x = 0, y = 1, z = 1;\n\n    var A = 0, B = 1;\n    var C = 1, D = 1;\n\n    var N = 10000000;\n    var M;\n\n    if (p1 === undefined || p1 === null) {\n      /* void */\n    } else if (p2 !== undefined) {\n      n = p1;\n      d = p2;\n      s = n * d;\n\n      if (n % 1 !== 0 || d % 1 !== 0) {\n        throw Fraction['NonIntegerParameter'];\n      }\n\n    } else\n      switch (typeof p1) {\n\n        case \"object\":\n          {\n            if (\"d\" in p1 && \"n\" in p1) {\n              n = p1[\"n\"];\n              d = p1[\"d\"];\n              if (\"s\" in p1)\n                n*= p1[\"s\"];\n            } else if (0 in p1) {\n              n = p1[0];\n              if (1 in p1)\n                d = p1[1];\n            } else {\n              throw Fraction['InvalidParameter'];\n            }\n            s = n * d;\n            break;\n          }\n        case \"number\":\n          {\n            if (p1 < 0) {\n              s = p1;\n              p1 = -p1;\n            }\n\n            if (p1 % 1 === 0) {\n              n = p1;\n            } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow\n\n              if (p1 >= 1) {\n                z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));\n                p1/= z;\n              }\n\n              // Using Farey Sequences\n              // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/\n\n              while (B <= N && D <= N) {\n                M = (A + C) / (B + D);\n\n                if (p1 === M) {\n                  if (B + D <= N) {\n                    n = A + C;\n                    d = B + D;\n                  } else if (D > B) {\n                    n = C;\n                    d = D;\n                  } else {\n                    n = A;\n                    d = B;\n                  }\n                  break;\n\n                } else {\n\n                  if (p1 > M) {\n                    A+= C;\n                    B+= D;\n                  } else {\n                    C+= A;\n                    D+= B;\n                  }\n\n                  if (B > N) {\n                    n = C;\n                    d = D;\n                  } else {\n                    n = A;\n                    d = B;\n                  }\n                }\n              }\n              n*= z;\n            } else if (isNaN(p1) || isNaN(p2)) {\n              d = n = NaN;\n            }\n            break;\n          }\n        case \"string\":\n          {\n            B = p1.match(/\\d+|./g);\n\n            if (B === null)\n              throw Fraction['InvalidParameter'];\n\n            if (B[A] === '-') {// Check for minus sign at the beginning\n              s = -1;\n              A++;\n            } else if (B[A] === '+') {// Check for plus sign at the beginning\n              A++;\n            }\n\n            if (B.length === A + 1) { // Check if it's just a simple number \"1234\"\n              w = assign(B[A++], s);\n            } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number\n\n              if (B[A] !== '.') { // Handle 0.5 and .5\n                v = assign(B[A++], s);\n              }\n              A++;\n\n              // Check for decimal places\n              if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === \"'\" && B[A + 3] === \"'\") {\n                w = assign(B[A], s);\n                y = Math.pow(10, B[A].length);\n                A++;\n              }\n\n              // Check for repeating places\n              if (B[A] === '(' && B[A + 2] === ')' || B[A] === \"'\" && B[A + 2] === \"'\") {\n                x = assign(B[A + 1], s);\n                z = Math.pow(10, B[A + 1].length) - 1;\n                A+= 3;\n              }\n\n            } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction \"123/456\" or \"123:456\"\n              w = assign(B[A], s);\n              y = assign(B[A + 2], 1);\n              A+= 3;\n            } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction \"123 1/2\"\n              v = assign(B[A], s);\n              w = assign(B[A + 2], s);\n              y = assign(B[A + 4], 1);\n              A+= 5;\n            }\n\n            if (B.length <= A) { // Check for more tokens on the stack\n              d = y * z;\n              s = /* void */\n              n = x + d * v + z * w;\n              break;\n            }\n\n            /* Fall through on error */\n          }\n        default:\n          throw Fraction['InvalidParameter'];\n      }\n\n    if (d === 0) {\n      throw Fraction['DivisionByZero'];\n    }\n\n    P[\"s\"] = s < 0 ? -1 : 1;\n    P[\"n\"] = Math.abs(n);\n    P[\"d\"] = Math.abs(d);\n  };\n\n  function modpow(b, e, m) {\n\n    var r = 1;\n    for (; e > 0; b = (b * b) % m, e >>= 1) {\n\n      if (e & 1) {\n        r = (r * b) % m;\n      }\n    }\n    return r;\n  }\n\n\n  function cycleLen(n, d) {\n\n    for (; d % 2 === 0;\n      d/= 2) {\n    }\n\n    for (; d % 5 === 0;\n      d/= 5) {\n    }\n\n    if (d === 1) // Catch non-cyclic numbers\n      return 0;\n\n    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\n    // 10^(d-1) % d == 1\n    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\n    // as we want to translate the numbers to strings.\n\n    var rem = 10 % d;\n    var t = 1;\n\n    for (; rem !== 1; t++) {\n      rem = rem * 10 % d;\n\n      if (t > MAX_CYCLE_LEN)\n        return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\n    }\n    return t;\n  }\n\n\n  function cycleStart(n, d, len) {\n\n    var rem1 = 1;\n    var rem2 = modpow(10, len, d);\n\n    for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)\n      // Solve 10^s == 10^(s+t) (mod d)\n\n      if (rem1 === rem2)\n        return t;\n\n      rem1 = rem1 * 10 % d;\n      rem2 = rem2 * 10 % d;\n    }\n    return 0;\n  }\n\n  function gcd(a, b) {\n\n    if (!a)\n      return b;\n    if (!b)\n      return a;\n\n    while (1) {\n      a%= b;\n      if (!a)\n        return b;\n      b%= a;\n      if (!b)\n        return a;\n    }\n  };\n\n  /**\n   * Module constructor\n   *\n   * @constructor\n   * @param {number|Fraction=} a\n   * @param {number=} b\n   */\n  function Fraction(a, b) {\n\n    parse(a, b);\n\n    if (this instanceof Fraction) {\n      a = gcd(P[\"d\"], P[\"n\"]); // Abuse variable a\n      this[\"s\"] = P[\"s\"];\n      this[\"n\"] = P[\"n\"] / a;\n      this[\"d\"] = P[\"d\"] / a;\n    } else {\n      return newFraction(P['s'] * P['n'], P['d']);\n    }\n  }\n\n  Fraction['DivisionByZero'] = new Error(\"Division by Zero\");\n  Fraction['InvalidParameter'] = new Error(\"Invalid argument\");\n  Fraction['NonIntegerParameter'] = new Error(\"Parameters must be integer\");\n\n  Fraction.prototype = {\n\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1,\n\n    /**\n     * Calculates the absolute value\n     *\n     * Ex: new Fraction(-4).abs() => 4\n     **/\n    \"abs\": function() {\n\n      return newFraction(this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Inverts the sign of the current fraction\n     *\n     * Ex: new Fraction(-4).neg() => 4\n     **/\n    \"neg\": function() {\n\n      return newFraction(-this[\"s\"] * this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Adds two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\n     **/\n    \"add\": function(a, b) {\n\n      parse(a, b);\n      return newFraction(\n        this[\"s\"] * this[\"n\"] * P[\"d\"] + P[\"s\"] * this[\"d\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Subtracts two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\n     **/\n    \"sub\": function(a, b) {\n\n      parse(a, b);\n      return newFraction(\n        this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * this[\"d\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Multiplies two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\n     **/\n    \"mul\": function(a, b) {\n\n      parse(a, b);\n      return newFraction(\n        this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Divides two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\n     **/\n    \"div\": function(a, b) {\n\n      parse(a, b);\n      return newFraction(\n        this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"d\"],\n        this[\"d\"] * P[\"n\"]\n      );\n    },\n\n    /**\n     * Clones the actual object\n     *\n     * Ex: new Fraction(\"-17.(345)\").clone()\n     **/\n    \"clone\": function() {\n      return newFraction(this['s'] * this['n'], this['d']);\n    },\n\n    /**\n     * Calculates the modulo of two rational numbers - a more precise fmod\n     *\n     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\n     **/\n    \"mod\": function(a, b) {\n\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return new Fraction(NaN);\n      }\n\n      if (a === undefined) {\n        return newFraction(this[\"s\"] * this[\"n\"] % this[\"d\"], 1);\n      }\n\n      parse(a, b);\n      if (0 === P[\"n\"] && 0 === this[\"d\"]) {\n        throw Fraction['DivisionByZero'];\n      }\n\n      /*\n       * First silly attempt, kinda slow\n       *\n       return that[\"sub\"]({\n       \"n\": num[\"n\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\n       \"d\": num[\"d\"],\n       \"s\": this[\"s\"]\n       });*/\n\n      /*\n       * New attempt: a1 / b1 = a2 / b2 * q + r\n       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\n       * => (b2 * a1 % a2 * b1) / (b1 * b2)\n       */\n      return newFraction(\n        this[\"s\"] * (P[\"d\"] * this[\"n\"]) % (P[\"n\"] * this[\"d\"]),\n        P[\"d\"] * this[\"d\"]\n      );\n    },\n\n    /**\n     * Calculates the fractional gcd of two rational numbers\n     *\n     * Ex: new Fraction(5,8).gcd(3,7) => 1/56\n     */\n    \"gcd\": function(a, b) {\n\n      parse(a, b);\n\n      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\n\n      return newFraction(gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]), P[\"d\"] * this[\"d\"]);\n    },\n\n    /**\n     * Calculates the fractional lcm of two rational numbers\n     *\n     * Ex: new Fraction(5,8).lcm(3,7) => 15\n     */\n    \"lcm\": function(a, b) {\n\n      parse(a, b);\n\n      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\n\n      if (P[\"n\"] === 0 && this[\"n\"] === 0) {\n        return newFraction(0, 1);\n      }\n      return newFraction(P[\"n\"] * this[\"n\"], gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]));\n    },\n\n    /**\n     * Calculates the ceil of a rational number\n     *\n     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\n     **/\n    \"ceil\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return newFraction(Math.ceil(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Calculates the floor of a rational number\n     *\n     * Ex: new Fraction('4.(3)').floor() => (4 / 1)\n     **/\n    \"floor\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return newFraction(Math.floor(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Rounds a rational numbers\n     *\n     * Ex: new Fraction('4.(3)').round() => (4 / 1)\n     **/\n    \"round\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return newFraction(Math.round(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Gets the inverse of the fraction, means numerator and denominator are exchanged\n     *\n     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\n     **/\n    \"inverse\": function() {\n\n      return newFraction(this[\"s\"] * this[\"d\"], this[\"n\"]);\n    },\n\n    /**\n     * Calculates the fraction to some rational exponent, if possible\n     *\n     * Ex: new Fraction(-1,2).pow(-3) => -8\n     */\n    \"pow\": function(a, b) {\n\n      parse(a, b);\n\n      // Trivial case when exp is an integer\n\n      if (P['d'] === 1) {\n\n        if (P['s'] < 0) {\n          return newFraction(Math.pow(this['s'] * this[\"d\"], P['n']), Math.pow(this[\"n\"], P['n']));\n        } else {\n          return newFraction(Math.pow(this['s'] * this[\"n\"], P['n']), Math.pow(this[\"d\"], P['n']));\n        }\n      }\n\n      // Negative roots become complex\n      //     (-a/b)^(c/d) = x\n      // <=> (-1)^(c/d) * (a/b)^(c/d) = x\n      // <=> (cos(pi) + i*sin(pi))^(c/d) * (a/b)^(c/d) = x         # rotate 1 by 180°\n      // <=> (cos(c*pi/d) + i*sin(c*pi/d)) * (a/b)^(c/d) = x       # DeMoivre's formula in Q ( https://proofwiki.org/wiki/De_Moivre%27s_Formula/Rational_Index )\n      // From which follows that only for c=0 the root is non-complex. c/d is a reduced fraction, so that sin(c/dpi)=0 occurs for d=1, which is handled by our trivial case.\n      if (this['s'] < 0) return null;\n\n      // Now prime factor n and d\n      var N = factorize(this['n']);\n      var D = factorize(this['d']);\n\n      // Exponentiate and take root for n and d individually\n      var n = 1;\n      var d = 1;\n      for (var k in N) {\n        if (k === '1') continue;\n        if (k === '0') {\n          n = 0;\n          break;\n        }\n        N[k]*= P['n'];\n\n        if (N[k] % P['d'] === 0) {\n          N[k]/= P['d'];\n        } else return null;\n        n*= Math.pow(k, N[k]);\n      }\n\n      for (var k in D) {\n        if (k === '1') continue;\n        D[k]*= P['n'];\n\n        if (D[k] % P['d'] === 0) {\n          D[k]/= P['d'];\n        } else return null;\n        d*= Math.pow(k, D[k]);\n      }\n\n      if (P['s'] < 0) {\n        return newFraction(d, n);\n      }\n      return newFraction(n, d);\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"equals\": function(a, b) {\n\n      parse(a, b);\n      return this[\"s\"] * this[\"n\"] * P[\"d\"] === P[\"s\"] * P[\"n\"] * this[\"d\"]; // Same as compare() === 0\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"compare\": function(a, b) {\n\n      parse(a, b);\n      var t = (this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * P[\"n\"] * this[\"d\"]);\n      return (0 < t) - (t < 0);\n    },\n\n    \"simplify\": function(eps) {\n\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return this;\n      }\n\n      eps = eps || 0.001;\n\n      var thisABS = this['abs']();\n      var cont = thisABS['toContinued']();\n\n      for (var i = 1; i < cont.length; i++) {\n\n        var s = newFraction(cont[i - 1], 1);\n        for (var k = i - 2; k >= 0; k--) {\n          s = s['inverse']()['add'](cont[k]);\n        }\n\n        if (s['sub'](thisABS)['abs']().valueOf() < eps) {\n          return s['mul'](this['s']);\n        }\n      }\n      return this;\n    },\n\n    /**\n     * Check if two rational numbers are divisible\n     *\n     * Ex: new Fraction(19.6).divisible(1.5);\n     */\n    \"divisible\": function(a, b) {\n\n      parse(a, b);\n      return !(!(P[\"n\"] * this[\"d\"]) || ((this[\"n\"] * P[\"d\"]) % (P[\"n\"] * this[\"d\"])));\n    },\n\n    /**\n     * Returns a decimal representation of the fraction\n     *\n     * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\n     **/\n    'valueOf': function() {\n\n      return this[\"s\"] * this[\"n\"] / this[\"d\"];\n    },\n\n    /**\n     * Returns a string-fraction representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toFraction(true) => \"4 1/3\"\n     **/\n    'toFraction': function(excludeWhole) {\n\n      var whole, str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n      if (this[\"s\"] < 0) {\n        str+= '-';\n      }\n\n      if (d === 1) {\n        str+= n;\n      } else {\n\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str+= whole;\n          str+= \" \";\n          n%= d;\n        }\n\n        str+= n;\n        str+= '/';\n        str+= d;\n      }\n      return str;\n    },\n\n    /**\n     * Returns a latex representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\n     **/\n    'toLatex': function(excludeWhole) {\n\n      var whole, str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n      if (this[\"s\"] < 0) {\n        str+= '-';\n      }\n\n      if (d === 1) {\n        str+= n;\n      } else {\n\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str+= whole;\n          n%= d;\n        }\n\n        str+= \"\\\\frac{\";\n        str+= n;\n        str+= '}{';\n        str+= d;\n        str+= '}';\n      }\n      return str;\n    },\n\n    /**\n     * Returns an array of continued fraction elements\n     *\n     * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\n     */\n    'toContinued': function() {\n\n      var t;\n      var a = this['n'];\n      var b = this['d'];\n      var res = [];\n\n      if (isNaN(a) || isNaN(b)) {\n        return res;\n      }\n\n      do {\n        res.push(Math.floor(a / b));\n        t = a % b;\n        a = b;\n        b = t;\n      } while (a !== 1);\n\n      return res;\n    },\n\n    /**\n     * Creates a string representation of a fraction with all digits\n     *\n     * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\n     **/\n    'toString': function(dec) {\n\n      var N = this[\"n\"];\n      var D = this[\"d\"];\n\n      if (isNaN(N) || isNaN(D)) {\n        return \"NaN\";\n      }\n\n      dec = dec || 15; // 15 = decimal places when no repetation\n\n      var cycLen = cycleLen(N, D); // Cycle length\n      var cycOff = cycleStart(N, D, cycLen); // Cycle start\n\n      var str = this['s'] < 0 ? \"-\" : \"\";\n\n      str+= N / D | 0;\n\n      N%= D;\n      N*= 10;\n\n      if (N)\n        str+= \".\";\n\n      if (cycLen) {\n\n        for (var i = cycOff; i--;) {\n          str+= N / D | 0;\n          N%= D;\n          N*= 10;\n        }\n        str+= \"(\";\n        for (var i = cycLen; i--;) {\n          str+= N / D | 0;\n          N%= D;\n          N*= 10;\n        }\n        str+= \")\";\n      } else {\n        for (var i = dec; N && i--;) {\n          str+= N / D | 0;\n          N%= D;\n          N*= 10;\n        }\n      }\n      return str;\n    }\n  };\n\n  if (typeof define === \"function\" && define[\"amd\"]) {\n    define([], function() {\n      return Fraction;\n    });\n  } else if (typeof exports === \"object\") {\n    Object.defineProperty(Fraction, \"__esModule\", { 'value': true });\n    Fraction['default'] = Fraction;\n    Fraction['Fraction'] = Fraction;\n    module['exports'] = Fraction;\n  } else {\n    root['Fraction'] = Fraction;\n  }\n\n})(this);\n","import Fraction from 'fraction.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Fraction';\nvar dependencies = [];\nexport var createFractionClass = /* #__PURE__ */factory(name, dependencies, () => {\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(Fraction, 'name', {\n    value: 'Fraction'\n  });\n  Fraction.prototype.constructor = Fraction;\n  Fraction.prototype.type = 'Fraction';\n  Fraction.prototype.isFraction = true;\n  /**\n   * Get a JSON representation of a Fraction containing type information\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Fraction\", \"n\": 3, \"d\": 8}`\n   */\n\n  Fraction.prototype.toJSON = function () {\n    return {\n      mathjs: 'Fraction',\n      n: this.s * this.n,\n      d: this.d\n    };\n  };\n  /**\n   * Instantiate a Fraction from a JSON object\n   * @param {Object} json  a JSON object structured as:\n   *                       `{\"mathjs\": \"Fraction\", \"n\": 3, \"d\": 8}`\n   * @return {BigNumber}\n   */\n\n\n  Fraction.fromJSON = function (json) {\n    return new Fraction(json);\n  };\n\n  return Fraction;\n}, {\n  isClass: true\n});","import { factory } from '../../utils/factory.js';\nvar name = 'Matrix';\nvar dependencies = [];\nexport var createMatrixClass = /* #__PURE__ */factory(name, dependencies, () => {\n  /**\n   * @constructor Matrix\n   *\n   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional\n   * array. A matrix can be constructed as:\n   *\n   *     let matrix = math.matrix(data)\n   *\n   * Matrix contains the functions to resize, get and set values, get the size,\n   * clone the matrix and to convert the matrix to a vector, array, or scalar.\n   * Furthermore, one can iterate over the matrix using map and forEach.\n   * The internal Array of the Matrix can be accessed using the function valueOf.\n   *\n   * Example usage:\n   *\n   *     let matrix = math.matrix([[1, 2], [3, 4]])\n   *     matix.size()              // [2, 2]\n   *     matrix.resize([3, 2], 5)\n   *     matrix.valueOf()          // [[1, 2], [3, 4], [5, 5]]\n   *     matrix.subset([1,2])       // 3 (indexes are zero-based)\n   *\n   */\n  function Matrix() {\n    if (!(this instanceof Matrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Matrix.prototype.type = 'Matrix';\n  Matrix.prototype.isMatrix = true;\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()   // retrieve storage format\n   *\n   * @return {string}           The storage format.\n   */\n\n  Matrix.prototype.storage = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke storage on a Matrix interface');\n  };\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()    // retrieve matrix datatype\n   *\n   * @return {string}           The datatype.\n   */\n\n\n  Matrix.prototype.datatype = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke datatype on a Matrix interface');\n  };\n  /**\n   * Create a new Matrix With the type of the current matrix instance\n   * @param {Array | Object} data\n   * @param {string} [datatype]\n   */\n\n\n  Matrix.prototype.create = function (data, datatype) {\n    throw new Error('Cannot invoke create on a Matrix interface');\n  };\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n\n\n  Matrix.prototype.subset = function (index, replacement, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke subset on a Matrix interface');\n  };\n  /**\n   * Get a single element from the matrix.\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n\n\n  Matrix.prototype.get = function (index) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke get on a Matrix interface');\n  };\n  /**\n   * Replace a single element in the matrix.\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {Matrix} self\n   */\n\n\n  Matrix.prototype.set = function (index, value, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke set on a Matrix interface');\n  };\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n\n\n  Matrix.prototype.resize = function (size, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke resize on a Matrix interface');\n  };\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n\n\n  Matrix.prototype.reshape = function (size, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke reshape on a Matrix interface');\n  };\n  /**\n   * Create a clone of the matrix\n   * @return {Matrix} clone\n   */\n\n\n  Matrix.prototype.clone = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke clone on a Matrix interface');\n  };\n  /**\n   * Retrieve the size of the matrix.\n   * @returns {number[]} size\n   */\n\n\n  Matrix.prototype.size = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke size on a Matrix interface');\n  };\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *\n   * @return {Matrix} matrix\n   */\n\n\n  Matrix.prototype.map = function (callback, skipZeros) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke map on a Matrix interface');\n  };\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   */\n\n\n  Matrix.prototype.forEach = function (callback) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke forEach on a Matrix interface');\n  };\n  /**\n   * Iterate over the matrix elements\n   * @return {Iterable<{ value, index: number[] }>}\n   */\n\n\n  Matrix.prototype[Symbol.iterator] = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot iterate a Matrix interface');\n  };\n  /**\n   * Create an Array with a copy of the data of the Matrix\n   * @returns {Array} array\n   */\n\n\n  Matrix.prototype.toArray = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke toArray on a Matrix interface');\n  };\n  /**\n   * Get the primitive value of the Matrix: a multidimensional array\n   * @returns {Array} array\n   */\n\n\n  Matrix.prototype.valueOf = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke valueOf on a Matrix interface');\n  };\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n\n\n  Matrix.prototype.format = function (options) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke format on a Matrix interface');\n  };\n  /**\n   * Get a string representation of the matrix\n   * @returns {string} str\n   */\n\n\n  Matrix.prototype.toString = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke toString on a Matrix interface');\n  };\n\n  return Matrix;\n}, {\n  isClass: true\n});","import { isArray, isBigNumber, isCollection, isIndex, isMatrix, isNumber, isString, typeOf } from '../../utils/is.js';\nimport { arraySize, getArrayDataType, processSizesWildcard, reshape, resize, unsqueeze, validate, validateIndex } from '../../utils/array.js';\nimport { format } from '../../utils/string.js';\nimport { isInteger } from '../../utils/number.js';\nimport { clone, deepStrictEqual } from '../../utils/object.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { factory } from '../../utils/factory.js';\nimport { maxArgumentCount } from '../../utils/function.js';\nvar name = 'DenseMatrix';\nvar dependencies = ['Matrix'];\nexport var createDenseMatrixClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Matrix\n  } = _ref;\n\n  /**\n   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.\n   * @class DenseMatrix\n   * @enum {{ value, index: number[] }}\n   */\n  function DenseMatrix(data, datatype) {\n    if (!(this instanceof DenseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n\n    if (isMatrix(data)) {\n      // check data is a DenseMatrix\n      if (data.type === 'DenseMatrix') {\n        // clone data & size\n        this._data = clone(data._data);\n        this._size = clone(data._size);\n        this._datatype = datatype || data._datatype;\n      } else {\n        // build data from existing matrix\n        this._data = data.toArray();\n        this._size = data.size();\n        this._datatype = datatype || data._datatype;\n      }\n    } else if (data && isArray(data.data) && isArray(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size; // verify the dimensions of the array\n\n      validate(this._data, this._size);\n      this._datatype = datatype || data.datatype;\n    } else if (isArray(data)) {\n      // replace nested Matrices with Arrays\n      this._data = preprocess(data); // get the dimensions of the array\n\n      this._size = arraySize(this._data); // verify the dimensions of the array, TODO: compute size while processing array\n\n      validate(this._data, this._size); // data type unknown\n\n      this._datatype = datatype;\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');\n    } else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n    }\n  }\n\n  DenseMatrix.prototype = new Matrix();\n  /**\n   * Create a new DenseMatrix\n   */\n\n  DenseMatrix.prototype.createDenseMatrix = function (data, datatype) {\n    return new DenseMatrix(data, datatype);\n  };\n  /**\n   * Attach type information\n   */\n\n\n  Object.defineProperty(DenseMatrix, 'name', {\n    value: 'DenseMatrix'\n  });\n  DenseMatrix.prototype.constructor = DenseMatrix;\n  DenseMatrix.prototype.type = 'DenseMatrix';\n  DenseMatrix.prototype.isDenseMatrix = true;\n  /**\n   * Get the matrix type\n   *\n   * Usage:\n   *    const matrixType = matrix.getDataType()  // retrieves the matrix type\n   *\n   * @memberOf DenseMatrix\n   * @return {string}   type information; if multiple types are found from the Matrix, it will return \"mixed\"\n   */\n\n  DenseMatrix.prototype.getDataType = function () {\n    return getArrayDataType(this._data, typeOf);\n  };\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()  // retrieve storage format\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The storage format.\n   */\n\n\n  DenseMatrix.prototype.storage = function () {\n    return 'dense';\n  };\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()   // retrieve matrix datatype\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The datatype.\n   */\n\n\n  DenseMatrix.prototype.datatype = function () {\n    return this._datatype;\n  };\n  /**\n   * Create a new DenseMatrix\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {string} [datatype]\n   */\n\n\n  DenseMatrix.prototype.create = function (data, datatype) {\n    return new DenseMatrix(data, datatype);\n  };\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @memberof DenseMatrix\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n\n\n  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {\n    switch (arguments.length) {\n      case 1:\n        return _get(this, index);\n      // intentional fall through\n\n      case 2:\n      case 3:\n        return _set(this, index, replacement, defaultValue);\n\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n  /**\n   * Get a single element from the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n\n\n  DenseMatrix.prototype.get = function (index) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n\n    if (index.length !== this._size.length) {\n      throw new DimensionError(index.length, this._size.length);\n    } // check index\n\n\n    for (var x = 0; x < index.length; x++) {\n      validateIndex(index[x], this._size[x]);\n    }\n\n    var data = this._data;\n\n    for (var i = 0, ii = index.length; i < ii; i++) {\n      var indexI = index[i];\n      validateIndex(indexI, data.length);\n      data = data[indexI];\n    }\n\n    return data;\n  };\n  /**\n   * Replace a single element in the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {DenseMatrix} self\n   */\n\n\n  DenseMatrix.prototype.set = function (index, value, defaultValue) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n\n    if (index.length < this._size.length) {\n      throw new DimensionError(index.length, this._size.length, '<');\n    }\n\n    var i, ii, indexI; // enlarge matrix when needed\n\n    var size = index.map(function (i) {\n      return i + 1;\n    });\n\n    _fit(this, size, defaultValue); // traverse over the dimensions\n\n\n    var data = this._data;\n\n    for (i = 0, ii = index.length - 1; i < ii; i++) {\n      indexI = index[i];\n      validateIndex(indexI, data.length);\n      data = data[indexI];\n    } // set new value\n\n\n    indexI = index[index.length - 1];\n    validateIndex(indexI, data.length);\n    data[indexI] = value;\n    return this;\n  };\n  /**\n   * Get a submatrix of this matrix\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index   Zero-based index\n   * @private\n   */\n\n\n  function _get(matrix, index) {\n    if (!isIndex(index)) {\n      throw new TypeError('Invalid index');\n    }\n\n    var isScalar = index.isScalar();\n\n    if (isScalar) {\n      // return a scalar\n      return matrix.get(index.min());\n    } else {\n      // validate dimensions\n      var size = index.size();\n\n      if (size.length !== matrix._size.length) {\n        throw new DimensionError(size.length, matrix._size.length);\n      } // validate if any of the ranges in the index is out of range\n\n\n      var min = index.min();\n      var max = index.max();\n\n      for (var i = 0, ii = matrix._size.length; i < ii; i++) {\n        validateIndex(min[i], matrix._size[i]);\n        validateIndex(max[i], matrix._size[i]);\n      } // retrieve submatrix\n      // TODO: more efficient when creating an empty matrix and setting _data and _size manually\n\n\n      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);\n    }\n  }\n  /**\n   * Recursively get a submatrix of a multi dimensional matrix.\n   * Index is not checked for correct number or length of dimensions.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {number} dims   Total number of dimensions\n   * @param {number} dim    Current dimension\n   * @return {Array} submatrix\n   * @private\n   */\n\n\n  function _getSubmatrix(data, index, dims, dim) {\n    var last = dim === dims - 1;\n    var range = index.dimension(dim);\n\n    if (last) {\n      return range.map(function (i) {\n        validateIndex(i, data.length);\n        return data[i];\n      }).valueOf();\n    } else {\n      return range.map(function (i) {\n        validateIndex(i, data.length);\n        var child = data[i];\n        return _getSubmatrix(child, index, dims, dim + 1);\n      }).valueOf();\n    }\n  }\n  /**\n   * Replace a submatrix in this matrix\n   * Indexes are zero-based.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index\n   * @param {DenseMatrix | Array | *} submatrix\n   * @param {*} defaultValue          Default value, filled in on new entries when\n   *                                  the matrix is resized.\n   * @return {DenseMatrix} matrix\n   * @private\n   */\n\n\n  function _set(matrix, index, submatrix, defaultValue) {\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    } // get index size and check whether the index contains a single value\n\n\n    var iSize = index.size();\n    var isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed\n\n    var sSize;\n\n    if (isMatrix(submatrix)) {\n      sSize = submatrix.size();\n      submatrix = submatrix.valueOf();\n    } else {\n      sSize = arraySize(submatrix);\n    }\n\n    if (isScalar) {\n      // set a scalar\n      // check whether submatrix is a scalar\n      if (sSize.length !== 0) {\n        throw new TypeError('Scalar expected');\n      }\n\n      matrix.set(index.min(), submatrix, defaultValue);\n    } else {\n      // set a submatrix\n      // validate dimensions\n      if (iSize.length < matrix._size.length) {\n        throw new DimensionError(iSize.length, matrix._size.length, '<');\n      }\n\n      if (sSize.length < iSize.length) {\n        // calculate number of missing outer dimensions\n        var i = 0;\n        var outer = 0;\n\n        while (iSize[i] === 1 && sSize[i] === 1) {\n          i++;\n        }\n\n        while (iSize[i] === 1) {\n          outer++;\n          i++;\n        } // unsqueeze both outer and inner dimensions\n\n\n        submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);\n      } // check whether the size of the submatrix matches the index size\n\n\n      if (!deepStrictEqual(iSize, sSize)) {\n        throw new DimensionError(iSize, sSize, '>');\n      } // enlarge matrix when needed\n\n\n      var size = index.max().map(function (i) {\n        return i + 1;\n      });\n\n      _fit(matrix, size, defaultValue); // insert the sub matrix\n\n\n      var dims = iSize.length;\n      var dim = 0;\n\n      _setSubmatrix(matrix._data, index, submatrix, dims, dim);\n    }\n\n    return matrix;\n  }\n  /**\n   * Replace a submatrix of a multi dimensional matrix.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {Array} submatrix\n   * @param {number} dims   Total number of dimensions\n   * @param {number} dim\n   * @private\n   */\n\n\n  function _setSubmatrix(data, index, submatrix, dims, dim) {\n    var last = dim === dims - 1;\n    var range = index.dimension(dim);\n\n    if (last) {\n      range.forEach(function (dataIndex, subIndex) {\n        validateIndex(dataIndex);\n        data[dataIndex] = submatrix[subIndex[0]];\n      });\n    } else {\n      range.forEach(function (dataIndex, subIndex) {\n        validateIndex(dataIndex);\n\n        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);\n      });\n    }\n  }\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @memberof DenseMatrix\n   * @param {number[] || Matrix} size The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n\n\n  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {\n    // validate arguments\n    if (!isCollection(size)) {\n      throw new TypeError('Array or Matrix expected');\n    } // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector\n\n\n    var sizeArray = size.valueOf().map(value => {\n      return Array.isArray(value) && value.length === 1 ? value[0] : value;\n    }); // matrix to resize\n\n    var m = copy ? this.clone() : this; // resize matrix\n\n    return _resize(m, sizeArray, defaultValue);\n  };\n\n  function _resize(matrix, size, defaultValue) {\n    // check size\n    if (size.length === 0) {\n      // first value in matrix\n      var v = matrix._data; // go deep\n\n      while (isArray(v)) {\n        v = v[0];\n      }\n\n      return v;\n    } // resize matrix\n\n\n    matrix._size = size.slice(0); // copy the array\n\n    matrix._data = resize(matrix._data, matrix._size, defaultValue); // return matrix\n\n    return matrix;\n  }\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * NOTE: This might be better suited to copy by default, instead of modifying\n   *       in place. For now, it operates in place to remain consistent with\n   *       resize().\n   *\n   * @memberof DenseMatrix\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n\n\n  DenseMatrix.prototype.reshape = function (size, copy) {\n    var m = copy ? this.clone() : this;\n    m._data = reshape(m._data, size);\n\n    var currentLength = m._size.reduce((length, size) => length * size);\n\n    m._size = processSizesWildcard(size, currentLength);\n    return m;\n  };\n  /**\n   * Enlarge the matrix when it is smaller than given size.\n   * If the matrix is larger or equal sized, nothing is done.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix           The matrix to be resized\n   * @param {number[]} size\n   * @param {*} defaultValue          Default value, filled in on new entries.\n   * @private\n   */\n\n\n  function _fit(matrix, size, defaultValue) {\n    var // copy the array\n    newSize = matrix._size.slice(0);\n\n    var changed = false; // add dimensions when needed\n\n    while (newSize.length < size.length) {\n      newSize.push(0);\n      changed = true;\n    } // enlarge size when needed\n\n\n    for (var i = 0, ii = size.length; i < ii; i++) {\n      if (size[i] > newSize[i]) {\n        newSize[i] = size[i];\n        changed = true;\n      }\n    }\n\n    if (changed) {\n      // resize only when size is changed\n      _resize(matrix, newSize, defaultValue);\n    }\n  }\n  /**\n   * Create a clone of the matrix\n   * @memberof DenseMatrix\n   * @return {DenseMatrix} clone\n   */\n\n\n  DenseMatrix.prototype.clone = function () {\n    var m = new DenseMatrix({\n      data: clone(this._data),\n      size: clone(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n  /**\n   * Retrieve the size of the matrix.\n   * @memberof DenseMatrix\n   * @returns {number[]} size\n   */\n\n\n  DenseMatrix.prototype.size = function () {\n    return this._size.slice(0); // return a clone of _size\n  };\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   *\n   * @return {DenseMatrix} matrix\n   */\n\n\n  DenseMatrix.prototype.map = function (callback) {\n    // matrix instance\n    var me = this;\n    var args = maxArgumentCount(callback);\n\n    var recurse = function recurse(value, index) {\n      if (isArray(value)) {\n        return value.map(function (child, i) {\n          return recurse(child, index.concat(i));\n        });\n      } else {\n        // invoke the callback function with the right number of arguments\n        if (args === 1) {\n          return callback(value);\n        } else if (args === 2) {\n          return callback(value, index);\n        } else {\n          // 3 or -1\n          return callback(value, index, me);\n        }\n      }\n    }; // determine the new datatype when the original matrix has datatype defined\n    // TODO: should be done in matrix constructor instead\n\n\n    var data = recurse(this._data, []);\n    var datatype = this._datatype !== undefined ? getArrayDataType(data, typeOf) : undefined;\n    return new DenseMatrix(data, datatype);\n  };\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   */\n\n\n  DenseMatrix.prototype.forEach = function (callback) {\n    // matrix instance\n    var me = this;\n\n    var recurse = function recurse(value, index) {\n      if (isArray(value)) {\n        value.forEach(function (child, i) {\n          recurse(child, index.concat(i));\n        });\n      } else {\n        callback(value, index, me);\n      }\n    };\n\n    recurse(this._data, []);\n  };\n  /**\n   * Iterate over the matrix elements\n   * @return {Iterable<{ value, index: number[] }>}\n   */\n\n\n  DenseMatrix.prototype[Symbol.iterator] = function* () {\n    var recurse = function* recurse(value, index) {\n      if (isArray(value)) {\n        for (var i = 0; i < value.length; i++) {\n          yield* recurse(value[i], index.concat(i));\n        }\n      } else {\n        yield {\n          value,\n          index\n        };\n      }\n    };\n\n    yield* recurse(this._data, []);\n  };\n  /**\n   * Returns an array containing the rows of a 2D matrix\n   * @returns {Array<Matrix>}\n   */\n\n\n  DenseMatrix.prototype.rows = function () {\n    var result = [];\n    var s = this.size();\n\n    if (s.length !== 2) {\n      throw new TypeError('Rows can only be returned for a 2D matrix.');\n    }\n\n    var data = this._data;\n\n    for (var row of data) {\n      result.push(new DenseMatrix([row], this._datatype));\n    }\n\n    return result;\n  };\n  /**\n   * Returns an array containing the columns of a 2D matrix\n   * @returns {Array<Matrix>}\n   */\n\n\n  DenseMatrix.prototype.columns = function () {\n    var _this = this;\n\n    var result = [];\n    var s = this.size();\n\n    if (s.length !== 2) {\n      throw new TypeError('Rows can only be returned for a 2D matrix.');\n    }\n\n    var data = this._data;\n\n    var _loop = function _loop(i) {\n      var col = data.map(row => [row[i]]);\n      result.push(new DenseMatrix(col, _this._datatype));\n    };\n\n    for (var i = 0; i < s[1]; i++) {\n      _loop(i);\n    }\n\n    return result;\n  };\n  /**\n   * Create an Array with a copy of the data of the DenseMatrix\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n\n\n  DenseMatrix.prototype.toArray = function () {\n    return clone(this._data);\n  };\n  /**\n   * Get the primitive value of the DenseMatrix: a multidimensional array\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n\n\n  DenseMatrix.prototype.valueOf = function () {\n    return this._data;\n  };\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @memberof DenseMatrix\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n\n\n  DenseMatrix.prototype.format = function (options) {\n    return format(this._data, options);\n  };\n  /**\n   * Get a string representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {string} str\n   */\n\n\n  DenseMatrix.prototype.toString = function () {\n    return format(this._data);\n  };\n  /**\n   * Get a JSON representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {Object}\n   */\n\n\n  DenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'DenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n  /**\n   * Get the kth Matrix diagonal.\n   *\n   * @memberof DenseMatrix\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n   *\n   * @returns {Matrix}                     The matrix with the diagonal values.\n   */\n\n\n  DenseMatrix.prototype.diagonal = function (k) {\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      } // is must be an integer\n\n\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0; // rows & columns\n\n    var rows = this._size[0];\n    var columns = this._size[1]; // number diagonal values\n\n    var n = Math.min(rows - kSub, columns - kSuper); // x is a matrix get diagonal from matrix\n\n    var data = []; // loop rows\n\n    for (var i = 0; i < n; i++) {\n      data[i] = this._data[i + kSub][i + kSuper];\n    } // create DenseMatrix\n\n\n    return new DenseMatrix({\n      data,\n      size: [n],\n      datatype: this._datatype\n    });\n  };\n  /**\n   * Create a diagonal matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {Array} size                     The matrix size.\n   * @param {number | Matrix | Array } value The values for the diagonal.\n   * @param {number | BigNumber} [k=0]       The kth diagonal where the vector will be filled in.\n   * @param {number} [defaultValue]          The default value for non-diagonal\n   * @param {string} [datatype]              The datatype for the diagonal\n   *\n   * @returns {DenseMatrix}\n   */\n\n\n  DenseMatrix.diagonal = function (size, value, k, defaultValue) {\n    if (!isArray(size)) {\n      throw new TypeError('Array expected, size parameter');\n    }\n\n    if (size.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    } // map size & validate\n\n\n    size = size.map(function (s) {\n      // check it is a big number\n      if (isBigNumber(s)) {\n        // convert it\n        s = s.toNumber();\n      } // validate arguments\n\n\n      if (!isNumber(s) || !isInteger(s) || s < 1) {\n        throw new Error('Size values must be positive integers');\n      }\n\n      return s;\n    }); // validate k if any\n\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      } // is must be an integer\n\n\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0; // rows and columns\n\n    var rows = size[0];\n    var columns = size[1]; // number of non-zero items\n\n    var n = Math.min(rows - kSub, columns - kSuper); // value extraction function\n\n    var _value; // check value\n\n\n    if (isArray(value)) {\n      // validate array\n      if (value.length !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid value array length');\n      } // define function\n\n\n      _value = function _value(i) {\n        // return value @ i\n        return value[i];\n      };\n    } else if (isMatrix(value)) {\n      // matrix size\n      var ms = value.size(); // validate matrix\n\n      if (ms.length !== 1 || ms[0] !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid matrix length');\n      } // define function\n\n\n      _value = function _value(i) {\n        // return value @ i\n        return value.get([i]);\n      };\n    } else {\n      // define function\n      _value = function _value() {\n        // return value\n        return value;\n      };\n    } // discover default value if needed\n\n\n    if (!defaultValue) {\n      // check first value in array\n      defaultValue = isBigNumber(_value(0)) ? _value(0).mul(0) // trick to create a BigNumber with value zero\n      : 0;\n    } // empty array\n\n\n    var data = []; // check we need to resize array\n\n    if (size.length > 0) {\n      // resize array\n      data = resize(data, size, defaultValue); // fill diagonal\n\n      for (var d = 0; d < n; d++) {\n        data[d + kSub][d + kSuper] = _value(d);\n      }\n    } // create DenseMatrix\n\n\n    return new DenseMatrix({\n      data,\n      size: [rows, columns]\n    });\n  };\n  /**\n   * Generate a matrix from a JSON object\n   * @memberof DenseMatrix\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"DenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {DenseMatrix}\n   */\n\n\n  DenseMatrix.fromJSON = function (json) {\n    return new DenseMatrix(json);\n  };\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n\n\n  DenseMatrix.prototype.swapRows = function (i, j) {\n    // check index\n    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {\n      throw new Error('Row index must be positive integers');\n    } // check dimensions\n\n\n    if (this._size.length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    } // validate index\n\n\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[0]); // swap rows\n\n    DenseMatrix._swapRows(i, j, this._data); // return current instance\n\n\n    return this;\n  };\n  /**\n   * Swap rows i and j in Dense Matrix data structure.\n   *\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   * @param {Array} data     Matrix data\n   */\n\n\n  DenseMatrix._swapRows = function (i, j, data) {\n    // swap values i <-> j\n    var vi = data[i];\n    data[i] = data[j];\n    data[j] = vi;\n  };\n  /**\n   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and\n   * Matrices. Replaces all nested Matrices with Arrays\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @return {Array} data\n   */\n\n\n  function preprocess(data) {\n    for (var i = 0, ii = data.length; i < ii; i++) {\n      var elem = data[i];\n\n      if (isArray(elem)) {\n        data[i] = preprocess(elem);\n      } else if (elem && elem.isMatrix === true) {\n        data[i] = preprocess(elem.valueOf());\n      }\n    }\n\n    return data;\n  }\n\n  return DenseMatrix;\n}, {\n  isClass: true\n});","// (c) 2018, Mariusz Nowak\n// SPDX-License-Identifier: ISC\n// Derived from https://github.com/medikoo/lru-queue\nexport function lruQueue(limit) {\n  var size = 0;\n  var base = 1;\n  var queue = Object.create(null);\n  var map = Object.create(null);\n  var index = 0;\n\n  var del = function del(id) {\n    var oldIndex = map[id];\n    if (!oldIndex) return;\n    delete queue[oldIndex];\n    delete map[id];\n    --size;\n    if (base !== oldIndex) return;\n\n    if (!size) {\n      index = 0;\n      base = 1;\n      return;\n    }\n\n    while (!hasOwnProperty.call(queue, ++base)) {\n      continue;\n    }\n  };\n\n  limit = Math.abs(limit);\n  return {\n    hit: function hit(id) {\n      var oldIndex = map[id];\n      var nuIndex = ++index;\n      queue[nuIndex] = id;\n      map[id] = nuIndex;\n\n      if (!oldIndex) {\n        ++size;\n        if (size <= limit) return undefined;\n        id = queue[base];\n        del(id);\n        return id;\n      }\n\n      delete queue[oldIndex];\n      if (base !== oldIndex) return undefined;\n\n      while (!hasOwnProperty.call(queue, ++base)) {\n        continue;\n      }\n\n      return undefined;\n    },\n    delete: del,\n    clear: function clear() {\n      size = index = 0;\n      base = 1;\n      queue = Object.create(null);\n      map = Object.create(null);\n    }\n  };\n}","// function utils\nimport { lruQueue } from './lruQueue.js';\n/**\n * Memoize a given function by caching the computed result.\n * The cache of a memoized function can be cleared by deleting the `cache`\n * property of the function.\n *\n * @param {function} fn                     The function to be memoized.\n *                                          Must be a pure function.\n * @param {Object} [options]\n * @param {function(args: Array): string} [options.hasher]\n *    A custom hash builder. Is JSON.stringify by default.\n * @param {number | undefined} [options.limit]\n *    Maximum number of values that may be cached. Undefined indicates\n *    unlimited (default)\n * @return {function}                       Returns the memoized function\n */\n\nexport function memoize(fn) {\n  var {\n    hasher,\n    limit\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  limit = limit == null ? Number.POSITIVE_INFINITY : limit;\n  hasher = hasher == null ? JSON.stringify : hasher;\n  return function memoize() {\n    if (typeof memoize.cache !== 'object') {\n      memoize.cache = {\n        values: new Map(),\n        lru: lruQueue(limit || Number.POSITIVE_INFINITY)\n      };\n    }\n\n    var args = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    var hash = hasher(args);\n\n    if (memoize.cache.values.has(hash)) {\n      memoize.cache.lru.hit(hash);\n      return memoize.cache.values.get(hash);\n    }\n\n    var newVal = fn.apply(fn, args);\n    memoize.cache.values.set(hash, newVal);\n    memoize.cache.values.delete(memoize.cache.lru.hit(hash));\n    return newVal;\n  };\n}\n/**\n * Memoize a given function by caching all results and the arguments,\n * and comparing against the arguments of previous results before\n * executing again.\n * This is less performant than `memoize` which calculates a hash,\n * which is very fast to compare. Use `memoizeCompare` only when it is\n * not possible to create a unique serializable hash from the function\n * arguments.\n * The isEqual function must compare two sets of arguments\n * and return true when equal (can be a deep equality check for example).\n * @param {function} fn\n * @param {function(a: *, b: *) : boolean} isEqual\n * @returns {function}\n */\n\nexport function memoizeCompare(fn, isEqual) {\n  var memoize = function memoize() {\n    var args = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    for (var c = 0; c < memoize.cache.length; c++) {\n      var cached = memoize.cache[c];\n\n      if (isEqual(args, cached.args)) {\n        // TODO: move this cache entry to the top so recently used entries move up?\n        return cached.res;\n      }\n    }\n\n    var res = fn.apply(fn, args);\n    memoize.cache.unshift({\n      args,\n      res\n    });\n    return res;\n  };\n\n  memoize.cache = [];\n  return memoize;\n}\n/**\n * Find the maximum number of arguments expected by a typed function.\n * @param {function} fn   A typed function\n * @return {number} Returns the maximum number of expected arguments.\n *                  Returns -1 when no signatures where found on the function.\n */\n\nexport function maxArgumentCount(fn) {\n  return Object.keys(fn.signatures || {}).reduce(function (args, signature) {\n    var count = (signature.match(/,/g) || []).length + 1;\n    return Math.max(args, count);\n  }, -1);\n}","import { isCollection, isMatrix } from './is.js';\nimport { IndexError } from '../error/IndexError.js';\nimport { arraySize } from './array.js';\nimport { _switch } from './switch.js';\n/**\n * Test whether an array contains collections\n * @param {Array} array\n * @returns {boolean} Returns true when the array contains one or multiple\n *                    collections (Arrays or Matrices). Returns false otherwise.\n */\n\nexport function containsCollections(array) {\n  for (var i = 0; i < array.length; i++) {\n    if (isCollection(array[i])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Recursively loop over all elements in a given multi dimensional array\n * and invoke the callback on each of the elements.\n * @param {Array | Matrix} array\n * @param {Function} callback     The callback method is invoked with one\n *                                parameter: the current element in the array\n */\n\nexport function deepForEach(array, callback) {\n  if (isMatrix(array)) {\n    array = array.valueOf();\n  }\n\n  for (var i = 0, ii = array.length; i < ii; i++) {\n    var value = array[i];\n\n    if (Array.isArray(value)) {\n      deepForEach(value, callback);\n    } else {\n      callback(value);\n    }\n  }\n}\n/**\n * Execute the callback function element wise for each element in array and any\n * nested array\n * Returns an array with the results\n * @param {Array | Matrix} array\n * @param {Function} callback   The callback is called with two parameters:\n *                              value1 and value2, which contain the current\n *                              element of both arrays.\n * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n *\n * @return {Array | Matrix} res\n */\n\nexport function deepMap(array, callback, skipZeros) {\n  if (array && typeof array.map === 'function') {\n    // TODO: replace array.map with a for loop to improve performance\n    return array.map(function (x) {\n      return deepMap(x, callback, skipZeros);\n    });\n  } else {\n    return callback(array);\n  }\n}\n/**\n * Reduce a given matrix or array to a new matrix or\n * array with one less dimension, applying the given\n * callback in the selected dimension.\n * @param {Array | Matrix} mat\n * @param {number} dim\n * @param {Function} callback\n * @return {Array | Matrix} res\n */\n\nexport function reduce(mat, dim, callback) {\n  var size = Array.isArray(mat) ? arraySize(mat) : mat.size();\n\n  if (dim < 0 || dim >= size.length) {\n    // TODO: would be more clear when throwing a DimensionError here\n    throw new IndexError(dim, size.length);\n  }\n\n  if (isMatrix(mat)) {\n    return mat.create(_reduce(mat.valueOf(), dim, callback));\n  } else {\n    return _reduce(mat, dim, callback);\n  }\n}\n/**\n * Recursively reduce a matrix\n * @param {Array} mat\n * @param {number} dim\n * @param {Function} callback\n * @returns {Array} ret\n * @private\n */\n\nfunction _reduce(mat, dim, callback) {\n  var i, ret, val, tran;\n\n  if (dim <= 0) {\n    if (!Array.isArray(mat[0])) {\n      val = mat[0];\n\n      for (i = 1; i < mat.length; i++) {\n        val = callback(val, mat[i]);\n      }\n\n      return val;\n    } else {\n      tran = _switch(mat);\n      ret = [];\n\n      for (i = 0; i < tran.length; i++) {\n        ret[i] = _reduce(tran[i], dim - 1, callback);\n      }\n\n      return ret;\n    }\n  } else {\n    ret = [];\n\n    for (i = 0; i < mat.length; i++) {\n      ret[i] = _reduce(mat[i], dim - 1, callback);\n    }\n\n    return ret;\n  }\n} // TODO: document function scatter\n\n\nexport function scatter(a, j, w, x, u, mark, cindex, f, inverse, update, value) {\n  // a arrays\n  var avalues = a._values;\n  var aindex = a._index;\n  var aptr = a._ptr; // vars\n\n  var k, k0, k1, i; // check we need to process values (pattern matrix)\n\n  if (x) {\n    // values in j\n    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n      // row\n      i = aindex[k]; // check value exists in current j\n\n      if (w[i] !== mark) {\n        // i is new entry in j\n        w[i] = mark; // add i to pattern of C\n\n        cindex.push(i); // x(i) = A, check we need to call function this time\n\n        if (update) {\n          // copy value to workspace calling callback function\n          x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]); // function was called on current row\n\n          u[i] = mark;\n        } else {\n          // copy value to workspace\n          x[i] = avalues[k];\n        }\n      } else {\n        // i exists in C already\n        x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]); // function was called on current row\n\n        u[i] = mark;\n      }\n    }\n  } else {\n    // values in j\n    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n      // row\n      i = aindex[k]; // check value exists in current j\n\n      if (w[i] !== mark) {\n        // i is new entry in j\n        w[i] = mark; // add i to pattern of C\n\n        cindex.push(i);\n      } else {\n        // indicate function was called on current row\n        u[i] = mark;\n      }\n    }\n  }\n}","import { deepMap } from '../../utils/collection.js';\nimport { isInteger as isIntegerNumber } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'isInteger';\nvar dependencies = ['typed'];\nexport var createIsInteger = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n\n  /**\n   * Test whether a value is an integer number.\n   * The function supports `number`, `BigNumber`, and `Fraction`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isInteger(x)\n   *\n   * Examples:\n   *\n   *    math.isInteger(2)                     // returns true\n   *    math.isInteger(0)                     // returns true\n   *    math.isInteger(0.5)                   // returns false\n   *    math.isInteger(math.bignumber(500))   // returns true\n   *    math.isInteger(math.fraction(4))      // returns true\n   *    math.isInteger('3')                   // returns true\n   *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]\n   *    math.isInteger(math.complex('2-4i'))  // throws an error\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isNegative, isZero\n   *\n   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested\n   * @return {boolean}  Returns true when `x` contains a numeric, integer value.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: isIntegerNumber,\n    // TODO: what to do with isInteger(add(0.1, 0.2))  ?\n    BigNumber: function BigNumber(x) {\n      return x.isInt();\n    },\n    Fraction: function Fraction(x) {\n      return x.d === 1 && isFinite(x.n);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","import { cbrt, expm1, isInteger, log10, log1p, log2, sign, toFixed } from '../../utils/number.js';\nvar n1 = 'number';\nvar n2 = 'number, number';\nexport function absNumber(a) {\n  return Math.abs(a);\n}\nabsNumber.signature = n1;\nexport function addNumber(a, b) {\n  return a + b;\n}\naddNumber.signature = n2;\nexport function subtractNumber(a, b) {\n  return a - b;\n}\nsubtractNumber.signature = n2;\nexport function multiplyNumber(a, b) {\n  return a * b;\n}\nmultiplyNumber.signature = n2;\nexport function divideNumber(a, b) {\n  return a / b;\n}\ndivideNumber.signature = n2;\nexport function unaryMinusNumber(x) {\n  return -x;\n}\nunaryMinusNumber.signature = n1;\nexport function unaryPlusNumber(x) {\n  return x;\n}\nunaryPlusNumber.signature = n1;\nexport function cbrtNumber(x) {\n  return cbrt(x);\n}\ncbrtNumber.signature = n1;\nexport function cubeNumber(x) {\n  return x * x * x;\n}\ncubeNumber.signature = n1;\nexport function expNumber(x) {\n  return Math.exp(x);\n}\nexpNumber.signature = n1;\nexport function expm1Number(x) {\n  return expm1(x);\n}\nexpm1Number.signature = n1;\n/**\n * Calculate gcd for numbers\n * @param {number} a\n * @param {number} b\n * @returns {number} Returns the greatest common denominator of a and b\n */\n\nexport function gcdNumber(a, b) {\n  if (!isInteger(a) || !isInteger(b)) {\n    throw new Error('Parameters in function gcd must be integer numbers');\n  } // https://en.wikipedia.org/wiki/Euclidean_algorithm\n\n\n  var r;\n\n  while (b !== 0) {\n    r = a % b;\n    a = b;\n    b = r;\n  }\n\n  return a < 0 ? -a : a;\n}\ngcdNumber.signature = n2;\n/**\n * Calculate lcm for two numbers\n * @param {number} a\n * @param {number} b\n * @returns {number} Returns the least common multiple of a and b\n */\n\nexport function lcmNumber(a, b) {\n  if (!isInteger(a) || !isInteger(b)) {\n    throw new Error('Parameters in function lcm must be integer numbers');\n  }\n\n  if (a === 0 || b === 0) {\n    return 0;\n  } // https://en.wikipedia.org/wiki/Euclidean_algorithm\n  // evaluate lcm here inline to reduce overhead\n\n\n  var t;\n  var prod = a * b;\n\n  while (b !== 0) {\n    t = b;\n    b = a % t;\n    a = t;\n  }\n\n  return Math.abs(prod / a);\n}\nlcmNumber.signature = n2;\n/**\n * Calculate the logarithm of a value, optionally to a given base.\n * @param {number} x\n * @param {number | null | undefined} base\n * @return {number}\n */\n\nexport function logNumber(x, y) {\n  if (y) {\n    return Math.log(x) / Math.log(y);\n  }\n\n  return Math.log(x);\n}\n/**\n * Calculate the 10-base logarithm of a number\n * @param {number} x\n * @return {number}\n */\n\nexport function log10Number(x) {\n  return log10(x);\n}\nlog10Number.signature = n1;\n/**\n * Calculate the 2-base logarithm of a number\n * @param {number} x\n * @return {number}\n */\n\nexport function log2Number(x) {\n  return log2(x);\n}\nlog2Number.signature = n1;\n/**\n * Calculate the natural logarithm of a `number+1`\n * @param {number} x\n * @returns {number}\n */\n\nexport function log1pNumber(x) {\n  return log1p(x);\n}\nlog1pNumber.signature = n1;\n/**\n * Calculate the modulus of two numbers\n * @param {number} x\n * @param {number} y\n * @returns {number} res\n * @private\n */\n\nexport function modNumber(x, y) {\n  if (y > 0) {\n    // We don't use JavaScript's % operator here as this doesn't work\n    // correctly for x < 0 and x === 0\n    // see https://en.wikipedia.org/wiki/Modulo_operation\n    return x - y * Math.floor(x / y);\n  } else if (y === 0) {\n    return x;\n  } else {\n    // y < 0\n    // TODO: implement mod for a negative divisor\n    throw new Error('Cannot calculate mod for a negative divisor');\n  }\n}\nmodNumber.signature = n2;\n/**\n * Calculate the nth root of a, solve x^root == a\n * http://rosettacode.org/wiki/Nth_root#JavaScript\n * @param {number} a\n * @param {number} [2] root\n * @private\n */\n\nexport function nthRootNumber(a) {\n  var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var inv = root < 0;\n\n  if (inv) {\n    root = -root;\n  }\n\n  if (root === 0) {\n    throw new Error('Root must be non-zero');\n  }\n\n  if (a < 0 && Math.abs(root) % 2 !== 1) {\n    throw new Error('Root must be odd when a is negative.');\n  } // edge cases zero and infinity\n\n\n  if (a === 0) {\n    return inv ? Infinity : 0;\n  }\n\n  if (!isFinite(a)) {\n    return inv ? 0 : a;\n  }\n\n  var x = Math.pow(Math.abs(a), 1 / root); // If a < 0, we require that root is an odd integer,\n  // so (-1) ^ (1/root) = -1\n\n  x = a < 0 ? -x : x;\n  return inv ? 1 / x : x; // Very nice algorithm, but fails with nthRoot(-2, 3).\n  // Newton's method has some well-known problems at times:\n  // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis\n\n  /*\n  let x = 1 // Initial guess\n  let xPrev = 1\n  let i = 0\n  const iMax = 10000\n  do {\n    const delta = (a / Math.pow(x, root - 1) - x) / root\n    xPrev = x\n    x = x + delta\n    i++\n  }\n  while (xPrev !== x && i < iMax)\n   if (xPrev !== x) {\n    throw new Error('Function nthRoot failed to converge')\n  }\n   return inv ? 1 / x : x\n  */\n}\nexport function signNumber(x) {\n  return sign(x);\n}\nsignNumber.signature = n1;\nexport function sqrtNumber(x) {\n  return Math.sqrt(x);\n}\nsqrtNumber.signature = n1;\nexport function squareNumber(x) {\n  return x * x;\n}\nsquareNumber.signature = n1;\n/**\n * Calculate xgcd for two numbers\n * @param {number} a\n * @param {number} b\n * @return {number} result\n * @private\n */\n\nexport function xgcdNumber(a, b) {\n  // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n  var t; // used to swap two variables\n\n  var q; // quotient\n\n  var r; // remainder\n\n  var x = 0;\n  var lastx = 1;\n  var y = 1;\n  var lasty = 0;\n\n  if (!isInteger(a) || !isInteger(b)) {\n    throw new Error('Parameters in function xgcd must be integer numbers');\n  }\n\n  while (b) {\n    q = Math.floor(a / b);\n    r = a - q * b;\n    t = x;\n    x = lastx - q * x;\n    lastx = t;\n    t = y;\n    y = lasty - q * y;\n    lasty = t;\n    a = b;\n    b = r;\n  }\n\n  var res;\n\n  if (a < 0) {\n    res = [-a, -lastx, -lasty];\n  } else {\n    res = [a, a ? lastx : 0, lasty];\n  }\n\n  return res;\n}\nxgcdNumber.signature = n2;\n/**\n * Calculates the power of x to y, x^y, for two numbers.\n * @param {number} x\n * @param {number} y\n * @return {number} res\n */\n\nexport function powNumber(x, y) {\n  // x^Infinity === 0 if -1 < x < 1\n  // A real number 0 is returned instead of complex(0)\n  if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {\n    return 0;\n  }\n\n  return Math.pow(x, y);\n}\npowNumber.signature = n2;\n/**\n * round a number to the given number of decimals, or to zero if decimals is\n * not provided\n * @param {number} value\n * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)\n * @return {number} roundedValue\n */\n\nexport function roundNumber(value) {\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  if (!isInteger(decimals) || decimals < 0 || decimals > 15) {\n    throw new Error('Number of decimals in function round must be an integer from 0 to 15 inclusive');\n  }\n\n  return parseFloat(toFixed(value, decimals));\n}\n/**\n * Calculate the norm of a number, the absolute value.\n * @param {number} x\n * @return {number}\n */\n\nexport function normNumber(x) {\n  return Math.abs(x);\n}\nnormNumber.signature = n1;","import { isInteger } from '../../utils/number.js';\nvar n1 = 'number';\nvar n2 = 'number, number';\nexport function bitAndNumber(x, y) {\n  if (!isInteger(x) || !isInteger(y)) {\n    throw new Error('Integers expected in function bitAnd');\n  }\n\n  return x & y;\n}\nbitAndNumber.signature = n2;\nexport function bitNotNumber(x) {\n  if (!isInteger(x)) {\n    throw new Error('Integer expected in function bitNot');\n  }\n\n  return ~x;\n}\nbitNotNumber.signature = n1;\nexport function bitOrNumber(x, y) {\n  if (!isInteger(x) || !isInteger(y)) {\n    throw new Error('Integers expected in function bitOr');\n  }\n\n  return x | y;\n}\nbitOrNumber.signature = n2;\nexport function bitXorNumber(x, y) {\n  if (!isInteger(x) || !isInteger(y)) {\n    throw new Error('Integers expected in function bitXor');\n  }\n\n  return x ^ y;\n}\nbitXorNumber.signature = n2;\nexport function leftShiftNumber(x, y) {\n  if (!isInteger(x) || !isInteger(y)) {\n    throw new Error('Integers expected in function leftShift');\n  }\n\n  return x << y;\n}\nleftShiftNumber.signature = n2;\nexport function rightArithShiftNumber(x, y) {\n  if (!isInteger(x) || !isInteger(y)) {\n    throw new Error('Integers expected in function rightArithShift');\n  }\n\n  return x >> y;\n}\nrightArithShiftNumber.signature = n2;\nexport function rightLogShiftNumber(x, y) {\n  if (!isInteger(x) || !isInteger(y)) {\n    throw new Error('Integers expected in function rightLogShift');\n  }\n\n  return x >>> y;\n}\nrightLogShiftNumber.signature = n2;","export var pi = Math.PI;\nexport var tau = 2 * Math.PI;\nexport var e = Math.E;\nexport var phi = 1.6180339887498948; // eslint-disable-line no-loss-of-precision","var n1 = 'number';\nvar n2 = 'number, number';\nexport function notNumber(x) {\n  return !x;\n}\nnotNumber.signature = n1;\nexport function orNumber(x, y) {\n  return !!(x || y);\n}\norNumber.signature = n2;\nexport function xorNumber(x, y) {\n  return !!x !== !!y;\n}\nxorNumber.signature = n2;\nexport function andNumber(x, y) {\n  return !!(x && y);\n}\nandNumber.signature = n2;","/** @param {number} i\n *  @param {number} n\n *  @returns {number} product of i to n\n */\nexport function product(i, n) {\n  if (n < i) {\n    return 1;\n  }\n\n  if (n === i) {\n    return n;\n  }\n\n  var half = n + i >> 1; // divide (n + i) by 2 and truncate to integer\n\n  return product(i, half) * product(half + 1, n);\n}","/* eslint-disable no-loss-of-precision */\nimport { isInteger } from '../../utils/number.js';\nimport { product } from '../../utils/product.js';\nexport function gammaNumber(n) {\n  var x;\n\n  if (isInteger(n)) {\n    if (n <= 0) {\n      return isFinite(n) ? Infinity : NaN;\n    }\n\n    if (n > 171) {\n      return Infinity; // Will overflow\n    }\n\n    return product(1, n - 1);\n  }\n\n  if (n < 0.5) {\n    return Math.PI / (Math.sin(Math.PI * n) * gammaNumber(1 - n));\n  }\n\n  if (n >= 171.35) {\n    return Infinity; // will overflow\n  }\n\n  if (n > 85.0) {\n    // Extended Stirling Approx\n    var twoN = n * n;\n    var threeN = twoN * n;\n    var fourN = threeN * n;\n    var fiveN = fourN * n;\n    return Math.sqrt(2 * Math.PI / n) * Math.pow(n / Math.E, n) * (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) - 571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) + 5246819 / (75246796800 * fiveN * n));\n  }\n\n  --n;\n  x = gammaP[0];\n\n  for (var i = 1; i < gammaP.length; ++i) {\n    x += gammaP[i] / (n + i);\n  }\n\n  var t = n + gammaG + 0.5;\n  return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;\n}\ngammaNumber.signature = 'number'; // TODO: comment on the variables g and p\n\nexport var gammaG = 4.7421875;\nexport var gammaP = [0.99999999999999709182, 57.156235665862923517, -59.597960355475491248, 14.136097974741747174, -0.49191381609762019978, 0.33994649984811888699e-4, 0.46523628927048575665e-4, -0.98374475304879564677e-4, 0.15808870322491248884e-3, -0.21026444172410488319e-3, 0.21743961811521264320e-3, -0.16431810653676389022e-3, 0.84418223983852743293e-4, -0.26190838401581408670e-4, 0.36899182659531622704e-5]; // lgamma implementation ref: https://mrob.com/pub/ries/lanczos-gamma.html#code\n// log(2 * pi) / 2\n\nexport var lnSqrt2PI = 0.91893853320467274178;\nexport var lgammaG = 5; // Lanczos parameter \"g\"\n\nexport var lgammaN = 7; // Range of coefficients \"n\"\n\nexport var lgammaSeries = [1.000000000190015, 76.18009172947146, -86.50532032941677, 24.01409824083091, -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5];\nexport function lgammaNumber(n) {\n  if (n < 0) return NaN;\n  if (n === 0) return Infinity;\n  if (!isFinite(n)) return n;\n\n  if (n < 0.5) {\n    // Use Euler's reflection formula:\n    // gamma(z) = PI / (sin(PI * z) * gamma(1 - z))\n    return Math.log(Math.PI / Math.sin(Math.PI * n)) - lgammaNumber(1 - n);\n  } // Compute the logarithm of the Gamma function using the Lanczos method\n\n\n  n = n - 1;\n  var base = n + lgammaG + 0.5; // Base of the Lanczos exponential\n\n  var sum = lgammaSeries[0]; // We start with the terms that have the smallest coefficients and largest denominator\n\n  for (var i = lgammaN - 1; i >= 1; i--) {\n    sum += lgammaSeries[i] / (n + i);\n  }\n\n  return lnSqrt2PI + (n + 0.5) * Math.log(base) - base + Math.log(sum);\n}\nlgammaNumber.signature = 'number';","import { acosh, asinh, atanh, cosh, sign, sinh, tanh } from '../../utils/number.js';\nvar n1 = 'number';\nvar n2 = 'number, number';\nexport function acosNumber(x) {\n  return Math.acos(x);\n}\nacosNumber.signature = n1;\nexport function acoshNumber(x) {\n  return acosh(x);\n}\nacoshNumber.signature = n1;\nexport function acotNumber(x) {\n  return Math.atan(1 / x);\n}\nacotNumber.signature = n1;\nexport function acothNumber(x) {\n  return isFinite(x) ? (Math.log((x + 1) / x) + Math.log(x / (x - 1))) / 2 : 0;\n}\nacothNumber.signature = n1;\nexport function acscNumber(x) {\n  return Math.asin(1 / x);\n}\nacscNumber.signature = n1;\nexport function acschNumber(x) {\n  var xInv = 1 / x;\n  return Math.log(xInv + Math.sqrt(xInv * xInv + 1));\n}\nacschNumber.signature = n1;\nexport function asecNumber(x) {\n  return Math.acos(1 / x);\n}\nasecNumber.signature = n1;\nexport function asechNumber(x) {\n  var xInv = 1 / x;\n  var ret = Math.sqrt(xInv * xInv - 1);\n  return Math.log(ret + xInv);\n}\nasechNumber.signature = n1;\nexport function asinNumber(x) {\n  return Math.asin(x);\n}\nasinNumber.signature = n1;\nexport function asinhNumber(x) {\n  return asinh(x);\n}\nasinhNumber.signature = n1;\nexport function atanNumber(x) {\n  return Math.atan(x);\n}\natanNumber.signature = n1;\nexport function atan2Number(y, x) {\n  return Math.atan2(y, x);\n}\natan2Number.signature = n2;\nexport function atanhNumber(x) {\n  return atanh(x);\n}\natanhNumber.signature = n1;\nexport function cosNumber(x) {\n  return Math.cos(x);\n}\ncosNumber.signature = n1;\nexport function coshNumber(x) {\n  return cosh(x);\n}\ncoshNumber.signature = n1;\nexport function cotNumber(x) {\n  return 1 / Math.tan(x);\n}\ncotNumber.signature = n1;\nexport function cothNumber(x) {\n  var e = Math.exp(2 * x);\n  return (e + 1) / (e - 1);\n}\ncothNumber.signature = n1;\nexport function cscNumber(x) {\n  return 1 / Math.sin(x);\n}\ncscNumber.signature = n1;\nexport function cschNumber(x) {\n  // consider values close to zero (+/-)\n  if (x === 0) {\n    return Number.POSITIVE_INFINITY;\n  } else {\n    return Math.abs(2 / (Math.exp(x) - Math.exp(-x))) * sign(x);\n  }\n}\ncschNumber.signature = n1;\nexport function secNumber(x) {\n  return 1 / Math.cos(x);\n}\nsecNumber.signature = n1;\nexport function sechNumber(x) {\n  return 2 / (Math.exp(x) + Math.exp(-x));\n}\nsechNumber.signature = n1;\nexport function sinNumber(x) {\n  return Math.sin(x);\n}\nsinNumber.signature = n1;\nexport function sinhNumber(x) {\n  return sinh(x);\n}\nsinhNumber.signature = n1;\nexport function tanNumber(x) {\n  return Math.tan(x);\n}\ntanNumber.signature = n1;\nexport function tanhNumber(x) {\n  return tanh(x);\n}\ntanhNumber.signature = n1;","import { isInteger } from '../../utils/number.js';\nvar n1 = 'number';\nexport function isIntegerNumber(x) {\n  return isInteger(x);\n}\nisIntegerNumber.signature = n1;\nexport function isNegativeNumber(x) {\n  return x < 0;\n}\nisNegativeNumber.signature = n1;\nexport function isPositiveNumber(x) {\n  return x > 0;\n}\nisPositiveNumber.signature = n1;\nexport function isZeroNumber(x) {\n  return x === 0;\n}\nisZeroNumber.signature = n1;\nexport function isNaNNumber(x) {\n  return Number.isNaN(x);\n}\nisNaNNumber.signature = n1;","import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { isNegativeNumber } from '../../plain/number/index.js';\nvar name = 'isNegative';\nvar dependencies = ['typed'];\nexport var createIsNegative = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n\n  /**\n   * Test whether a value is negative: smaller than zero.\n   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isNegative(x)\n   *\n   * Examples:\n   *\n   *    math.isNegative(3)                     // returns false\n   *    math.isNegative(-2)                    // returns true\n   *    math.isNegative(0)                     // returns false\n   *    math.isNegative(-0)                    // returns false\n   *    math.isNegative(math.bignumber(2))     // returns false\n   *    math.isNegative(math.fraction(-2, 5))  // returns true\n   *    math.isNegative('-2')                  // returns true\n   *    math.isNegative([2, 0, -3])            // returns [false, false, true]\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isZero, isInteger\n   *\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: isNegativeNumber,\n    BigNumber: function BigNumber(x) {\n      return x.isNeg() && !x.isZero() && !x.isNaN();\n    },\n    Fraction: function Fraction(x) {\n      return x.s < 0; // It's enough to decide on the sign\n    },\n    Unit: typed.referToSelf(self => x => typed.find(self, x.valueType())(x.value)),\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { isZeroNumber } from '../../plain/number/index.js';\nvar name = 'isZero';\nvar dependencies = ['typed'];\nexport var createIsZero = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n\n  /**\n   * Test whether a value is zero.\n   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,\n   * `Complex`, and `Unit`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isZero(x)\n   *\n   * Examples:\n   *\n   *    math.isZero(0)                      // returns true\n   *    math.isZero(2)                      // returns false\n   *    math.isZero(0.5)                    // returns false\n   *    math.isZero(math.bignumber(0))      // returns true\n   *    math.isZero(math.fraction(0))       // returns true\n   *    math.isZero(math.fraction(1,3))     // returns false\n   *    math.isZero(math.complex('2 - 4i')) // returns false\n   *    math.isZero(math.complex('0i'))     // returns true\n   *    math.isZero('0')                    // returns true\n   *    math.isZero('2')                    // returns false\n   *    math.isZero([2, 0, -3])             // returns [false, true, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isNegative, isInteger\n   *\n   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested\n   * @return {boolean}  Returns true when `x` is zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: isZeroNumber,\n    BigNumber: function BigNumber(x) {\n      return x.isZero();\n    },\n    Complex: function Complex(x) {\n      return x.re === 0 && x.im === 0;\n    },\n    Fraction: function Fraction(x) {\n      return x.d === 1 && x.n === 0;\n    },\n    Unit: typed.referToSelf(self => x => typed.find(self, x.valueType())(x.value)),\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","/**\n * Compares two BigNumbers.\n * @param {BigNumber} x       First value to compare\n * @param {BigNumber} y       Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n */\nexport function nearlyEqual(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x.eq(y);\n  } // use \"==\" operator, handles infinities\n\n\n  if (x.eq(y)) {\n    return true;\n  } // NaN\n\n\n  if (x.isNaN() || y.isNaN()) {\n    return false;\n  } // at this point x and y should be finite\n\n\n  if (x.isFinite() && y.isFinite()) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = x.minus(y).abs();\n\n    if (diff.isZero()) {\n      return true;\n    } else {\n      // use relative error\n      var max = x.constructor.max(x.abs(), y.abs());\n      return diff.lte(max.times(epsilon));\n    }\n  } // Infinite and Number or negative Infinite and positive Infinite cases\n\n\n  return false;\n}","import { nearlyEqual } from './number.js';\n/**\n * Test whether two complex values are equal provided a given epsilon.\n * Does not use or change the global Complex.EPSILON setting\n * @param {Complex} x\n * @param {Complex} y\n * @param {number} epsilon\n * @returns {boolean}\n */\n\nexport function complexEquals(x, y, epsilon) {\n  return nearlyEqual(x.re, y.re, epsilon) && nearlyEqual(x.im, y.im, epsilon);\n}","import { factory } from '../../utils/factory.js';\nexport var createCompareUnits = /* #__PURE__ */factory('compareUnits', ['typed'], _ref => {\n  var {\n    typed\n  } = _ref;\n  return {\n    'Unit, Unit': typed.referToSelf(self => (x, y) => {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return typed.find(self, [x.valueType(), y.valueType()])(x.value, y.value);\n    })\n  };\n});","import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { complexEquals } from '../../utils/complex.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'equalScalar';\nvar dependencies = ['typed', 'config'];\nexport var createEqualScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config\n  } = _ref;\n  var compareUnits = createCompareUnits({\n    typed\n  });\n  /**\n   * Test whether two scalar values are nearly equal.\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare\n   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false\n   * @private\n   */\n\n  return typed(name, {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x === y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return nearlyEqual(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.eq(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.equals(y);\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return complexEquals(x, y, config.epsilon);\n    }\n  }, compareUnits);\n});\nexport var createEqualScalarNumber = factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return nearlyEqual(x, y, config.epsilon);\n    }\n  });\n});","import { isArray, isBigNumber, isCollection, isIndex, isMatrix, isNumber, isString, typeOf } from '../../utils/is.js';\nimport { isInteger } from '../../utils/number.js';\nimport { format } from '../../utils/string.js';\nimport { clone, deepStrictEqual } from '../../utils/object.js';\nimport { arraySize, getArrayDataType, processSizesWildcard, unsqueeze, validateIndex } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { maxArgumentCount } from '../../utils/function.js';\nvar name = 'SparseMatrix';\nvar dependencies = ['typed', 'equalScalar', 'Matrix'];\nexport var createSparseMatrixClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar,\n    Matrix\n  } = _ref;\n\n  /**\n   * Sparse Matrix implementation. This type implements\n   * a [Compressed Column Storage](https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_column_(CSC_or_CCS))\n   * format for two-dimensional sparse matrices.\n   * @class SparseMatrix\n   */\n  function SparseMatrix(data, datatype) {\n    if (!(this instanceof SparseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n\n    if (isMatrix(data)) {\n      // create from matrix\n      _createFromMatrix(this, data, datatype);\n    } else if (data && isArray(data.index) && isArray(data.ptr) && isArray(data.size)) {\n      // initialize fields\n      this._values = data.values;\n      this._index = data.index;\n      this._ptr = data.ptr;\n      this._size = data.size;\n      this._datatype = datatype || data.datatype;\n    } else if (isArray(data)) {\n      // create from array\n      _createFromArray(this, data, datatype);\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');\n    } else {\n      // nothing provided\n      this._values = [];\n      this._index = [];\n      this._ptr = [0];\n      this._size = [0, 0];\n      this._datatype = datatype;\n    }\n  }\n\n  function _createFromMatrix(matrix, source, datatype) {\n    // check matrix type\n    if (source.type === 'SparseMatrix') {\n      // clone arrays\n      matrix._values = source._values ? clone(source._values) : undefined;\n      matrix._index = clone(source._index);\n      matrix._ptr = clone(source._ptr);\n      matrix._size = clone(source._size);\n      matrix._datatype = datatype || source._datatype;\n    } else {\n      // build from matrix data\n      _createFromArray(matrix, source.valueOf(), datatype || source._datatype);\n    }\n  }\n\n  function _createFromArray(matrix, data, datatype) {\n    // initialize fields\n    matrix._values = [];\n    matrix._index = [];\n    matrix._ptr = [];\n    matrix._datatype = datatype; // discover rows & columns, do not use math.size() to avoid looping array twice\n\n    var rows = data.length;\n    var columns = 0; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0;\n\n    if (isString(datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar; // convert 0 to the same datatype\n\n      zero = typed.convert(0, datatype);\n    } // check we have rows (empty array)\n\n\n    if (rows > 0) {\n      // column index\n      var j = 0;\n\n      do {\n        // store pointer to values index\n        matrix._ptr.push(matrix._index.length); // loop rows\n\n\n        for (var i = 0; i < rows; i++) {\n          // current row\n          var row = data[i]; // check row is an array\n\n          if (isArray(row)) {\n            // update columns if needed (only on first column)\n            if (j === 0 && columns < row.length) {\n              columns = row.length;\n            } // check row has column\n\n\n            if (j < row.length) {\n              // value\n              var v = row[j]; // check value != 0\n\n              if (!eq(v, zero)) {\n                // store value\n                matrix._values.push(v); // index\n\n\n                matrix._index.push(i);\n              }\n            }\n          } else {\n            // update columns if needed (only on first column)\n            if (j === 0 && columns < 1) {\n              columns = 1;\n            } // check value != 0 (row is a scalar)\n\n\n            if (!eq(row, zero)) {\n              // store value\n              matrix._values.push(row); // index\n\n\n              matrix._index.push(i);\n            }\n          }\n        } // increment index\n\n\n        j++;\n      } while (j < columns);\n    } // store number of values in ptr\n\n\n    matrix._ptr.push(matrix._index.length); // size\n\n\n    matrix._size = [rows, columns];\n  }\n\n  SparseMatrix.prototype = new Matrix();\n  /**\n   * Create a new SparseMatrix\n   */\n\n  SparseMatrix.prototype.createSparseMatrix = function (data, datatype) {\n    return new SparseMatrix(data, datatype);\n  };\n  /**\n   * Attach type information\n   */\n\n\n  Object.defineProperty(SparseMatrix, 'name', {\n    value: 'SparseMatrix'\n  });\n  SparseMatrix.prototype.constructor = SparseMatrix;\n  SparseMatrix.prototype.type = 'SparseMatrix';\n  SparseMatrix.prototype.isSparseMatrix = true;\n  /**\n   * Get the matrix type\n   *\n   * Usage:\n   *    const matrixType = matrix.getDataType()  // retrieves the matrix type\n   *\n   * @memberOf SparseMatrix\n   * @return {string}   type information; if multiple types are found from the Matrix, it will return \"mixed\"\n   */\n\n  SparseMatrix.prototype.getDataType = function () {\n    return getArrayDataType(this._values, typeOf);\n  };\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()   // retrieve storage format\n   *\n   * @memberof SparseMatrix\n   * @return {string}           The storage format.\n   */\n\n\n  SparseMatrix.prototype.storage = function () {\n    return 'sparse';\n  };\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()    // retrieve matrix datatype\n   *\n   * @memberof SparseMatrix\n   * @return {string}           The datatype.\n   */\n\n\n  SparseMatrix.prototype.datatype = function () {\n    return this._datatype;\n  };\n  /**\n   * Create a new SparseMatrix\n   * @memberof SparseMatrix\n   * @param {Array} data\n   * @param {string} [datatype]\n   */\n\n\n  SparseMatrix.prototype.create = function (data, datatype) {\n    return new SparseMatrix(data, datatype);\n  };\n  /**\n   * Get the matrix density.\n   *\n   * Usage:\n   *     const density = matrix.density()                   // retrieve matrix density\n   *\n   * @memberof SparseMatrix\n   * @return {number}           The matrix density.\n   */\n\n\n  SparseMatrix.prototype.density = function () {\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1]; // calculate density\n\n    return rows !== 0 && columns !== 0 ? this._index.length / (rows * columns) : 0;\n  };\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @memberof SparseMatrix\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n\n\n  SparseMatrix.prototype.subset = function (index, replacement, defaultValue) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke subset on a Pattern only matrix');\n    } // check arguments\n\n\n    switch (arguments.length) {\n      case 1:\n        return _getsubset(this, index);\n      // intentional fall through\n\n      case 2:\n      case 3:\n        return _setsubset(this, index, replacement, defaultValue);\n\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n\n  function _getsubset(matrix, idx) {\n    // check idx\n    if (!isIndex(idx)) {\n      throw new TypeError('Invalid index');\n    }\n\n    var isScalar = idx.isScalar();\n\n    if (isScalar) {\n      // return a scalar\n      return matrix.get(idx.min());\n    } // validate dimensions\n\n\n    var size = idx.size();\n\n    if (size.length !== matrix._size.length) {\n      throw new DimensionError(size.length, matrix._size.length);\n    } // vars\n\n\n    var i, ii, k, kk; // validate if any of the ranges in the index is out of range\n\n    var min = idx.min();\n    var max = idx.max();\n\n    for (i = 0, ii = matrix._size.length; i < ii; i++) {\n      validateIndex(min[i], matrix._size[i]);\n      validateIndex(max[i], matrix._size[i]);\n    } // matrix arrays\n\n\n    var mvalues = matrix._values;\n    var mindex = matrix._index;\n    var mptr = matrix._ptr; // rows & columns dimensions for result matrix\n\n    var rows = idx.dimension(0);\n    var columns = idx.dimension(1); // workspace & permutation vector\n\n    var w = [];\n    var pv = []; // loop rows in resulting matrix\n\n    rows.forEach(function (i, r) {\n      // update permutation vector\n      pv[i] = r[0]; // mark i in workspace\n\n      w[i] = true;\n    }); // result matrix arrays\n\n    var values = mvalues ? [] : undefined;\n    var index = [];\n    var ptr = []; // loop columns in result matrix\n\n    columns.forEach(function (j) {\n      // update ptr\n      ptr.push(index.length); // loop values in column j\n\n      for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {\n        // row\n        i = mindex[k]; // check row is in result matrix\n\n        if (w[i] === true) {\n          // push index\n          index.push(pv[i]); // check we need to process values\n\n          if (values) {\n            values.push(mvalues[k]);\n          }\n        }\n      }\n    }); // update ptr\n\n    ptr.push(index.length); // return matrix\n\n    return new SparseMatrix({\n      values,\n      index,\n      ptr,\n      size,\n      datatype: matrix._datatype\n    });\n  }\n\n  function _setsubset(matrix, index, submatrix, defaultValue) {\n    // check index\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    } // get index size and check whether the index contains a single value\n\n\n    var iSize = index.size();\n    var isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed\n\n    var sSize;\n\n    if (isMatrix(submatrix)) {\n      // submatrix size\n      sSize = submatrix.size(); // use array representation\n\n      submatrix = submatrix.toArray();\n    } else {\n      // get submatrix size (array, scalar)\n      sSize = arraySize(submatrix);\n    } // check index is a scalar\n\n\n    if (isScalar) {\n      // verify submatrix is a scalar\n      if (sSize.length !== 0) {\n        throw new TypeError('Scalar expected');\n      } // set value\n\n\n      matrix.set(index.min(), submatrix, defaultValue);\n    } else {\n      // validate dimensions, index size must be one or two dimensions\n      if (iSize.length !== 1 && iSize.length !== 2) {\n        throw new DimensionError(iSize.length, matrix._size.length, '<');\n      } // check submatrix and index have the same dimensions\n\n\n      if (sSize.length < iSize.length) {\n        // calculate number of missing outer dimensions\n        var i = 0;\n        var outer = 0;\n\n        while (iSize[i] === 1 && sSize[i] === 1) {\n          i++;\n        }\n\n        while (iSize[i] === 1) {\n          outer++;\n          i++;\n        } // unsqueeze both outer and inner dimensions\n\n\n        submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);\n      } // check whether the size of the submatrix matches the index size\n\n\n      if (!deepStrictEqual(iSize, sSize)) {\n        throw new DimensionError(iSize, sSize, '>');\n      } // insert the sub matrix\n\n\n      if (iSize.length === 1) {\n        // if the replacement index only has 1 dimension, go trough each one and set its value\n        var range = index.dimension(0);\n        range.forEach(function (dataIndex, subIndex) {\n          validateIndex(dataIndex);\n          matrix.set([dataIndex, 0], submatrix[subIndex[0]], defaultValue);\n        });\n      } else {\n        // if the replacement index has 2 dimensions, go through each one and set the value in the correct index\n        var firstDimensionRange = index.dimension(0);\n        var secondDimensionRange = index.dimension(1);\n        firstDimensionRange.forEach(function (firstDataIndex, firstSubIndex) {\n          validateIndex(firstDataIndex);\n          secondDimensionRange.forEach(function (secondDataIndex, secondSubIndex) {\n            validateIndex(secondDataIndex);\n            matrix.set([firstDataIndex, secondDataIndex], submatrix[firstSubIndex[0]][secondSubIndex[0]], defaultValue);\n          });\n        });\n      }\n    }\n\n    return matrix;\n  }\n  /**\n   * Get a single element from the matrix.\n   * @memberof SparseMatrix\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n\n\n  SparseMatrix.prototype.get = function (index) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n\n    if (index.length !== this._size.length) {\n      throw new DimensionError(index.length, this._size.length);\n    } // check it is a pattern matrix\n\n\n    if (!this._values) {\n      throw new Error('Cannot invoke get on a Pattern only matrix');\n    } // row and column\n\n\n    var i = index[0];\n    var j = index[1]; // check i, j are valid\n\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[1]); // find value index\n\n    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row\n\n\n    if (k < this._ptr[j + 1] && this._index[k] === i) {\n      return this._values[k];\n    }\n\n    return 0;\n  };\n  /**\n   * Replace a single element in the matrix.\n   * @memberof SparseMatrix\n   * @param {number[]} index   Zero-based index\n   * @param {*} v\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be set to zero.\n   * @return {SparseMatrix} self\n   */\n\n\n  SparseMatrix.prototype.set = function (index, v, defaultValue) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n\n    if (index.length !== this._size.length) {\n      throw new DimensionError(index.length, this._size.length);\n    } // check it is a pattern matrix\n\n\n    if (!this._values) {\n      throw new Error('Cannot invoke set on a Pattern only matrix');\n    } // row and column\n\n\n    var i = index[0];\n    var j = index[1]; // rows & columns\n\n    var rows = this._size[0];\n    var columns = this._size[1]; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0;\n\n    if (isString(this._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar; // convert 0 to the same datatype\n\n      zero = typed.convert(0, this._datatype);\n    } // check we need to resize matrix\n\n\n    if (i > rows - 1 || j > columns - 1) {\n      // resize matrix\n      _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue); // update rows & columns\n\n\n      rows = this._size[0];\n      columns = this._size[1];\n    } // check i, j are valid\n\n\n    validateIndex(i, rows);\n    validateIndex(j, columns); // find value index\n\n    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row\n\n\n    if (k < this._ptr[j + 1] && this._index[k] === i) {\n      // check value != 0\n      if (!eq(v, zero)) {\n        // update value\n        this._values[k] = v;\n      } else {\n        // remove value from matrix\n        _remove(k, j, this._values, this._index, this._ptr);\n      }\n    } else {\n      // insert value @ (i, j)\n      _insert(k, i, j, v, this._values, this._index, this._ptr);\n    }\n\n    return this;\n  };\n\n  function _getValueIndex(i, top, bottom, index) {\n    // check row is on the bottom side\n    if (bottom - top === 0) {\n      return bottom;\n    } // loop rows [top, bottom[\n\n\n    for (var r = top; r < bottom; r++) {\n      // check we found value index\n      if (index[r] === i) {\n        return r;\n      }\n    } // we did not find row\n\n\n    return top;\n  }\n\n  function _remove(k, j, values, index, ptr) {\n    // remove value @ k\n    values.splice(k, 1);\n    index.splice(k, 1); // update pointers\n\n    for (var x = j + 1; x < ptr.length; x++) {\n      ptr[x]--;\n    }\n  }\n\n  function _insert(k, i, j, v, values, index, ptr) {\n    // insert value\n    values.splice(k, 0, v); // update row for k\n\n    index.splice(k, 0, i); // update column pointers\n\n    for (var x = j + 1; x < ptr.length; x++) {\n      ptr[x]++;\n    }\n  }\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @memberof SparseMatrix\n   * @param {number[] | Matrix} size  The new size the matrix should have.\n   *                                  Since sparse matrices are always two-dimensional,\n   *                                  size must be two numbers in either an array or a matrix\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n\n\n  SparseMatrix.prototype.resize = function (size, defaultValue, copy) {\n    // validate arguments\n    if (!isCollection(size)) {\n      throw new TypeError('Array or Matrix expected');\n    } // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector\n\n\n    var sizeArray = size.valueOf().map(value => {\n      return Array.isArray(value) && value.length === 1 ? value[0] : value;\n    });\n\n    if (sizeArray.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    } // check sizes\n\n\n    sizeArray.forEach(function (value) {\n      if (!isNumber(value) || !isInteger(value) || value < 0) {\n        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format(sizeArray) + ')');\n      }\n    }); // matrix to resize\n\n    var m = copy ? this.clone() : this; // resize matrix\n\n    return _resize(m, sizeArray[0], sizeArray[1], defaultValue);\n  };\n\n  function _resize(matrix, rows, columns, defaultValue) {\n    // value to insert at the time of growing matrix\n    var value = defaultValue || 0; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0;\n\n    if (isString(matrix._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar; // convert 0 to the same datatype\n\n      zero = typed.convert(0, matrix._datatype); // convert value to the same datatype\n\n      value = typed.convert(value, matrix._datatype);\n    } // should we insert the value?\n\n\n    var ins = !eq(value, zero); // old columns and rows\n\n    var r = matrix._size[0];\n    var c = matrix._size[1];\n    var i, j, k; // check we need to increase columns\n\n    if (columns > c) {\n      // loop new columns\n      for (j = c; j < columns; j++) {\n        // update matrix._ptr for current column\n        matrix._ptr[j] = matrix._values.length; // check we need to insert matrix._values\n\n        if (ins) {\n          // loop rows\n          for (i = 0; i < r; i++) {\n            // add new matrix._values\n            matrix._values.push(value); // update matrix._index\n\n\n            matrix._index.push(i);\n          }\n        }\n      } // store number of matrix._values in matrix._ptr\n\n\n      matrix._ptr[columns] = matrix._values.length;\n    } else if (columns < c) {\n      // truncate matrix._ptr\n      matrix._ptr.splice(columns + 1, c - columns); // truncate matrix._values and matrix._index\n\n\n      matrix._values.splice(matrix._ptr[columns], matrix._values.length);\n\n      matrix._index.splice(matrix._ptr[columns], matrix._index.length);\n    } // update columns\n\n\n    c = columns; // check we need to increase rows\n\n    if (rows > r) {\n      // check we have to insert values\n      if (ins) {\n        // inserts\n        var n = 0; // loop columns\n\n        for (j = 0; j < c; j++) {\n          // update matrix._ptr for current column\n          matrix._ptr[j] = matrix._ptr[j] + n; // where to insert matrix._values\n\n          k = matrix._ptr[j + 1] + n; // pointer\n\n          var p = 0; // loop new rows, initialize pointer\n\n          for (i = r; i < rows; i++, p++) {\n            // add value\n            matrix._values.splice(k + p, 0, value); // update matrix._index\n\n\n            matrix._index.splice(k + p, 0, i); // increment inserts\n\n\n            n++;\n          }\n        } // store number of matrix._values in matrix._ptr\n\n\n        matrix._ptr[c] = matrix._values.length;\n      }\n    } else if (rows < r) {\n      // deletes\n      var d = 0; // loop columns\n\n      for (j = 0; j < c; j++) {\n        // update matrix._ptr for current column\n        matrix._ptr[j] = matrix._ptr[j] - d; // where matrix._values start for next column\n\n        var k0 = matrix._ptr[j];\n        var k1 = matrix._ptr[j + 1] - d; // loop matrix._index\n\n        for (k = k0; k < k1; k++) {\n          // row\n          i = matrix._index[k]; // check we need to delete value and matrix._index\n\n          if (i > rows - 1) {\n            // remove value\n            matrix._values.splice(k, 1); // remove item from matrix._index\n\n\n            matrix._index.splice(k, 1); // increase deletes\n\n\n            d++;\n          }\n        }\n      } // update matrix._ptr for current column\n\n\n      matrix._ptr[j] = matrix._values.length;\n    } // update matrix._size\n\n\n    matrix._size[0] = rows;\n    matrix._size[1] = columns; // return matrix\n\n    return matrix;\n  }\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * NOTE: This might be better suited to copy by default, instead of modifying\n   *       in place. For now, it operates in place to remain consistent with\n   *       resize().\n   *\n   * @memberof SparseMatrix\n   * @param {number[]} sizes          The new size the matrix should have.\n   *                                  Since sparse matrices are always two-dimensional,\n   *                                  size must be two numbers in either an array or a matrix\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n\n\n  SparseMatrix.prototype.reshape = function (sizes, copy) {\n    // validate arguments\n    if (!isArray(sizes)) {\n      throw new TypeError('Array expected');\n    }\n\n    if (sizes.length !== 2) {\n      throw new Error('Sparse matrices can only be reshaped in two dimensions');\n    } // check sizes\n\n\n    sizes.forEach(function (value) {\n      if (!isNumber(value) || !isInteger(value) || value <= -2 || value === 0) {\n        throw new TypeError('Invalid size, must contain positive integers or -1 ' + '(size: ' + format(sizes) + ')');\n      }\n    });\n    var currentLength = this._size[0] * this._size[1];\n    sizes = processSizesWildcard(sizes, currentLength);\n    var newLength = sizes[0] * sizes[1]; // m * n must not change\n\n    if (currentLength !== newLength) {\n      throw new Error('Reshaping sparse matrix will result in the wrong number of elements');\n    } // matrix to reshape\n\n\n    var m = copy ? this.clone() : this; // return unchanged if the same shape\n\n    if (this._size[0] === sizes[0] && this._size[1] === sizes[1]) {\n      return m;\n    } // Convert to COO format (generate a column index)\n\n\n    var colIndex = [];\n\n    for (var i = 0; i < m._ptr.length; i++) {\n      for (var j = 0; j < m._ptr[i + 1] - m._ptr[i]; j++) {\n        colIndex.push(i);\n      }\n    } // Clone the values array\n\n\n    var values = m._values.slice(); // Clone the row index array\n\n\n    var rowIndex = m._index.slice(); // Transform the (row, column) indices\n\n\n    for (var _i = 0; _i < m._index.length; _i++) {\n      var r1 = rowIndex[_i];\n      var c1 = colIndex[_i];\n      var flat = r1 * m._size[1] + c1;\n      colIndex[_i] = flat % sizes[1];\n      rowIndex[_i] = Math.floor(flat / sizes[1]);\n    } // Now reshaping is supposed to preserve the row-major order, BUT these sparse matrices are stored\n    // in column-major order, so we have to reorder the value array now. One option is to use a multisort,\n    // sorting several arrays based on some other array.\n    // OR, we could easily just:\n    // 1. Remove all values from the matrix\n\n\n    m._values.length = 0;\n    m._index.length = 0;\n    m._ptr.length = sizes[1] + 1;\n    m._size = sizes.slice();\n\n    for (var _i2 = 0; _i2 < m._ptr.length; _i2++) {\n      m._ptr[_i2] = 0;\n    } // 2. Re-insert all elements in the proper order (simplified code from SparseMatrix.prototype.set)\n    // This step is probably the most time-consuming\n\n\n    for (var h = 0; h < values.length; h++) {\n      var _i3 = rowIndex[h];\n      var _j = colIndex[h];\n      var v = values[h];\n\n      var k = _getValueIndex(_i3, m._ptr[_j], m._ptr[_j + 1], m._index);\n\n      _insert(k, _i3, _j, v, m._values, m._index, m._ptr);\n    } // The value indices are inserted out of order, but apparently that's... still OK?\n\n\n    return m;\n  };\n  /**\n   * Create a clone of the matrix\n   * @memberof SparseMatrix\n   * @return {SparseMatrix} clone\n   */\n\n\n  SparseMatrix.prototype.clone = function () {\n    var m = new SparseMatrix({\n      values: this._values ? clone(this._values) : undefined,\n      index: clone(this._index),\n      ptr: clone(this._ptr),\n      size: clone(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n  /**\n   * Retrieve the size of the matrix.\n   * @memberof SparseMatrix\n   * @returns {number[]} size\n   */\n\n\n  SparseMatrix.prototype.size = function () {\n    return this._size.slice(0); // copy the Array\n  };\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @memberof SparseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *\n   * @return {SparseMatrix} matrix\n   */\n\n\n  SparseMatrix.prototype.map = function (callback, skipZeros) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke map on a Pattern only matrix');\n    } // matrix instance\n\n\n    var me = this; // rows and columns\n\n    var rows = this._size[0];\n    var columns = this._size[1]; // invoke callback\n\n    var args = maxArgumentCount(callback);\n\n    var invoke = function invoke(v, i, j) {\n      // invoke callback\n      if (args === 1) return callback(v);\n      if (args === 2) return callback(v, [i, j]);\n      return callback(v, [i, j], me);\n    }; // invoke _map\n\n\n    return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);\n  };\n  /**\n   * Create a new matrix with the results of the callback function executed on the interval\n   * [minRow..maxRow, minColumn..maxColumn].\n   */\n\n\n  function _map(matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {\n    // result arrays\n    var values = [];\n    var index = [];\n    var ptr = []; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0;\n\n    if (isString(matrix._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar; // convert 0 to the same datatype\n\n      zero = typed.convert(0, matrix._datatype);\n    } // invoke callback\n\n\n    var invoke = function invoke(v, x, y) {\n      // invoke callback\n      v = callback(v, x, y); // check value != 0\n\n      if (!eq(v, zero)) {\n        // store value\n        values.push(v); // index\n\n        index.push(x);\n      }\n    }; // loop columns\n\n\n    for (var j = minColumn; j <= maxColumn; j++) {\n      // store pointer to values index\n      ptr.push(values.length); // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n\n      var k0 = matrix._ptr[j];\n      var k1 = matrix._ptr[j + 1];\n\n      if (skipZeros) {\n        // loop k within [k0, k1[\n        for (var k = k0; k < k1; k++) {\n          // row index\n          var i = matrix._index[k]; // check i is in range\n\n          if (i >= minRow && i <= maxRow) {\n            // value @ k\n            invoke(matrix._values[k], i - minRow, j - minColumn);\n          }\n        }\n      } else {\n        // create a cache holding all defined values\n        var _values = {};\n\n        for (var _k = k0; _k < k1; _k++) {\n          var _i4 = matrix._index[_k];\n          _values[_i4] = matrix._values[_k];\n        } // loop over all rows (indexes can be unordered so we can't use that),\n        // and either read the value or zero\n\n\n        for (var _i5 = minRow; _i5 <= maxRow; _i5++) {\n          var value = _i5 in _values ? _values[_i5] : 0;\n          invoke(value, _i5 - minRow, j - minColumn);\n        }\n      }\n    } // store number of values in ptr\n\n\n    ptr.push(values.length); // return sparse matrix\n\n    return new SparseMatrix({\n      values,\n      index,\n      ptr,\n      size: [maxRow - minRow + 1, maxColumn - minColumn + 1]\n    });\n  }\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @memberof SparseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *                              If false, the indices are guaranteed to be in order,\n   *                              if true, the indices can be unordered.\n   */\n\n\n  SparseMatrix.prototype.forEach = function (callback, skipZeros) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke forEach on a Pattern only matrix');\n    } // matrix instance\n\n\n    var me = this; // rows and columns\n\n    var rows = this._size[0];\n    var columns = this._size[1]; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n\n      if (skipZeros) {\n        // loop k within [k0, k1[\n        for (var k = k0; k < k1; k++) {\n          // row index\n          var i = this._index[k]; // value @ k\n\n          callback(this._values[k], [i, j], me);\n        }\n      } else {\n        // create a cache holding all defined values\n        var values = {};\n\n        for (var _k2 = k0; _k2 < k1; _k2++) {\n          var _i6 = this._index[_k2];\n          values[_i6] = this._values[_k2];\n        } // loop over all rows (indexes can be unordered so we can't use that),\n        // and either read the value or zero\n\n\n        for (var _i7 = 0; _i7 < rows; _i7++) {\n          var value = _i7 in values ? values[_i7] : 0;\n          callback(value, [_i7, j], me);\n        }\n      }\n    }\n  };\n  /**\n   * Iterate over the matrix elements, skipping zeros\n   * @return {Iterable<{ value, index: number[] }>}\n   */\n\n\n  SparseMatrix.prototype[Symbol.iterator] = function* () {\n    if (!this._values) {\n      throw new Error('Cannot iterate a Pattern only matrix');\n    }\n\n    var columns = this._size[1];\n\n    for (var j = 0; j < columns; j++) {\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n\n      for (var k = k0; k < k1; k++) {\n        // row index\n        var i = this._index[k];\n        yield {\n          value: this._values[k],\n          index: [i, j]\n        };\n      }\n    }\n  };\n  /**\n   * Create an Array with a copy of the data of the SparseMatrix\n   * @memberof SparseMatrix\n   * @returns {Array} array\n   */\n\n\n  SparseMatrix.prototype.toArray = function () {\n    return _toArray(this._values, this._index, this._ptr, this._size, true);\n  };\n  /**\n   * Get the primitive value of the SparseMatrix: a two dimensions array\n   * @memberof SparseMatrix\n   * @returns {Array} array\n   */\n\n\n  SparseMatrix.prototype.valueOf = function () {\n    return _toArray(this._values, this._index, this._ptr, this._size, false);\n  };\n\n  function _toArray(values, index, ptr, size, copy) {\n    // rows and columns\n    var rows = size[0];\n    var columns = size[1]; // result\n\n    var a = []; // vars\n\n    var i, j; // initialize array\n\n    for (i = 0; i < rows; i++) {\n      a[i] = [];\n\n      for (j = 0; j < columns; j++) {\n        a[i][j] = 0;\n      }\n    } // loop columns\n\n\n    for (j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1]; // loop k within [k0, k1[\n\n      for (var k = k0; k < k1; k++) {\n        // row index\n        i = index[k]; // set value (use one for pattern matrix)\n\n        a[i][j] = values ? copy ? clone(values[k]) : values[k] : 1;\n      }\n    }\n\n    return a;\n  }\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @memberof SparseMatrix\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n\n\n  SparseMatrix.prototype.format = function (options) {\n    // rows and columns\n    var rows = this._size[0];\n    var columns = this._size[1]; // density\n\n    var density = this.density(); // rows & columns\n\n    var str = 'Sparse Matrix [' + format(rows, options) + ' x ' + format(columns, options) + '] density: ' + format(density, options) + '\\n'; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1]; // loop k within [k0, k1[\n\n      for (var k = k0; k < k1; k++) {\n        // row index\n        var i = this._index[k]; // append value\n\n        str += '\\n    (' + format(i, options) + ', ' + format(j, options) + ') ==> ' + (this._values ? format(this._values[k], options) : 'X');\n      }\n    }\n\n    return str;\n  };\n  /**\n   * Get a string representation of the matrix\n   * @memberof SparseMatrix\n   * @returns {string} str\n   */\n\n\n  SparseMatrix.prototype.toString = function () {\n    return format(this.toArray());\n  };\n  /**\n   * Get a JSON representation of the matrix\n   * @memberof SparseMatrix\n   * @returns {Object}\n   */\n\n\n  SparseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'SparseMatrix',\n      values: this._values,\n      index: this._index,\n      ptr: this._ptr,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n  /**\n   * Get the kth Matrix diagonal.\n   *\n   * @memberof SparseMatrix\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n   *\n   * @returns {Matrix}                     The matrix vector with the diagonal values.\n   */\n\n\n  SparseMatrix.prototype.diagonal = function (k) {\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      } // is must be an integer\n\n\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0; // rows & columns\n\n    var rows = this._size[0];\n    var columns = this._size[1]; // number diagonal values\n\n    var n = Math.min(rows - kSub, columns - kSuper); // diagonal arrays\n\n    var values = [];\n    var index = [];\n    var ptr = []; // initial ptr value\n\n    ptr[0] = 0; // loop columns\n\n    for (var j = kSuper; j < columns && values.length < n; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1]; // loop x within [k0, k1[\n\n      for (var x = k0; x < k1; x++) {\n        // row index\n        var i = this._index[x]; // check row\n\n        if (i === j - kSuper + kSub) {\n          // value on this column\n          values.push(this._values[x]); // store row\n\n          index[values.length - 1] = i - kSub; // exit loop\n\n          break;\n        }\n      }\n    } // close ptr\n\n\n    ptr.push(values.length); // return matrix\n\n    return new SparseMatrix({\n      values,\n      index,\n      ptr,\n      size: [n, 1]\n    });\n  };\n  /**\n   * Generate a matrix from a JSON object\n   * @memberof SparseMatrix\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"SparseMatrix\", \"values\": [], \"index\": [], \"ptr\": [], \"size\": []}`,\n   *                       where mathjs is optional\n   * @returns {SparseMatrix}\n   */\n\n\n  SparseMatrix.fromJSON = function (json) {\n    return new SparseMatrix(json);\n  };\n  /**\n   * Create a diagonal matrix.\n   *\n   * @memberof SparseMatrix\n   * @param {Array} size                       The matrix size.\n   * @param {number | Array | Matrix } value   The values for the diagonal.\n   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.\n   * @param {number} [defaultValue]            The default value for non-diagonal\n   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.\n   *\n   * @returns {SparseMatrix}\n   */\n\n\n  SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {\n    if (!isArray(size)) {\n      throw new TypeError('Array expected, size parameter');\n    }\n\n    if (size.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    } // map size & validate\n\n\n    size = size.map(function (s) {\n      // check it is a big number\n      if (isBigNumber(s)) {\n        // convert it\n        s = s.toNumber();\n      } // validate arguments\n\n\n      if (!isNumber(s) || !isInteger(s) || s < 1) {\n        throw new Error('Size values must be positive integers');\n      }\n\n      return s;\n    }); // validate k if any\n\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      } // is must be an integer\n\n\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    } // equal signature to use\n\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0;\n\n    if (isString(datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar; // convert 0 to the same datatype\n\n      zero = typed.convert(0, datatype);\n    }\n\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0; // rows and columns\n\n    var rows = size[0];\n    var columns = size[1]; // number of non-zero items\n\n    var n = Math.min(rows - kSub, columns - kSuper); // value extraction function\n\n    var _value; // check value\n\n\n    if (isArray(value)) {\n      // validate array\n      if (value.length !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid value array length');\n      } // define function\n\n\n      _value = function _value(i) {\n        // return value @ i\n        return value[i];\n      };\n    } else if (isMatrix(value)) {\n      // matrix size\n      var ms = value.size(); // validate matrix\n\n      if (ms.length !== 1 || ms[0] !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid matrix length');\n      } // define function\n\n\n      _value = function _value(i) {\n        // return value @ i\n        return value.get([i]);\n      };\n    } else {\n      // define function\n      _value = function _value() {\n        // return value\n        return value;\n      };\n    } // create arrays\n\n\n    var values = [];\n    var index = [];\n    var ptr = []; // loop items\n\n    for (var j = 0; j < columns; j++) {\n      // number of rows with value\n      ptr.push(values.length); // diagonal index\n\n      var i = j - kSuper; // check we need to set diagonal value\n\n      if (i >= 0 && i < n) {\n        // get value @ i\n        var v = _value(i); // check for zero\n\n\n        if (!eq(v, zero)) {\n          // column\n          index.push(i + kSub); // add value\n\n          values.push(v);\n        }\n      }\n    } // last value should be number of values\n\n\n    ptr.push(values.length); // create SparseMatrix\n\n    return new SparseMatrix({\n      values,\n      index,\n      ptr,\n      size: [rows, columns]\n    });\n  };\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @memberof SparseMatrix\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n\n\n  SparseMatrix.prototype.swapRows = function (i, j) {\n    // check index\n    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {\n      throw new Error('Row index must be positive integers');\n    } // check dimensions\n\n\n    if (this._size.length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    } // validate index\n\n\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[0]); // swap rows\n\n    SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr); // return current instance\n\n\n    return this;\n  };\n  /**\n   * Loop rows with data in column j.\n   *\n   * @param {number} j            Column\n   * @param {Array} values        Matrix values\n   * @param {Array} index         Matrix row indeces\n   * @param {Array} ptr           Matrix column pointers\n   * @param {Function} callback   Callback function invoked for every row in column j\n   */\n\n\n  SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {\n    // indeces for column j\n    var k0 = ptr[j];\n    var k1 = ptr[j + 1]; // loop\n\n    for (var k = k0; k < k1; k++) {\n      // invoke callback\n      callback(index[k], values[k]);\n    }\n  };\n  /**\n   * Swap rows x and y in Sparse Matrix data structures.\n   *\n   * @param {number} x         Matrix row index 1\n   * @param {number} y         Matrix row index 2\n   * @param {number} columns   Number of columns in matrix\n   * @param {Array} values     Matrix values\n   * @param {Array} index      Matrix row indeces\n   * @param {Array} ptr        Matrix column pointers\n   */\n\n\n  SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1]; // find value index @ x\n\n      var kx = _getValueIndex(x, k0, k1, index); // find value index @ x\n\n\n      var ky = _getValueIndex(y, k0, k1, index); // check both rows exist in matrix\n\n\n      if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {\n        // swap values (check for pattern matrix)\n        if (values) {\n          var v = values[kx];\n          values[kx] = values[ky];\n          values[ky] = v;\n        } // next column\n\n\n        continue;\n      } // check x row exist & no y row\n\n\n      if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {\n        // value @ x (check for pattern matrix)\n        var vx = values ? values[kx] : undefined; // insert value @ y\n\n        index.splice(ky, 0, y);\n\n        if (values) {\n          values.splice(ky, 0, vx);\n        } // remove value @ x (adjust array index if needed)\n\n\n        index.splice(ky <= kx ? kx + 1 : kx, 1);\n\n        if (values) {\n          values.splice(ky <= kx ? kx + 1 : kx, 1);\n        } // next column\n\n\n        continue;\n      } // check y row exist & no x row\n\n\n      if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {\n        // value @ y (check for pattern matrix)\n        var vy = values ? values[ky] : undefined; // insert value @ x\n\n        index.splice(kx, 0, x);\n\n        if (values) {\n          values.splice(kx, 0, vy);\n        } // remove value @ y (adjust array index if needed)\n\n\n        index.splice(kx <= ky ? ky + 1 : ky, 1);\n\n        if (values) {\n          values.splice(kx <= ky ? ky + 1 : ky, 1);\n        }\n      }\n    }\n  };\n\n  return SparseMatrix;\n}, {\n  isClass: true\n});","import { factory } from '../utils/factory.js';\nimport { deepMap } from '../utils/collection.js';\nvar name = 'number';\nvar dependencies = ['typed'];\n/**\n * Separates the radix, integer part, and fractional part of a non decimal number string\n * @param {string} input string to parse\n * @returns {object} the parts of the string or null if not a valid input\n */\n\nfunction getNonDecimalNumberParts(input) {\n  var nonDecimalWithRadixMatch = input.match(/(0[box])([0-9a-fA-F]*)\\.([0-9a-fA-F]*)/);\n\n  if (nonDecimalWithRadixMatch) {\n    var radix = {\n      '0b': 2,\n      '0o': 8,\n      '0x': 16\n    }[nonDecimalWithRadixMatch[1]];\n    var integerPart = nonDecimalWithRadixMatch[2];\n    var fractionalPart = nonDecimalWithRadixMatch[3];\n    return {\n      input,\n      radix,\n      integerPart,\n      fractionalPart\n    };\n  } else {\n    return null;\n  }\n}\n/**\n * Makes a number from a radix, and integer part, and a fractional part\n * @param {parts} [x] parts of the number string (from getNonDecimalNumberParts)\n * @returns {number} the number\n */\n\n\nfunction makeNumberFromNonDecimalParts(parts) {\n  var n = parseInt(parts.integerPart, parts.radix);\n  var f = 0;\n\n  for (var i = 0; i < parts.fractionalPart.length; i++) {\n    var digitValue = parseInt(parts.fractionalPart[i], parts.radix);\n    f += digitValue / Math.pow(parts.radix, i + 1);\n  }\n\n  var result = n + f;\n\n  if (isNaN(result)) {\n    throw new SyntaxError('String \"' + parts.input + '\" is no valid number');\n  }\n\n  return result;\n}\n\nexport var createNumber = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n\n  /**\n   * Create a number or convert a string, boolean, or unit to a number.\n   * When value is a matrix, all elements will be converted to number.\n   *\n   * Syntax:\n   *\n   *    math.number(value)\n   *    math.number(unit, valuelessUnit)\n   *\n   * Examples:\n   *\n   *    math.number(2)                         // returns number 2\n   *    math.number('7.2')                     // returns number 7.2\n   *    math.number(true)                      // returns number 1\n   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]\n   *    math.number(math.unit('52cm'), 'm')    // returns 0.52\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, string, unit\n   *\n   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\n   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\n   * @return {number | Array | Matrix} The created number\n   */\n  var number = typed('number', {\n    '': function _() {\n      return 0;\n    },\n    number: function number(x) {\n      return x;\n    },\n    string: function string(x) {\n      if (x === 'NaN') return NaN;\n      var nonDecimalNumberParts = getNonDecimalNumberParts(x);\n\n      if (nonDecimalNumberParts) {\n        return makeNumberFromNonDecimalParts(nonDecimalNumberParts);\n      }\n\n      var size = 0;\n      var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);\n\n      if (wordSizeSuffixMatch) {\n        // x includes a size suffix like 0xffffi32, so we extract\n        // the suffix and remove it from x\n        size = Number(wordSizeSuffixMatch[2]);\n        x = wordSizeSuffixMatch[1];\n      }\n\n      var num = Number(x);\n\n      if (isNaN(num)) {\n        throw new SyntaxError('String \"' + x + '\" is no valid number');\n      }\n\n      if (wordSizeSuffixMatch) {\n        // x is a signed bin, oct, or hex literal\n        // num is the value of string x if x is interpreted as unsigned\n        if (num > 2 ** size - 1) {\n          // literal is too large for size suffix\n          throw new SyntaxError(\"String \\\"\".concat(x, \"\\\" is out of range\"));\n        } // check if the bit at index size - 1 is set and if so do the twos complement\n\n\n        if (num >= 2 ** (size - 1)) {\n          num = num - 2 ** size;\n        }\n      }\n\n      return num;\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toNumber();\n    },\n    Fraction: function Fraction(x) {\n      return x.valueOf();\n    },\n    Unit: function Unit(x) {\n      throw new Error('Second argument with valueless unit expected');\n    },\n    null: function _null(x) {\n      return 0;\n    },\n    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {\n      return unit.toNumber(valuelessUnit);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  }); // reviver function to parse a JSON object like:\n  //\n  //     {\"mathjs\":\"number\",\"value\":\"2.3\"}\n  //\n  // into a number 2.3\n\n  number.fromJSON = function (json) {\n    return parseFloat(json.value);\n  };\n\n  return number;\n});","import { factory } from '../../../utils/factory.js';\nimport { deepMap } from '../../../utils/collection.js';\nvar name = 'bignumber';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createBignumber = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber\n  } = _ref;\n\n  /**\n   * Create a BigNumber, which can store numbers with arbitrary precision.\n   * When a matrix is provided, all elements will be converted to BigNumber.\n   *\n   * Syntax:\n   *\n   *    math.bignumber(x)\n   *\n   * Examples:\n   *\n   *    0.1 + 0.2                                  // returns number 0.30000000000000004\n   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3\n   *\n   *\n   *    7.2e500                                    // returns number Infinity\n   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500\n   *\n   * See also:\n   *\n   *    boolean, complex, index, matrix, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,\n   *                                                    0 by default.\n   * @returns {BigNumber} The created bignumber\n   */\n  return typed('bignumber', {\n    '': function _() {\n      return new BigNumber(0);\n    },\n    number: function number(x) {\n      // convert to string to prevent errors in case of >15 digits\n      return new BigNumber(x + '');\n    },\n    string: function string(x) {\n      var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);\n\n      if (wordSizeSuffixMatch) {\n        // x has a word size suffix\n        var size = wordSizeSuffixMatch[2];\n        var n = BigNumber(wordSizeSuffixMatch[1]);\n        var twoPowSize = new BigNumber(2).pow(Number(size));\n\n        if (n.gt(twoPowSize.sub(1))) {\n          throw new SyntaxError(\"String \\\"\".concat(x, \"\\\" is out of range\"));\n        }\n\n        var twoPowSizeSubOne = new BigNumber(2).pow(Number(size) - 1);\n\n        if (n.gte(twoPowSizeSubOne)) {\n          return n.sub(twoPowSize);\n        } else {\n          return n;\n        }\n      }\n\n      return new BigNumber(x);\n    },\n    BigNumber: function BigNumber(x) {\n      // we assume a BigNumber is immutable\n      return x;\n    },\n    Fraction: function Fraction(x) {\n      return new BigNumber(x.n).div(x.d).times(x.s);\n    },\n    null: function _null(x) {\n      return new BigNumber(0);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","import { factory } from '../../../utils/factory.js';\nimport { deepMap } from '../../../utils/collection.js';\nvar name = 'fraction';\nvar dependencies = ['typed', 'Fraction'];\nexport var createFraction = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Fraction\n  } = _ref;\n\n  /**\n   * Create a fraction or convert a value to a fraction.\n   *\n   * With one numeric argument, produces the closest rational approximation to the\n   * input.\n   * With two arguments, the first is the numerator and the second is the denominator,\n   * and creates the corresponding fraction. Both numerator and denominator must be\n   * integers.\n   * With one object argument, looks for the integer numerator as the value of property\n   * 'n' and the integer denominator as the value of property 'd'.\n   * With a matrix argument, creates a matrix of the same shape with entries\n   * converted into fractions.\n   *\n   * Syntax:\n   *     math.fraction(value)\n   *     math.fraction(numerator, denominator)\n   *     math.fraction({n: numerator, d: denominator})\n   *     math.fraction(matrix: Array | Matrix)\n   *\n   * Examples:\n   *\n   *     math.fraction(6.283)             // returns Fraction 6283/1000\n   *     math.fraction(1, 3)              // returns Fraction 1/3\n   *     math.fraction('2/3')             // returns Fraction 2/3\n   *     math.fraction({n: 2, d: 3})      // returns Fraction 2/3\n   *     math.fraction([0.2, 0.25, 1.25]) // returns Array [1/5, 1/4, 5/4]\n   *     math.fraction(4, 5.1)            // throws Error: Parameters must be integer\n   *\n   * See also:\n   *\n   *    bignumber, number, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]\n   *            Arguments specifying the value, or numerator and denominator of\n   *            the fraction\n   * @return {Fraction | Array | Matrix} Returns a fraction\n   */\n  return typed('fraction', {\n    number: function number(x) {\n      if (!isFinite(x) || isNaN(x)) {\n        throw new Error(x + ' cannot be represented as a fraction');\n      }\n\n      return new Fraction(x);\n    },\n    string: function string(x) {\n      return new Fraction(x);\n    },\n    'number, number': function numberNumber(numerator, denominator) {\n      return new Fraction(numerator, denominator);\n    },\n    null: function _null(x) {\n      return new Fraction(0);\n    },\n    BigNumber: function BigNumber(x) {\n      return new Fraction(x.toString());\n    },\n    Fraction: function Fraction(x) {\n      return x; // fractions are immutable\n    },\n    Object: function Object(x) {\n      return new Fraction(x);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","import { factory } from '../../../utils/factory.js';\nvar name = 'matrix';\nvar dependencies = ['typed', 'Matrix', 'DenseMatrix', 'SparseMatrix'];\nexport var createMatrix = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Matrix,\n    DenseMatrix,\n    SparseMatrix\n  } = _ref;\n\n  /**\n   * Create a Matrix. The function creates a new `math.Matrix` object from\n   * an `Array`. A Matrix has utility functions to manipulate the data in the\n   * matrix, like getting the size and getting or setting values in the matrix.\n   * Supported storage formats are 'dense' and 'sparse'.\n   *\n   * Syntax:\n   *\n   *    math.matrix()                         // creates an empty matrix using default storage format (dense).\n   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).\n   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.\n   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.\n   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.\n   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.\n   *\n   * Examples:\n   *\n   *    let m = math.matrix([[1, 2], [3, 4]])\n   *    m.size()                        // Array [2, 2]\n   *    m.resize([3, 2], 5)\n   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]\n   *    m.get([1, 0])                    // number 3\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, number, string, unit, sparse\n   *\n   * @param {Array | Matrix} [data]    A multi dimensional array\n   * @param {string} [format]          The Matrix storage format, either `'dense'` or `'sparse'`\n   * @param {string} [datatype]        Type of the values\n   *\n   * @return {Matrix} The created matrix\n   */\n  return typed(name, {\n    '': function _() {\n      return _create([]);\n    },\n    string: function string(format) {\n      return _create([], format);\n    },\n    'string, string': function stringString(format, datatype) {\n      return _create([], format, datatype);\n    },\n    Array: function Array(data) {\n      return _create(data);\n    },\n    Matrix: function Matrix(data) {\n      return _create(data, data.storage());\n    },\n    'Array | Matrix, string': _create,\n    'Array | Matrix, string, string': _create\n  });\n  /**\n   * Create a new Matrix with given storage format\n   * @param {Array} data\n   * @param {string} [format]\n   * @param {string} [datatype]\n   * @returns {Matrix} Returns a new Matrix\n   * @private\n   */\n\n  function _create(data, format, datatype) {\n    // get storage format constructor\n    if (format === 'dense' || format === 'default' || format === undefined) {\n      return new DenseMatrix(data, datatype);\n    }\n\n    if (format === 'sparse') {\n      return new SparseMatrix(data, datatype);\n    }\n\n    throw new TypeError('Unknown matrix type ' + JSON.stringify(format) + '.');\n  }\n});","import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { unaryMinusNumber } from '../../plain/number/index.js';\nvar name = 'unaryMinus';\nvar dependencies = ['typed'];\nexport var createUnaryMinus = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n\n  /**\n   * Inverse the sign of a value, apply a unary minus operation.\n   *\n   * For matrices, the function is evaluated element wise. Boolean values and\n   * strings will be converted to a number. For complex numbers, both real and\n   * complex value are inverted.\n   *\n   * Syntax:\n   *\n   *    math.unaryMinus(x)\n   *\n   * Examples:\n   *\n   *    math.unaryMinus(3.5)      // returns -3.5\n   *    math.unaryMinus(-4.2)     // returns 4.2\n   *\n   * See also:\n   *\n   *    add, subtract, unaryPlus\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.\n   */\n  return typed(name, {\n    number: unaryMinusNumber,\n    'Complex | BigNumber | Fraction': x => x.neg(),\n    Unit: typed.referToSelf(self => x => {\n      var res = x.clone();\n      res.value = typed.find(self, res.valueType())(x.value);\n      return res;\n    }),\n    // deep map collection, skip zeros since unaryMinus(0) = 0\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true)) // TODO: add support for string\n\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { addNumber } from '../../plain/number/index.js';\nvar name = 'addScalar';\nvar dependencies = ['typed'];\nexport var createAddScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n\n  /**\n   * Add two scalar values, `x + y`.\n   * This function is meant for internal use: it is used by the public function\n   * `add`\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Sum of `x` and `y`\n   * @private\n   */\n  return typed(name, {\n    'number, number': addNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.add(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.plus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.add(y);\n    },\n    'Unit, Unit': typed.referToSelf(self => (x, y) => {\n      if (x.value === null || x.value === undefined) {\n        throw new Error('Parameter x contains a unit with undefined value');\n      }\n\n      if (y.value === null || y.value === undefined) {\n        throw new Error('Parameter y contains a unit with undefined value');\n      }\n\n      if (!x.equalBase(y)) throw new Error('Units do not match');\n      var res = x.clone();\n      res.value = typed.find(self, [res.valueType(), y.valueType()])(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    })\n  });\n});","import { factory } from '../../../utils/factory.js';\nvar name = 'matAlgo11xS0s';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo11xS0s = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked NZ times (number of nonzero items in S).\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0          ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n  return function matAlgo11xS0s(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix\n\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // initialize ptr\n      cptr[j] = cindex.length; // values in j\n\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = aindex[k]; // invoke callback\n\n        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b); // check value is zero\n\n        if (!eq(v, zero)) {\n          // push index & value\n          cindex.push(i);\n          cvalues.push(v);\n        }\n      }\n    } // update ptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return s.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","import Decimal from 'decimal.js';\nimport { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nvar name = 'ceil';\nvar dependencies = ['typed', 'config', 'round', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\nexport var createCeilNumber = /* #__PURE__ */factory(name, ['typed', 'config', 'round'], _ref => {\n  var {\n    typed,\n    config,\n    round\n  } = _ref;\n  return typed(name, {\n    number: function number(x) {\n      if (nearlyEqual(x, round(x), config.epsilon)) {\n        return round(x);\n      } else {\n        return Math.ceil(x);\n      }\n    },\n    'number, number': function numberNumber(x, n) {\n      if (nearlyEqual(x, round(x, n), config.epsilon)) {\n        return round(x, n);\n      } else {\n        var [number, exponent] = \"\".concat(x, \"e\").split('e');\n        var result = Math.ceil(Number(\"\".concat(number, \"e\").concat(Number(exponent) + n)));\n        [number, exponent] = \"\".concat(result, \"e\").split('e');\n        return Number(\"\".concat(number, \"e\").concat(Number(exponent) - n));\n      }\n    }\n  });\n});\nexport var createCeil = /* #__PURE__ */factory(name, dependencies, _ref2 => {\n  var {\n    typed,\n    config,\n    round,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix\n  } = _ref2;\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var ceilNumber = createCeilNumber({\n    typed,\n    config,\n    round\n  });\n  /**\n   * Round a value towards plus infinity\n   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.ceil(x)\n   *    math.ceil(x, n)\n   *\n   * Examples:\n   *\n   *    math.ceil(3.2)               // returns number 4\n   *    math.ceil(3.8)               // returns number 4\n   *    math.ceil(-4.2)              // returns number -4\n   *    math.ceil(-4.7)              // returns number -4\n   *\n   *    math.ceil(3.212, 2)          // returns number 3.22\n   *    math.ceil(3.288, 2)          // returns number 3.29\n   *    math.ceil(-4.212, 2)         // returns number -4.21\n   *    math.ceil(-4.782, 2)         // returns number -4.78\n   *\n   *    const c = math.complex(3.24, -2.71)\n   *    math.ceil(c)                 // returns Complex 4 - 2i\n   *    math.ceil(c, 1)              // returns Complex 3.3 - 2.7i\n   *\n   *    math.ceil([3.2, 3.8, -4.7])  // returns Array [4, 4, -4]\n   *    math.ceil([3.21, 3.82, -4.71], 1)  // returns Array [3.3, 3.9, -4.7]\n   *\n   * See also:\n   *\n   *    floor, fix, round\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n\n  return typed('ceil', {\n    number: ceilNumber.signatures.number,\n    'number,number': ceilNumber.signatures['number,number'],\n    Complex: function Complex(x) {\n      return x.ceil();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      return x.ceil(n);\n    },\n    'Complex, BigNumber': function ComplexBigNumber(x, n) {\n      return x.ceil(n.toNumber());\n    },\n    BigNumber: function BigNumber(x) {\n      if (bigNearlyEqual(x, round(x), config.epsilon)) {\n        return round(x);\n      } else {\n        return x.ceil();\n      }\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (bigNearlyEqual(x, round(x, n), config.epsilon)) {\n        return round(x, n);\n      } else {\n        return x.toDecimalPlaces(n.toNumber(), Decimal.ROUND_CEIL);\n      }\n    },\n    Fraction: function Fraction(x) {\n      return x.ceil();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      return x.ceil(n);\n    },\n    'Fraction, BigNumber': function FractionBigNumber(x, n) {\n      return x.ceil(n.toNumber());\n    },\n    'Array | Matrix': typed.referToSelf(self => x => {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, self, true);\n    }),\n    'Array, number | BigNumber': typed.referToSelf(self => (x, n) => {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, i => self(i, n), true);\n    }),\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'number | Complex | Fraction | BigNumber, Array': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(y), x, self, true).valueOf();\n    }),\n    'number | Complex | Fraction | BigNumber, Matrix': typed.referToSelf(self => (x, y) => {\n      if (equalScalar(x, 0)) return zeros(y.size(), y.storage());\n\n      if (y.storage() === 'dense') {\n        return matAlgo14xDs(y, x, self, true);\n      }\n\n      return matAlgo12xSfs(y, x, self, true);\n    })\n  });\n});","import { factory } from '../../../utils/factory.js';\nvar name = 'matAlgo12xSfs';\nvar dependencies = ['typed', 'DenseMatrix'];\nexport var createMatAlgo12xSfs = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    DenseMatrix\n  } = _ref;\n\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked MxN times.\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  f(0, b)    ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n  return function matAlgo12xSfs(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix\n\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cdata = []; // workspaces\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1; // values in j\n\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var r = aindex[k]; // update workspace\n\n        x[r] = avalues[k];\n        w[r] = mark;\n      } // loop rows\n\n\n      for (var i = 0; i < rows; i++) {\n        // initialize C on first column\n        if (j === 0) {\n          // create row array\n          cdata[i] = [];\n        } // check sparse matrix has a value @ i,j\n\n\n        if (w[i] === mark) {\n          // invoke callback, update C\n          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);\n        } else {\n          // dense matrix value @ i, j\n          cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);\n        }\n      }\n    } // return dense matrix\n\n\n    return new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","import { factory } from '../../../utils/factory.js';\nimport { clone } from '../../../utils/object.js';\nvar name = 'matAlgo14xDs';\nvar dependencies = ['typed'];\nexport var createMatAlgo14xDs = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n\n  /**\n   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j,...z) = f(Aij..z, b)\n   *\n   * @param {Matrix}   a                 The DenseMatrix instance (A)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij..z,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042\n   */\n  return function matAlgo14xDs(a, b, callback, inverse) {\n    // a arrays\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // datatype\n\n    var dt; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // populate cdata, iterate through dimensions\n\n\n    var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : []; // c matrix\n\n    return a.createDenseMatrix({\n      data: cdata,\n      size: clone(asize),\n      datatype: dt\n    });\n  }; // recursive function\n\n  function _iterate(f, level, s, n, av, bv, inverse) {\n    // initialize array for this level\n    var cv = []; // check we reach the last level\n\n    if (level === s.length - 1) {\n      // loop arrays in last level\n      for (var i = 0; i < n; i++) {\n        // invoke callback and store value\n        cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);\n      }\n    } else {\n      // iterate current level\n      for (var j = 0; j < n; j++) {\n        // iterate next level\n        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);\n      }\n    }\n\n    return cv;\n  }\n});","import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo01xDSid';\nvar dependencies = ['typed'];\nexport var createMatAlgo01xDSid = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n\n  /**\n   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).\n   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  Dij          ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n  return function algorithm1(denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype; // sparse matrix arrays\n\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // sparse matrix cannot be a Pattern matrix\n\n\n    if (!bvalues) {\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // process data types\n\n    var dt = typeof adt === 'string' && adt === bdt ? adt : undefined; // callback function\n\n    var cf = dt ? typed.find(callback, [dt, dt]) : callback; // vars\n\n    var i, j; // result (DenseMatrix)\n\n    var cdata = []; // initialize c\n\n    for (i = 0; i < rows; i++) {\n      cdata[i] = [];\n    } // workspace\n\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // loop columns in b\n\n    for (j = 0; j < columns; j++) {\n      // column mark\n      var mark = j + 1; // values in column j\n\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k]; // update workspace\n\n        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]); // mark i as updated\n\n        w[i] = mark;\n      } // loop rows\n\n\n      for (i = 0; i < rows; i++) {\n        // check row is in workspace\n        if (w[i] === mark) {\n          // c[i][j] was already calculated\n          cdata[i][j] = x[i];\n        } else {\n          // item does not exist in S\n          cdata[i][j] = adata[i][j];\n        }\n      }\n    } // return dense matrix\n\n\n    return denseMatrix.createDenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","import Decimal from 'decimal.js';\nimport { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nvar name = 'floor';\nvar dependencies = ['typed', 'config', 'round', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\nexport var createFloorNumber = /* #__PURE__ */factory(name, ['typed', 'config', 'round'], _ref => {\n  var {\n    typed,\n    config,\n    round\n  } = _ref;\n  return typed(name, {\n    number: function number(x) {\n      if (nearlyEqual(x, round(x), config.epsilon)) {\n        return round(x);\n      } else {\n        return Math.floor(x);\n      }\n    },\n    'number, number': function numberNumber(x, n) {\n      if (nearlyEqual(x, round(x, n), config.epsilon)) {\n        return round(x, n);\n      } else {\n        var [number, exponent] = \"\".concat(x, \"e\").split('e');\n        var result = Math.floor(Number(\"\".concat(number, \"e\").concat(Number(exponent) + n)));\n        [number, exponent] = \"\".concat(result, \"e\").split('e');\n        return Number(\"\".concat(number, \"e\").concat(Number(exponent) - n));\n      }\n    }\n  });\n});\nexport var createFloor = /* #__PURE__ */factory(name, dependencies, _ref2 => {\n  var {\n    typed,\n    config,\n    round,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix\n  } = _ref2;\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var floorNumber = createFloorNumber({\n    typed,\n    config,\n    round\n  });\n  /**\n   * Round a value towards minus infinity.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.floor(x)\n   *    math.floor(x, n)\n   *\n   * Examples:\n   *\n   *    math.floor(3.2)              // returns number 3\n   *    math.floor(3.8)              // returns number 3\n   *    math.floor(-4.2)             // returns number -5\n   *    math.floor(-4.7)             // returns number -5\n   *\n   *    math.floor(3.212, 2)          // returns number 3.21\n   *    math.floor(3.288, 2)          // returns number 3.28\n   *    math.floor(-4.212, 2)         // returns number -4.22\n   *    math.floor(-4.782, 2)         // returns number -4.79\n   *\n   *    const c = math.complex(3.24, -2.71)\n   *    math.floor(c)                 // returns Complex 3 - 3i\n   *    math.floor(c, 1)              // returns Complex 3.2 -2.8i\n   *\n   *    math.floor([3.2, 3.8, -4.7])       // returns Array [3, 3, -5]\n   *    math.floor([3.21, 3.82, -4.71], 1)  // returns Array [3.2, 3.8, -4.8]\n   *\n   *    math.floor(math.tau, [2, 3])  // returns Array [6.28, 6.283]\n   *\n   *    // Note that floor(array, array) currently not implemented.\n   *\n   * See also:\n   *\n   *    ceil, fix, round\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n\n  return typed('floor', {\n    number: floorNumber.signatures.number,\n    'number,number': floorNumber.signatures['number,number'],\n    Complex: function Complex(x) {\n      return x.floor();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      return x.floor(n);\n    },\n    'Complex, BigNumber': function ComplexBigNumber(x, n) {\n      return x.floor(n.toNumber());\n    },\n    BigNumber: function BigNumber(x) {\n      if (bigNearlyEqual(x, round(x), config.epsilon)) {\n        return round(x);\n      } else {\n        return x.floor();\n      }\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (bigNearlyEqual(x, round(x, n), config.epsilon)) {\n        return round(x, n);\n      } else {\n        return x.toDecimalPlaces(n.toNumber(), Decimal.ROUND_FLOOR);\n      }\n    },\n    Fraction: function Fraction(x) {\n      return x.floor();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      return x.floor(n);\n    },\n    'Fraction, BigNumber': function FractionBigNumber(x, n) {\n      return x.floor(n.toNumber());\n    },\n    'Array | Matrix': typed.referToSelf(self => x => {\n      // deep map collection, skip zeros since floor(0) = 0\n      return deepMap(x, self, true);\n    }),\n    'Array, number | BigNumber': typed.referToSelf(self => (x, n) => {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, i => self(i, n), true);\n    }),\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'number | Complex | Fraction | BigNumber, Array': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(y), x, self, true).valueOf();\n    }),\n    'number | Complex | Fraction | BigNumber, Matrix': typed.referToSelf(self => (x, y) => {\n      if (equalScalar(x, 0)) return zeros(y.size(), y.storage());\n\n      if (y.storage() === 'dense') {\n        return matAlgo14xDs(y, x, self, true);\n      }\n\n      return matAlgo12xSfs(y, x, self, true);\n    })\n  });\n});","import { factory } from '../../../utils/factory.js';\nvar name = 'matAlgo10xSids';\nvar dependencies = ['typed', 'DenseMatrix'];\nexport var createMatAlgo10xSids = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    DenseMatrix\n  } = _ref;\n\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked NZ times (number of nonzero items in S).\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  b          ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n  return function matAlgo10xSids(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix\n\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cdata = []; // workspaces\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1; // values in j\n\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var r = aindex[k]; // update workspace\n\n        x[r] = avalues[k];\n        w[r] = mark;\n      } // loop rows\n\n\n      for (var i = 0; i < rows; i++) {\n        // initialize C on first column\n        if (j === 0) {\n          // create row array\n          cdata[i] = [];\n        } // check sparse matrix has a value @ i,j\n\n\n        if (w[i] === mark) {\n          // invoke callback, update C\n          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);\n        } else {\n          // dense matrix value @ i, j\n          cdata[i][j] = b;\n        }\n      }\n    } // return dense matrix\n\n\n    return new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo13xDD';\nvar dependencies = ['typed'];\nexport var createMatAlgo13xDD = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n\n  /**\n   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j,...z) = f(Aij..z, Bij..z)\n   *\n   * @param {Matrix}   a                 The DenseMatrix instance (A)\n   * @param {Matrix}   b                 The DenseMatrix instance (B)\n   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658\n   */\n  return function matAlgo13xDD(a, b, callback) {\n    // a arrays\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b arrays\n\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype; // c arrays\n\n    var csize = []; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // validate each one of the dimension sizes\n\n\n    for (var s = 0; s < asize.length; s++) {\n      // must match\n      if (asize[s] !== bsize[s]) {\n        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n      } // update dimension in c\n\n\n      csize[s] = asize[s];\n    } // datatype\n\n\n    var dt; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // populate cdata, iterate through dimensions\n\n\n    var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : []; // c matrix\n\n    return a.createDenseMatrix({\n      data: cdata,\n      size: csize,\n      datatype: dt\n    });\n  }; // recursive function\n\n  function _iterate(f, level, s, n, av, bv) {\n    // initialize array for this level\n    var cv = []; // check we reach the last level\n\n    if (level === s.length - 1) {\n      // loop arrays in last level\n      for (var i = 0; i < n; i++) {\n        // invoke callback and store value\n        cv[i] = f(av[i], bv[i]);\n      }\n    } else {\n      // iterate current level\n      for (var j = 0; j < n; j++) {\n        // iterate next level\n        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);\n      }\n    }\n\n    return cv;\n  }\n});","import { factory } from '../../../utils/factory.js';\nimport { extend } from '../../../utils/object.js';\nimport { createMatAlgo13xDD } from './matAlgo13xDD.js';\nimport { createMatAlgo14xDs } from './matAlgo14xDs.js';\nvar name = 'matrixAlgorithmSuite';\nvar dependencies = ['typed', 'matrix'];\nexport var createMatrixAlgorithmSuite = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  var matAlgo13xDD = createMatAlgo13xDD({\n    typed\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  /**\n   * Return a signatures object with the usual boilerplate of\n   * matrix algorithms, based on a plain options object with the\n   * following properties:\n   *   elop: function -- the elementwise operation to use, defaults to self\n   *   SS: function -- the algorithm to apply for two sparse matrices\n   *   DS: function -- the algorithm to apply for a dense and a sparse matrix\n   *   SD: function -- algo for a sparse and a dense; defaults to SD flipped\n   *   Ss: function -- the algorithm to apply for a sparse matrix and scalar\n   *   sS: function -- algo for scalar and sparse; defaults to Ss flipped\n   *   scalar: string -- typed-function type for scalars, defaults to 'any'\n   *\n   * If Ss is not specified, no matrix-scalar signatures are generated.\n   *\n   * @param {object} options\n   * @return {Object<string, function>} signatures\n   */\n\n  return function matrixAlgorithmSuite(options) {\n    var elop = options.elop;\n    var SD = options.SD || options.DS;\n    var matrixSignatures;\n\n    if (elop) {\n      // First the dense ones\n      matrixSignatures = {\n        'DenseMatrix, DenseMatrix': (x, y) => matAlgo13xDD(x, y, elop),\n        'Array, Array': (x, y) => matAlgo13xDD(matrix(x), matrix(y), elop).valueOf(),\n        'Array, DenseMatrix': (x, y) => matAlgo13xDD(matrix(x), y, elop),\n        'DenseMatrix, Array': (x, y) => matAlgo13xDD(x, matrix(y), elop)\n      }; // Now incorporate sparse matrices\n\n      if (options.SS) {\n        matrixSignatures['SparseMatrix, SparseMatrix'] = (x, y) => options.SS(x, y, elop, false);\n      }\n\n      if (options.DS) {\n        matrixSignatures['DenseMatrix, SparseMatrix'] = (x, y) => options.DS(x, y, elop, false);\n\n        matrixSignatures['Array, SparseMatrix'] = (x, y) => options.DS(matrix(x), y, elop, false);\n      }\n\n      if (SD) {\n        matrixSignatures['SparseMatrix, DenseMatrix'] = (x, y) => SD(y, x, elop, true);\n\n        matrixSignatures['SparseMatrix, Array'] = (x, y) => SD(matrix(y), x, elop, true);\n      }\n    } else {\n      // No elop, use this\n      // First the dense ones\n      matrixSignatures = {\n        'DenseMatrix, DenseMatrix': typed.referToSelf(self => (x, y) => {\n          return matAlgo13xDD(x, y, self);\n        }),\n        'Array, Array': typed.referToSelf(self => (x, y) => {\n          return matAlgo13xDD(matrix(x), matrix(y), self).valueOf();\n        }),\n        'Array, DenseMatrix': typed.referToSelf(self => (x, y) => {\n          return matAlgo13xDD(matrix(x), y, self);\n        }),\n        'DenseMatrix, Array': typed.referToSelf(self => (x, y) => {\n          return matAlgo13xDD(x, matrix(y), self);\n        })\n      }; // Now incorporate sparse matrices\n\n      if (options.SS) {\n        matrixSignatures['SparseMatrix, SparseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return options.SS(x, y, self, false);\n        });\n      }\n\n      if (options.DS) {\n        matrixSignatures['DenseMatrix, SparseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return options.DS(x, y, self, false);\n        });\n        matrixSignatures['Array, SparseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return options.DS(matrix(x), y, self, false);\n        });\n      }\n\n      if (SD) {\n        matrixSignatures['SparseMatrix, DenseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return SD(y, x, self, true);\n        });\n        matrixSignatures['SparseMatrix, Array'] = typed.referToSelf(self => (x, y) => {\n          return SD(matrix(y), x, self, true);\n        });\n      }\n    } // Now add the scalars\n\n\n    var scalar = options.scalar || 'any';\n    var Ds = options.Ds || options.Ss;\n\n    if (Ds) {\n      if (elop) {\n        matrixSignatures['DenseMatrix,' + scalar] = (x, y) => matAlgo14xDs(x, y, elop, false);\n\n        matrixSignatures[scalar + ', DenseMatrix'] = (x, y) => matAlgo14xDs(y, x, elop, true);\n\n        matrixSignatures['Array,' + scalar] = (x, y) => matAlgo14xDs(matrix(x), y, elop, false).valueOf();\n\n        matrixSignatures[scalar + ', Array'] = (x, y) => matAlgo14xDs(matrix(y), x, elop, true).valueOf();\n      } else {\n        matrixSignatures['DenseMatrix,' + scalar] = typed.referToSelf(self => (x, y) => {\n          return matAlgo14xDs(x, y, self, false);\n        });\n        matrixSignatures[scalar + ', DenseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return matAlgo14xDs(y, x, self, true);\n        });\n        matrixSignatures['Array,' + scalar] = typed.referToSelf(self => (x, y) => {\n          return matAlgo14xDs(matrix(x), y, self, false).valueOf();\n        });\n        matrixSignatures[scalar + ', Array'] = typed.referToSelf(self => (x, y) => {\n          return matAlgo14xDs(matrix(y), x, self, true).valueOf();\n        });\n      }\n    }\n\n    var sS = options.sS !== undefined ? options.sS : options.Ss;\n\n    if (elop) {\n      if (options.Ss) {\n        matrixSignatures['SparseMatrix,' + scalar] = (x, y) => options.Ss(x, y, elop, false);\n      }\n\n      if (sS) {\n        matrixSignatures[scalar + ', SparseMatrix'] = (x, y) => sS(y, x, elop, true);\n      }\n    } else {\n      if (options.Ss) {\n        matrixSignatures['SparseMatrix,' + scalar] = typed.referToSelf(self => (x, y) => {\n          return options.Ss(x, y, self, false);\n        });\n      }\n\n      if (sS) {\n        matrixSignatures[scalar + ', SparseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return sS(y, x, self, true);\n        });\n      }\n    } // Also pull in the scalar signatures if the operator is a typed function\n\n\n    if (elop && elop.signatures) {\n      extend(matrixSignatures, elop.signatures);\n    }\n\n    return matrixSignatures;\n  };\n});","import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo03xDSf';\nvar dependencies = ['typed'];\nexport var createMatAlgo03xDSf = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n\n  /**\n   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).\n   * Callback function invoked M*N times.\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  f(Dij, 0)    ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n  return function matAlgo03xDSf(denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype; // sparse matrix arrays\n\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // sparse matrix cannot be a Pattern matrix\n\n\n    if (!bvalues) {\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result (DenseMatrix)\n\n\n    var cdata = []; // initialize dense matrix\n\n    for (var z = 0; z < rows; z++) {\n      // initialize row\n      cdata[z] = [];\n    } // workspace\n\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // loop columns in b\n\n    for (var j = 0; j < columns; j++) {\n      // column mark\n      var mark = j + 1; // values in column j\n\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = bindex[k]; // update workspace\n\n        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);\n        w[i] = mark;\n      } // process workspace\n\n\n      for (var y = 0; y < rows; y++) {\n        // check we have a calculated value for current row\n        if (w[y] === mark) {\n          // use calculated value\n          cdata[y][j] = x[y];\n        } else {\n          // calculate value\n          cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);\n        }\n      }\n    } // return dense matrix\n\n\n    return denseMatrix.createDenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo05xSfSf';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo05xSfSf = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function matAlgo05xSfSf(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // workspaces\n\n    var xa = cvalues ? [] : undefined;\n    var xb = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var wa = [];\n    var wb = []; // vars\n\n    var i, j, k, k1; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // loop values A(:,j)\n\n      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {\n        // row\n        i = aindex[k]; // push index\n\n        cindex.push(i); // update workspace\n\n        wa[i] = mark; // check we need to process values\n\n        if (xa) {\n          xa[i] = avalues[k];\n        }\n      } // loop values B(:,j)\n\n\n      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {\n        // row\n        i = bindex[k]; // check row existed in A\n\n        if (wa[i] !== mark) {\n          // push index\n          cindex.push(i);\n        } // update workspace\n\n\n        wb[i] = mark; // check we need to process values\n\n        if (xb) {\n          xb[i] = bvalues[k];\n        }\n      } // check we need to process values (non pattern matrix)\n\n\n      if (cvalues) {\n        // initialize first index in j\n        k = cptr[j]; // loop index in j\n\n        while (k < cindex.length) {\n          // row\n          i = cindex[k]; // marks\n\n          var wai = wa[i];\n          var wbi = wb[i]; // check Aij or Bij are nonzero\n\n          if (wai === mark || wbi === mark) {\n            // matrix values @ i,j\n            var va = wai === mark ? xa[i] : zero;\n            var vb = wbi === mark ? xb[i] : zero; // Cij\n\n            var vc = cf(va, vb); // check for zero\n\n            if (!eq(vc, zero)) {\n              // push value\n              cvalues.push(vc); // increment pointer\n\n              k++;\n            } else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          }\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","import { factory } from '../../utils/factory.js';\nimport { multiplyNumber } from '../../plain/number/index.js';\nvar name = 'multiplyScalar';\nvar dependencies = ['typed'];\nexport var createMultiplyScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n\n  /**\n   * Multiply two scalar values, `x * y`.\n   * This function is meant for internal use: it is used by the public function\n   * `multiply`\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Multiplication of `x` and `y`\n   * @private\n   */\n  return typed('multiplyScalar', {\n    'number, number': multiplyNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.mul(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.times(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.mul(y);\n    },\n    'number | Fraction | BigNumber | Complex, Unit': (x, y) => y.multiply(x),\n    'Unit, number | Fraction | BigNumber | Complex | Unit': (x, y) => x.multiply(y)\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nimport { arraySize } from '../../utils/array.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nvar name = 'multiply';\nvar dependencies = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'equalScalar', 'dot'];\nexport var createMultiply = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    addScalar,\n    multiplyScalar,\n    equalScalar,\n    dot\n  } = _ref;\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n\n  function _validateMatrixDimensions(size1, size2) {\n    // check left operand dimensions\n    switch (size1.length) {\n      case 1:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Vector x Vector\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');\n            }\n\n            break;\n\n          case 2:\n            // Vector x Matrix\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');\n            }\n\n            break;\n\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n\n        break;\n\n      case 2:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Matrix x Vector\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');\n            }\n\n            break;\n\n          case 2:\n            // Matrix x Matrix\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');\n            }\n\n            break;\n\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n\n        break;\n\n      default:\n        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');\n    }\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (N)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {number}             Scalar value\n   */\n\n\n  function _multiplyVectorVector(a, b, n) {\n    // check empty vector\n    if (n === 0) {\n      throw new Error('Cannot multiply two empty vectors');\n    }\n\n    return dot(a, b);\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Matrix         (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n\n\n  function _multiplyVectorMatrix(a, b) {\n    // process storage\n    if (b.storage() !== 'dense') {\n      throw new Error('Support for SparseMatrix not implemented');\n    }\n\n    return _multiplyVectorDenseMatrix(a, b);\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Dense Matrix   (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n\n\n  function _multiplyVectorDenseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype; // rows & columns\n\n    var alength = asize[0];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var c = []; // loop matrix columns\n\n    for (var j = 0; j < bcolumns; j++) {\n      // sum (do not initialize it with zero)\n      var sum = mf(adata[0], bdata[0][j]); // loop vector\n\n      for (var i = 1; i < alength; i++) {\n        // multiply & accumulate\n        sum = af(sum, mf(adata[i], bdata[i][j]));\n      }\n\n      c[j] = sum;\n    } // return matrix\n\n\n    return a.createDenseMatrix({\n      data: c,\n      size: [bcolumns],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {Matrix}             Dense Vector   (M)\n   */\n\n\n  var _multiplyMatrixVector = typed('_multiplyMatrixVector', {\n    'DenseMatrix, any': _multiplyDenseMatrixVector,\n    'SparseMatrix, any': _multiplySparseMatrixVector\n  });\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Matrix         (NxC)\n   *\n   * @return {Matrix}             Matrix         (MxC)\n   */\n\n\n  var _multiplyMatrixMatrix = typed('_multiplyMatrixMatrix', {\n    'DenseMatrix, DenseMatrix': _multiplyDenseMatrixDenseMatrix,\n    'DenseMatrix, SparseMatrix': _multiplyDenseMatrixSparseMatrix,\n    'SparseMatrix, DenseMatrix': _multiplySparseMatrixDenseMatrix,\n    'SparseMatrix, SparseMatrix': _multiplySparseMatrixSparseMatrix\n  });\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix  (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             Dense Vector (M)\n   */\n\n\n  function _multiplyDenseMatrixVector(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = asize[0];\n    var acolumns = asize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var c = []; // loop matrix a rows\n\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i]; // sum (do not initialize it with zero)\n\n      var sum = mf(row[0], bdata[0]); // loop matrix a columns\n\n      for (var j = 1; j < acolumns; j++) {\n        // multiply & accumulate\n        sum = af(sum, mf(row[j], bdata[j]));\n      }\n\n      c[i] = sum;\n    } // return matrix\n\n\n    return a.createDenseMatrix({\n      data: c,\n      size: [arows],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            DenseMatrix    (NxC)\n   *\n   * @return {Matrix}             DenseMatrix    (MxC)\n   */\n\n\n  function _multiplyDenseMatrixDenseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = asize[0];\n    var acolumns = asize[1];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var c = []; // loop matrix a rows\n\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i]; // initialize row array\n\n      c[i] = []; // loop matrix b columns\n\n      for (var j = 0; j < bcolumns; j++) {\n        // sum (avoid initializing sum to zero)\n        var sum = mf(row[0], bdata[0][j]); // loop matrix a columns\n\n        for (var x = 1; x < acolumns; x++) {\n          // multiply & accumulate\n          sum = af(sum, mf(row[x], bdata[x][j]));\n        }\n\n        c[i][j] = sum;\n      }\n    } // return matrix\n\n\n    return a.createDenseMatrix({\n      data: c,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            SparseMatrix   (NxC)\n   *\n   * @return {Matrix}             SparseMatrix   (MxC)\n   */\n\n\n  function _multiplyDenseMatrixSparseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b sparse\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate b matrix\n\n    if (!bvalues) {\n      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');\n    } // rows & columns\n\n\n    var arows = asize[0];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // result\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = b.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // indeces in column jb\n\n      var kb0 = bptr[jb];\n      var kb1 = bptr[jb + 1]; // do not process column jb if no data exists\n\n      if (kb1 > kb0) {\n        // last row mark processed\n        var last = 0; // loop a rows\n\n        for (var i = 0; i < arows; i++) {\n          // column mark\n          var mark = i + 1; // C[i, jb]\n\n          var cij = void 0; // values in b column j\n\n          for (var kb = kb0; kb < kb1; kb++) {\n            // row\n            var ib = bindex[kb]; // check value has been initialized\n\n            if (last !== mark) {\n              // first value in column jb\n              cij = mf(adata[i][ib], bvalues[kb]); // update mark\n\n              last = mark;\n            } else {\n              // accumulate value\n              cij = af(cij, mf(adata[i][ib], bvalues[kb]));\n            }\n          } // check column has been processed and value != 0\n\n\n          if (last === mark && !eq(cij, zero)) {\n            // push row & value\n            cindex.push(i);\n            cvalues.push(cij);\n          }\n        }\n      }\n    } // update ptr\n\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix    (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             SparseMatrix    (M, 1)\n   */\n\n\n  function _multiplySparseMatrixVector(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // validate a matrix\n\n    if (!avalues) {\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    } // b dense\n\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var brows = b._size[0]; // result\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // workspace\n\n\n    var x = []; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // update ptr\n\n    cptr[0] = 0; // rows in b\n\n    for (var ib = 0; ib < brows; ib++) {\n      // b[ib]\n      var vbi = bdata[ib]; // check b[ib] != 0, avoid loops\n\n      if (!eq(vbi, zero)) {\n        // A values & index in ib column\n        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n          // a row\n          var ia = aindex[ka]; // check value exists in current j\n\n          if (!w[ia]) {\n            // ia is new entry in j\n            w[ia] = true; // add i to pattern of C\n\n            cindex.push(ia); // x(ia) = A\n\n            x[ia] = mf(vbi, avalues[ka]);\n          } else {\n            // i exists in C already\n            x[ia] = af(x[ia], mf(vbi, avalues[ka]));\n          }\n        }\n      }\n    } // copy values from x to column jb of c\n\n\n    for (var p1 = cindex.length, p = 0; p < p1; p++) {\n      // row\n      var ic = cindex[p]; // copy value\n\n      cvalues[p] = x[ic];\n    } // update ptr\n\n\n    cptr[1] = cindex.length; // return sparse matrix\n\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, 1],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            DenseMatrix       (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n\n\n  function _multiplySparseMatrixDenseMatrix(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // validate a matrix\n\n    if (!avalues) {\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    } // b dense\n\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var brows = b._size[0];\n    var bcolumns = b._size[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // result\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // workspace\n\n    var x = []; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // mark in workspace for current column\n\n      var mark = jb + 1; // rows in jb\n\n      for (var ib = 0; ib < brows; ib++) {\n        // b[ib, jb]\n        var vbij = bdata[ib][jb]; // check b[ib, jb] != 0, avoid loops\n\n        if (!eq(vbij, zero)) {\n          // A values & index in ib column\n          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // a row\n            var ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia); // x(ia) = A\n\n              x[ia] = mf(vbij, avalues[ka]);\n            } else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(vbij, avalues[ka]));\n            }\n          }\n        }\n      } // copy values from x to column jb of c\n\n\n      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n        // row\n        var ic = cindex[p]; // copy value\n\n        cvalues[p] = x[ic];\n      }\n    } // update ptr\n\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            SparseMatrix      (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n\n\n  function _multiplySparseMatrixSparseMatrix(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // b sparse\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var bcolumns = b._size[1]; // flag indicating both matrices (a & b) contain data\n\n    var values = avalues && bvalues; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var cvalues = values ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // workspace\n\n    var x = values ? [] : undefined; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // variables\n\n    var ka, ka0, ka1, kb, kb0, kb1, ia, ib; // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // mark in workspace for current column\n\n      var mark = jb + 1; // B values & index in j\n\n      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {\n        // b row\n        ib = bindex[kb]; // check we need to process values\n\n        if (values) {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia); // x(ia) = A\n\n              x[ia] = mf(bvalues[kb], avalues[ka]);\n            } else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));\n            }\n          }\n        } else {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia);\n            }\n          }\n        }\n      } // check we need to process matrix values (pattern matrix)\n\n\n      if (values) {\n        // copy values from x to column jb of c\n        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n          // row\n          var ic = cindex[p]; // copy value\n\n          cvalues[p] = x[ic];\n        }\n      }\n    } // update ptr\n\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n  /**\n   * Multiply two or more values, `x * y`.\n   * For matrices, the matrix product is calculated.\n   *\n   * Syntax:\n   *\n   *    math.multiply(x, y)\n   *    math.multiply(x, y, z, ...)\n   *\n   * Examples:\n   *\n   *    math.multiply(4, 5.2)        // returns number 20.8\n   *    math.multiply(2, 3, 4)       // returns number 24\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.multiply(a, b)          // returns Complex 5 + 14i\n   *\n   *    const c = [[1, 2], [4, 3]]\n   *    const d = [[1, 2, 3], [3, -4, 7]]\n   *    math.multiply(c, d)          // returns Array [[7, -6, 17], [13, -4, 33]]\n   *\n   *    const e = math.unit('2.1 km')\n   *    math.multiply(3, e)          // returns Unit 6.3 km\n   *\n   * See also:\n   *\n   *    divide, prod, cross, dot\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`\n   */\n\n\n  return typed(name, multiplyScalar, {\n    // we extend the signatures of multiplyScalar with signatures dealing with matrices\n    'Array, Array': typed.referTo('Matrix, Matrix', selfMM => (x, y) => {\n      // check dimensions\n      _validateMatrixDimensions(arraySize(x), arraySize(y)); // use dense matrix implementation\n\n\n      var m = selfMM(matrix(x), matrix(y)); // return array or scalar\n\n      return isMatrix(m) ? m.valueOf() : m;\n    }),\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      // dimensions\n      var xsize = x.size();\n      var ysize = y.size(); // check dimensions\n\n      _validateMatrixDimensions(xsize, ysize); // process dimensions\n\n\n      if (xsize.length === 1) {\n        // process y dimensions\n        if (ysize.length === 1) {\n          // Vector * Vector\n          return _multiplyVectorVector(x, y, xsize[0]);\n        } // Vector * Matrix\n\n\n        return _multiplyVectorMatrix(x, y);\n      } // process y dimensions\n\n\n      if (ysize.length === 1) {\n        // Matrix * Vector\n        return _multiplyMatrixVector(x, y);\n      } // Matrix * Matrix\n\n\n      return _multiplyMatrixMatrix(x, y);\n    },\n    'Matrix, Array': typed.referTo('Matrix,Matrix', selfMM => (x, y) => selfMM(x, matrix(y))),\n    'Array, Matrix': typed.referToSelf(self => (x, y) => {\n      // use Matrix * Matrix implementation\n      return self(matrix(x, y.storage()), y);\n    }),\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return matAlgo11xS0s(x, y, multiplyScalar, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return matAlgo14xDs(x, y, multiplyScalar, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return matAlgo11xS0s(y, x, multiplyScalar, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return matAlgo14xDs(y, x, multiplyScalar, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(x), y, multiplyScalar, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(y), x, multiplyScalar, true).valueOf();\n    },\n    'any, any': multiplyScalar,\n    'any, any, ...any': typed.referToSelf(self => (x, y, rest) => {\n      var result = self(x, y);\n\n      for (var i = 0; i < rest.length; i++) {\n        result = self(result, rest[i]);\n      }\n\n      return result;\n    })\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'subtract';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'addScalar', 'unaryMinus', 'DenseMatrix'];\nexport var createSubtract = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    addScalar,\n    unaryMinus,\n    DenseMatrix\n  } = _ref;\n  // TODO: split function subtract in two: subtract and subtractScalar\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  /**\n   * Subtract two values, `x - y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.subtract(x, y)\n   *\n   * Examples:\n   *\n   *    math.subtract(5.3, 2)        // returns number 3.3\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.subtract(a, b)          // returns Complex -2 + 2i\n   *\n   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]\n   *\n   *    const c = math.unit('2.1 km')\n   *    const d = math.unit('500m')\n   *    math.subtract(c, d)          // returns Unit 1.6 km\n   *\n   * See also:\n   *\n   *    add\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\n   *            Initial value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\n   *            Value to subtract from `x`\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Subtraction of `x` and `y`\n   */\n\n  return typed(name, {\n    'number, number': (x, y) => x - y,\n    'Complex, Complex': (x, y) => x.sub(y),\n    'BigNumber, BigNumber': (x, y) => x.minus(y),\n    'Fraction, Fraction': (x, y) => x.sub(y),\n    'Unit, Unit': typed.referToSelf(self => (x, y) => {\n      if (x.value === null) {\n        throw new Error('Parameter x contains a unit with undefined value');\n      }\n\n      if (y.value === null) {\n        throw new Error('Parameter y contains a unit with undefined value');\n      }\n\n      if (!x.equalBase(y)) {\n        throw new Error('Units do not match');\n      }\n\n      var res = x.clone();\n      res.value = typed.find(self, [res.valueType(), y.valueType()])(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    })\n  }, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo01xDSid,\n    SD: matAlgo03xDSf,\n    Ss: matAlgo12xSfs,\n    sS: matAlgo10xSids\n  }));\n});","import { factory } from '../../utils/factory.js';\nvar name = 'invmod';\nvar dependencies = ['typed', 'config', 'BigNumber', 'xgcd', 'equal', 'smaller', 'mod', 'add', 'isInteger'];\nexport var createInvmod = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    BigNumber,\n    xgcd,\n    equal,\n    smaller,\n    mod,\n    add,\n    isInteger\n  } = _ref;\n\n  /**\n   * Calculate the (modular) multiplicative inverse of a modulo b. Solution to the equation `ax ≣ 1 (mod b)`\n   * See https://en.wikipedia.org/wiki/Modular_multiplicative_inverse.\n   *\n   * Syntax:\n   *\n   *    math.invmod(a, b)\n   *\n   * Examples:\n   *\n   *    math.invmod(8, 12)             // returns NaN\n   *    math.invmod(7, 13)             // returns 2\n   *    math.invmod(15151, 15122)      // returns 10429\n   *\n   * See also:\n   *\n   *    gcd, xgcd\n   *\n   * @param {number | BigNumber} a  An integer number\n   * @param {number | BigNumber} b  An integer number\n   * @return {number | BigNumber }  Returns an integer number\n   *                              where `invmod(a,b)*a ≣ 1 (mod b)`\n   */\n  return typed(name, {\n    'number, number': invmod,\n    'BigNumber, BigNumber': invmod\n  });\n\n  function invmod(a, b) {\n    if (!isInteger(a) || !isInteger(b)) throw new Error('Parameters in function invmod must be integer numbers');\n    a = mod(a, b);\n    if (equal(b, 0)) throw new Error('Divisor must be non zero');\n    var res = xgcd(a, b);\n    res = res.valueOf();\n    var [gcd, inv] = res;\n    if (!equal(gcd, BigNumber(1))) return NaN;\n    inv = mod(inv, b);\n    if (smaller(inv, BigNumber(0))) inv = add(inv, b);\n    return inv;\n  }\n});","import { bitAndBigNumber } from '../../utils/bignumber/bitwise.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo06xS0S0 } from '../../type/matrix/utils/matAlgo06xS0S0.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { bitAndNumber } from '../../plain/number/index.js';\nvar name = 'bitAnd';\nvar dependencies = ['typed', 'matrix', 'equalScalar'];\nexport var createBitAnd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo06xS0S0 = createMatAlgo06xS0S0({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  /**\n   * Bitwise AND two values, `x & y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.bitAnd(x, y)\n   *\n   * Examples:\n   *\n   *    math.bitAnd(53, 131)               // returns number 1\n   *\n   *    math.bitAnd([1, 12, 31], 42)       // returns Array [0, 8, 10]\n   *\n   * See also:\n   *\n   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x First value to and\n   * @param  {number | BigNumber | Array | Matrix} y Second value to and\n   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`\n   */\n\n  return typed(name, {\n    'number, number': bitAndNumber,\n    'BigNumber, BigNumber': bitAndBigNumber\n  }, matrixAlgorithmSuite({\n    SS: matAlgo06xS0S0,\n    DS: matAlgo02xDS0,\n    Ss: matAlgo11xS0s\n  }));\n});","import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nvar name = 'conj';\nvar dependencies = ['typed'];\nexport var createConj = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n\n  /**\n   * Compute the complex conjugate of a complex value.\n   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.conj(x)\n   *\n   * Examples:\n   *\n   *    math.conj(math.complex('2 + 3i'))  // returns Complex 2 - 3i\n   *    math.conj(math.complex('2 - 3i'))  // returns Complex 2 + 3i\n   *    math.conj(math.complex('-5.2i'))  // returns Complex 5.2i\n   *\n   * See also:\n   *\n   *    re, im, arg, abs\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            The complex conjugate of x\n   */\n  return typed(name, {\n    'number | BigNumber | Fraction': x => x,\n    Complex: x => x.conjugate(),\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","export function noBignumber() {\n  throw new Error('No \"bignumber\" implementation available');\n}\nexport function noFraction() {\n  throw new Error('No \"fraction\" implementation available');\n}\nexport function noMatrix() {\n  throw new Error('No \"matrix\" implementation available');\n}\nexport function noIndex() {\n  throw new Error('No \"index\" implementation available');\n}\nexport function noSubset() {\n  throw new Error('No \"matrix\" implementation available');\n}","/**\n * Create a syntax error with the message:\n *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'\n * @param {string} fn     Function name\n * @param {number} count  Actual argument count\n * @param {number} min    Minimum required argument count\n * @param {number} [max]  Maximum required argument count\n * @extends Error\n */\nexport function ArgumentsError(fn, count, min, max) {\n  if (!(this instanceof ArgumentsError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  this.fn = fn;\n  this.count = count;\n  this.min = min;\n  this.max = max;\n  this.message = 'Wrong number of arguments in function ' + fn + ' (' + count + ' provided, ' + min + (max !== undefined && max !== null ? '-' + max : '') + ' expected)';\n  this.stack = new Error().stack;\n}\nArgumentsError.prototype = new Error();\nArgumentsError.prototype.constructor = Error;\nArgumentsError.prototype.name = 'ArgumentsError';\nArgumentsError.prototype.isArgumentsError = true;","import { isBigNumber, isMatrix } from '../../utils/is.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { ArgumentsError } from '../../error/ArgumentsError.js';\nimport { isInteger } from '../../utils/number.js';\nimport { format } from '../../utils/string.js';\nimport { clone } from '../../utils/object.js';\nimport { resize as arrayResize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'resize';\nvar dependencies = ['config', 'matrix'];\nexport var createResize = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    matrix\n  } = _ref;\n\n  /**\n   * Resize a matrix\n   *\n   * Syntax:\n   *\n   *     math.resize(x, size)\n   *     math.resize(x, size, defaultValue)\n   *\n   * Examples:\n   *\n   *     math.resize([1, 2, 3, 4, 5], [3]) // returns Array  [1, 2, 3]\n   *     math.resize([1, 2, 3], [5], 0)    // returns Array  [1, 2, 3, 0, 0]\n   *     math.resize(2, [2, 3], 0)         // returns Matrix [[2, 0, 0], [0, 0, 0]]\n   *     math.resize(\"hello\", [8], \"!\")    // returns string 'hello!!!'\n   *\n   * See also:\n   *\n   *     size, squeeze, subset, reshape\n   *\n   * @param {Array | Matrix | *} x             Matrix to be resized\n   * @param {Array | Matrix} size              One dimensional array with numbers\n   * @param {number | string} [defaultValue=0] Zero by default, except in\n   *                                           case of a string, in that case\n   *                                           defaultValue = ' '\n   * @return {* | Array | Matrix} A resized clone of matrix `x`\n   */\n  // TODO: rework resize to a typed-function\n  return function resize(x, size, defaultValue) {\n    if (arguments.length !== 2 && arguments.length !== 3) {\n      throw new ArgumentsError('resize', arguments.length, 2, 3);\n    }\n\n    if (isMatrix(size)) {\n      size = size.valueOf(); // get Array\n    }\n\n    if (isBigNumber(size[0])) {\n      // convert bignumbers to numbers\n      size = size.map(function (value) {\n        return !isBigNumber(value) ? value : value.toNumber();\n      });\n    } // check x is a Matrix\n\n\n    if (isMatrix(x)) {\n      // use optimized matrix implementation, return copy\n      return x.resize(size, defaultValue, true);\n    }\n\n    if (typeof x === 'string') {\n      // resize string\n      return _resizeString(x, size, defaultValue);\n    } // check result should be a matrix\n\n\n    var asMatrix = Array.isArray(x) ? false : config.matrix !== 'Array';\n\n    if (size.length === 0) {\n      // output a scalar\n      while (Array.isArray(x)) {\n        x = x[0];\n      }\n\n      return clone(x);\n    } else {\n      // output an array/matrix\n      if (!Array.isArray(x)) {\n        x = [x];\n      }\n\n      x = clone(x);\n      var res = arrayResize(x, size, defaultValue);\n      return asMatrix ? matrix(res) : res;\n    }\n  };\n  /**\n   * Resize a string\n   * @param {string} str\n   * @param {number[]} size\n   * @param {string} [defaultChar=' ']\n   * @private\n   */\n\n  function _resizeString(str, size, defaultChar) {\n    if (defaultChar !== undefined) {\n      if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {\n        throw new TypeError('Single character expected as defaultValue');\n      }\n    } else {\n      defaultChar = ' ';\n    }\n\n    if (size.length !== 1) {\n      throw new DimensionError(size.length, 1);\n    }\n\n    var len = size[0];\n\n    if (typeof len !== 'number' || !isInteger(len)) {\n      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format(size) + ')');\n    }\n\n    if (str.length > len) {\n      return str.substring(0, len);\n    } else if (str.length < len) {\n      var res = str;\n\n      for (var i = 0, ii = len - str.length; i < ii; i++) {\n        res += defaultChar;\n      }\n\n      return res;\n    } else {\n      return str;\n    }\n  }\n});","import { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { noMatrix } from '../../utils/noop.js';\nvar name = 'size';\nvar dependencies = ['typed', 'config', '?matrix'];\nexport var createSize = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix\n  } = _ref;\n\n  /**\n   * Calculate the size of a matrix or scalar.\n   *\n   * Syntax:\n   *\n   *     math.size(x)\n   *\n   * Examples:\n   *\n   *     math.size(2.3)                  // returns []\n   *     math.size('hello world')        // returns [11]\n   *\n   *     const A = [[1, 2, 3], [4, 5, 6]]\n   *     math.size(A)                    // returns [2, 3]\n   *     math.size(math.range(1,6))      // returns [5]\n   *\n   * See also:\n   *\n   *     count, resize, squeeze, subset\n   *\n   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix\n   * @return {Array | Matrix} A vector with size of `x`.\n   */\n  return typed(name, {\n    Matrix: function Matrix(x) {\n      return x.create(x.size());\n    },\n    Array: arraySize,\n    string: function string(x) {\n      return config.matrix === 'Array' ? [x.length] : matrix([x.length]);\n    },\n    'number | Complex | BigNumber | Unit | boolean | null': function numberComplexBigNumberUnitBooleanNull(x) {\n      // scalar\n      return config.matrix === 'Array' ? [] : matrix ? matrix([]) : noMatrix();\n    }\n  });\n});","import { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'fft';\nvar dependencies = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'divideScalar', 'exp', 'tau', 'i'];\nexport var createFft = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    addScalar,\n    multiplyScalar,\n    divideScalar,\n    exp,\n    tau,\n    i: I\n  } = _ref;\n\n  /**\n   * Calculate N-dimensional fourier transform\n   *\n   * Syntax:\n   *\n   *     math.fft(arr)\n   *\n   * Examples:\n   *\n   *    math.fft([[1, 0], [1, 0]]) // returns [[{re:2, im:0}, {re:2, im:0}], [{re:0, im:0}, {re:0, im:0}]]\n   *\n   *\n   * See Also:\n   *\n   *      ifft\n   *\n   * @param {Array | Matrix} arr    An array or matrix\n   * @return {Array | Matrix}       N-dimensional fourier transformation of the array\n   */\n  return typed(name, {\n    Array: _ndFft,\n    Matrix: function Matrix(matrix) {\n      return matrix.create(_ndFft(matrix.toArray()));\n    }\n  });\n  /**\n   * Perform an N-dimensional Fourier transform\n   *\n   * @param {Array} arr      The array\n   * @return {Array}         resulting array\n   */\n\n  function _ndFft(arr) {\n    var size = arraySize(arr);\n    if (size.length === 1) return _fft(arr, size[0]); // ndFft along dimension 1,...,N-1 then 1dFft along dimension 0\n\n    return _1dFft(arr.map(slice => _ndFft(slice, size.slice(1))), 0);\n  }\n  /**\n   * Perform an 1-dimensional Fourier transform\n   *\n   * @param {Array} arr      The array\n   * @param {number} dim     dimension of the array to perform on\n   * @return {Array}         resulting array\n   */\n\n\n  function _1dFft(arr, dim) {\n    var size = arraySize(arr);\n    if (dim !== 0) return new Array(size[0]).fill(0).map((_, i) => _1dFft(arr[i], dim - 1));\n    if (size.length === 1) return _fft(arr);\n\n    function _transpose(arr) {\n      // Swap first 2 dimensions\n      var size = arraySize(arr);\n      return new Array(size[1]).fill(0).map((_, j) => new Array(size[0]).fill(0).map((_, i) => arr[i][j]));\n    }\n\n    return _transpose(_1dFft(_transpose(arr), 1));\n  }\n  /**\n   * Perform an 1-dimensional Fourier transform\n   *\n   * @param {Array} arr      The array\n   * @return {Array}         resulting array\n   */\n\n\n  function _fft(arr) {\n    var len = arr.length;\n    if (len === 1) return [arr[0]];\n\n    if (len % 2 === 0) {\n      var ret = [..._fft(arr.filter((_, i) => i % 2 === 0), len / 2), ..._fft(arr.filter((_, i) => i % 2 === 1), len / 2)];\n\n      for (var k = 0; k < len / 2; k++) {\n        var p = ret[k];\n        var q = multiplyScalar(ret[k + len / 2], exp(multiplyScalar(multiplyScalar(tau, I), divideScalar(-k, len))));\n        ret[k] = addScalar(p, q);\n        ret[k + len / 2] = addScalar(p, multiplyScalar(-1, q));\n      }\n\n      return ret;\n    }\n\n    throw new Error('Can only calculate FFT of power-of-two size');\n  }\n});","/* eslint-disable no-loss-of-precision */\nimport { deepMap } from '../../utils/collection.js';\nimport { sign } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'erf';\nvar dependencies = ['typed'];\nexport var createErf = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n\n  /**\n   * Compute the erf function of a value using a rational Chebyshev\n   * approximations for different intervals of x.\n   *\n   * This is a translation of W. J. Cody's Fortran implementation from 1987\n   * ( https://www.netlib.org/specfun/erf ). See the AMS publication\n   * \"Rational Chebyshev Approximations for the Error Function\" by W. J. Cody\n   * for an explanation of this process.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.erf(x)\n   *\n   * Examples:\n   *\n   *    math.erf(0.2)    // returns 0.22270258921047847\n   *    math.erf(-0.5)   // returns -0.5204998778130465\n   *    math.erf(4)      // returns 0.9999999845827421\n   *\n   * @param {number | Array | Matrix} x   A real number\n   * @return {number | Array | Matrix}    The erf of `x`\n   */\n  return typed('name', {\n    number: function number(x) {\n      var y = Math.abs(x);\n\n      if (y >= MAX_NUM) {\n        return sign(x);\n      }\n\n      if (y <= THRESH) {\n        return sign(x) * erf1(y);\n      }\n\n      if (y <= 4.0) {\n        return sign(x) * (1 - erfc2(y));\n      }\n\n      return sign(x) * (1 - erfc3(y));\n    },\n    'Array | Matrix': typed.referToSelf(self => n => deepMap(n, self)) // TODO: For complex numbers, use the approximation for the Faddeeva function\n    //  from \"More Efficient Computation of the Complex Error Function\" (AMS)\n\n  });\n  /**\n   * Approximates the error function erf() for x <= 0.46875 using this function:\n   *               n\n   * erf(x) = x * sum (p_j * x^(2j)) / (q_j * x^(2j))\n   *              j=0\n   */\n\n  function erf1(y) {\n    var ysq = y * y;\n    var xnum = P[0][4] * ysq;\n    var xden = ysq;\n    var i;\n\n    for (i = 0; i < 3; i += 1) {\n      xnum = (xnum + P[0][i]) * ysq;\n      xden = (xden + Q[0][i]) * ysq;\n    }\n\n    return y * (xnum + P[0][3]) / (xden + Q[0][3]);\n  }\n  /**\n   * Approximates the complement of the error function erfc() for\n   * 0.46875 <= x <= 4.0 using this function:\n   *                       n\n   * erfc(x) = e^(-x^2) * sum (p_j * x^j) / (q_j * x^j)\n   *                      j=0\n   */\n\n\n  function erfc2(y) {\n    var xnum = P[1][8] * y;\n    var xden = y;\n    var i;\n\n    for (i = 0; i < 7; i += 1) {\n      xnum = (xnum + P[1][i]) * y;\n      xden = (xden + Q[1][i]) * y;\n    }\n\n    var result = (xnum + P[1][7]) / (xden + Q[1][7]);\n    var ysq = parseInt(y * 16) / 16;\n    var del = (y - ysq) * (y + ysq);\n    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;\n  }\n  /**\n   * Approximates the complement of the error function erfc() for x > 4.0 using\n   * this function:\n   *\n   * erfc(x) = (e^(-x^2) / x) * [ 1/sqrt(pi) +\n   *               n\n   *    1/(x^2) * sum (p_j * x^(-2j)) / (q_j * x^(-2j)) ]\n   *              j=0\n   */\n\n\n  function erfc3(y) {\n    var ysq = 1 / (y * y);\n    var xnum = P[2][5] * ysq;\n    var xden = ysq;\n    var i;\n\n    for (i = 0; i < 4; i += 1) {\n      xnum = (xnum + P[2][i]) * ysq;\n      xden = (xden + Q[2][i]) * ysq;\n    }\n\n    var result = ysq * (xnum + P[2][4]) / (xden + Q[2][4]);\n    result = (SQRPI - result) / y;\n    ysq = parseInt(y * 16) / 16;\n    var del = (y - ysq) * (y + ysq);\n    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;\n  }\n});\n/**\n * Upper bound for the first approximation interval, 0 <= x <= THRESH\n * @constant\n */\n\nvar THRESH = 0.46875;\n/**\n * Constant used by W. J. Cody's Fortran77 implementation to denote sqrt(pi)\n * @constant\n */\n\nvar SQRPI = 5.6418958354775628695e-1;\n/**\n * Coefficients for each term of the numerator sum (p_j) for each approximation\n * interval (see W. J. Cody's paper for more details)\n * @constant\n */\n\nvar P = [[3.16112374387056560e00, 1.13864154151050156e02, 3.77485237685302021e02, 3.20937758913846947e03, 1.85777706184603153e-1], [5.64188496988670089e-1, 8.88314979438837594e00, 6.61191906371416295e01, 2.98635138197400131e02, 8.81952221241769090e02, 1.71204761263407058e03, 2.05107837782607147e03, 1.23033935479799725e03, 2.15311535474403846e-8], [3.05326634961232344e-1, 3.60344899949804439e-1, 1.25781726111229246e-1, 1.60837851487422766e-2, 6.58749161529837803e-4, 1.63153871373020978e-2]];\n/**\n * Coefficients for each term of the denominator sum (q_j) for each approximation\n * interval (see W. J. Cody's paper for more details)\n * @constant\n */\n\nvar Q = [[2.36012909523441209e01, 2.44024637934444173e02, 1.28261652607737228e03, 2.84423683343917062e03], [1.57449261107098347e01, 1.17693950891312499e02, 5.37181101862009858e02, 1.62138957456669019e03, 3.29079923573345963e03, 4.36261909014324716e03, 3.43936767414372164e03, 1.23033935480374942e03], [2.56852019228982242e00, 1.87295284992346047e00, 5.27905102951428412e-1, 6.05183413124413191e-2, 2.33520497626869185e-3]];\n/**\n * Maximum/minimum safe numbers to input to erf() (in ES6+, this number is\n * Number.[MAX|MIN]_SAFE_INTEGER). erf() for all numbers beyond this limit will\n * return 1\n */\n\nvar MAX_NUM = Math.pow(2, 53);","import { factory } from '../../utils/factory.js';\nvar name = 'bin';\nvar dependencies = ['typed', 'format'];\n/**\n * Format a number as binary.\n *\n * Syntax:\n *\n *    math.bin(value)\n *\n * Examples:\n *\n *    //the following outputs \"0b10\"\n *    math.bin(2)\n *\n * See also:\n *\n *    oct\n *    hex\n *\n * @param {number} value    Value to be stringified\n * @param {number} wordSize Optional word size (see `format`)\n * @return {string}         The formatted value\n */\n\nexport var createBin = factory(name, dependencies, _ref => {\n  var {\n    typed,\n    format\n  } = _ref;\n  return typed(name, {\n    'number | BigNumber': function numberBigNumber(n) {\n      return format(n, {\n        notation: 'bin'\n      });\n    },\n    'number | BigNumber, number': function numberBigNumberNumber(n, wordSize) {\n      return format(n, {\n        notation: 'bin',\n        wordSize\n      });\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nvar name = 'oct';\nvar dependencies = ['typed', 'format'];\n/**\n * Format a number as octal.\n *\n * Syntax:\n *\n *    math.oct(value)\n *\n * Examples:\n *\n *    //the following outputs \"0o70\"\n *    math.oct(56)\n *\n * See also:\n *\n *    bin\n *    hex\n *\n * @param {number} value    Value to be stringified\n * @param {number} wordSize Optional word size (see `format`)\n * @return {string}         The formatted value\n */\n\nexport var createOct = factory(name, dependencies, _ref => {\n  var {\n    typed,\n    format\n  } = _ref;\n  return typed(name, {\n    'number | BigNumber': function numberBigNumber(n) {\n      return format(n, {\n        notation: 'oct'\n      });\n    },\n    'number | BigNumber, number': function numberBigNumberNumber(n, wordSize) {\n      return format(n, {\n        notation: 'oct',\n        wordSize\n      });\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nvar name = 'hex';\nvar dependencies = ['typed', 'format'];\n/**\n * Format a number as hexadecimal.\n *\n * Syntax:\n *\n *    math.hex(value)\n *\n * Examples:\n *\n *    math.hex(240) // returns \"0xF0\"\n *\n * See also:\n *\n *    oct\n *    bin\n *\n * @param {number} value    Value to be stringified\n * @param {number} wordSize Optional word size (see `format`)\n * @return {string}         The formatted value\n */\n\nexport var createHex = factory(name, dependencies, _ref => {\n  var {\n    typed,\n    format\n  } = _ref;\n  return typed(name, {\n    'number | BigNumber': function numberBigNumber(n) {\n      return format(n, {\n        notation: 'hex'\n      });\n    },\n    'number | BigNumber, number': function numberBigNumberNumber(n, wordSize) {\n      return format(n, {\n        notation: 'hex',\n        wordSize\n      });\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'to';\nvar dependencies = ['typed', 'matrix'];\nexport var createTo = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  /**\n   * Change the unit of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.to(x, unit)\n   *\n   * Examples:\n   *\n   *    math.to(math.unit('2 inch'), 'cm')                   // returns Unit 5.08 cm\n   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'))  // returns Unit 5.08 cm\n   *    math.to(math.unit(16, 'bytes'), 'bits')              // returns Unit 128 bits\n   *\n   * See also:\n   *\n   *    unit\n   *\n   * @param {Unit | Array | Matrix} x     The unit to be converted.\n   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like \"cm\"\n   *                                      or a unit without value.\n   * @return {Unit | Array | Matrix} value with changed, fixed unit.\n   */\n\n  return typed(name, {\n    'Unit, Unit | string': (x, unit) => x.to(unit)\n  }, matrixAlgorithmSuite({\n    Ds: true\n  }));\n});","import { typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { noBignumber, noFraction } from '../../utils/noop.js';\nvar name = 'numeric';\nvar dependencies = ['number', '?bignumber', '?fraction'];\nexport var createNumeric = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    number: _number,\n    bignumber,\n    fraction\n  } = _ref;\n  var validInputTypes = {\n    string: true,\n    number: true,\n    BigNumber: true,\n    Fraction: true\n  }; // Load the conversion functions for each output type\n\n  var validOutputTypes = {\n    number: x => _number(x),\n    BigNumber: bignumber ? x => bignumber(x) : noBignumber,\n    Fraction: fraction ? x => fraction(x) : noFraction\n  };\n  /**\n   * Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.\n   *\n   * Syntax:\n   *\n   *    math.numeric(x)\n   *\n   * Examples:\n   *\n   *    math.numeric('4')                           // returns 4\n   *    math.numeric('4', 'number')                 // returns 4\n   *    math.numeric('4', 'BigNumber')              // returns BigNumber 4\n   *    math.numeric('4', 'Fraction')               // returns Fraction 4\n   *    math.numeric(4, 'Fraction')                 // returns Fraction 4\n   *    math.numeric(math.fraction(2, 5), 'number') // returns 0.4\n   *\n   * See also:\n   *\n   *    number, fraction, bignumber, string, format\n   *\n   * @param {string | number | BigNumber | Fraction } value\n   *              A numeric value or a string containing a numeric value\n   * @param {string} outputType\n   *              Desired numeric output type.\n   *              Available values: 'number', 'BigNumber', or 'Fraction'\n   * @return {number | BigNumber | Fraction}\n   *              Returns an instance of the numeric in the requested type\n   */\n\n  return function numeric(value) {\n    var outputType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'number';\n    var check = arguments.length > 2 ? arguments[2] : undefined;\n\n    if (check !== undefined) {\n      throw new SyntaxError('numeric() takes one or two arguments');\n    }\n\n    var inputType = typeOf(value);\n\n    if (!(inputType in validInputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' of type \"' + inputType + '\"; valid input types are ' + Object.keys(validInputTypes).join(', '));\n    }\n\n    if (!(outputType in validOutputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' to type \"' + outputType + '\"; valid output types are ' + Object.keys(validOutputTypes).join(', '));\n    }\n\n    if (outputType === inputType) {\n      return value;\n    } else {\n      return validOutputTypes[outputType](value);\n    }\n  };\n});","import { factory } from '../../utils/factory.js';\nvar name = 'divideScalar';\nvar dependencies = ['typed', 'numeric'];\nexport var createDivideScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    numeric\n  } = _ref;\n\n  /**\n   * Divide two scalar values, `x / y`.\n   * This function is meant for internal use: it is used by the public functions\n   * `divide` and `inv`.\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Quotient, `x / y`\n   * @private\n   */\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x / y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.div(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.div(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.div(y);\n    },\n    'Unit, number | Complex | Fraction | BigNumber | Unit': (x, y) => x.divide(y),\n    'number | Fraction | Complex | BigNumber, Unit': (x, y) => y.divideInto(x)\n  });\n});","import { factory } from '../../../utils/factory.js';\nimport { createSolveValidation } from './utils/solveValidation.js';\nvar name = 'lsolveAll';\nvar dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];\nexport var createLsolveAll = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    divideScalar,\n    multiplyScalar,\n    subtract,\n    equalScalar,\n    DenseMatrix\n  } = _ref;\n  var solveValidation = createSolveValidation({\n    DenseMatrix\n  });\n  /**\n   * Finds all solutions of a linear equation system by forwards substitution. Matrix must be a lower triangular matrix.\n   *\n   * `L * x = b`\n   *\n   * Syntax:\n   *\n   *    math.lsolveAll(L, b)\n   *\n   * Examples:\n   *\n   *    const a = [[-2, 3], [2, 1]]\n   *    const b = [11, 9]\n   *    const x = lsolveAll(a, b)  // [ [[-5.5], [20]] ]\n   *\n   * See also:\n   *\n   *    lsolve, lup, slu, usolve, lusolve\n   *\n   * @param {Matrix, Array} L       A N x N matrix or array (L)\n   * @param {Matrix, Array} b       A column vector with the b values\n   *\n   * @return {DenseMatrix[] | Array[]}  An array of affine-independent column vectors (x) that solve the linear system\n   */\n\n  return typed(name, {\n    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {\n      return _sparseForwardSubstitution(m, b);\n    },\n    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {\n      return _denseForwardSubstitution(m, b);\n    },\n    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {\n      var m = matrix(a);\n\n      var R = _denseForwardSubstitution(m, b);\n\n      return R.map(r => r.valueOf());\n    }\n  });\n\n  function _denseForwardSubstitution(m, b_) {\n    // the algorithm is derived from\n    // https://www.overleaf.com/read/csvgqdxggyjv\n    // array of right-hand sides\n    var B = [solveValidation(m, b_, true)._data.map(e => e[0])];\n    var M = m._data;\n    var rows = m._size[0];\n    var columns = m._size[1]; // loop columns\n\n    for (var i = 0; i < columns; i++) {\n      var L = B.length; // loop right-hand sides\n\n      for (var k = 0; k < L; k++) {\n        var b = B[k];\n\n        if (!equalScalar(M[i][i], 0)) {\n          // non-singular row\n          b[i] = divideScalar(b[i], M[i][i]);\n\n          for (var j = i + 1; j < columns; j++) {\n            // b[j] -= b[i] * M[j,i]\n            b[j] = subtract(b[j], multiplyScalar(b[i], M[j][i]));\n          }\n        } else if (!equalScalar(b[i], 0)) {\n          // singular row, nonzero RHS\n          if (k === 0) {\n            // There is no valid solution\n            return [];\n          } else {\n            // This RHS is invalid but other solutions may still exist\n            B.splice(k, 1);\n            k -= 1;\n            L -= 1;\n          }\n        } else if (k === 0) {\n          // singular row, RHS is zero\n          var bNew = [...b];\n          bNew[i] = 1;\n\n          for (var _j = i + 1; _j < columns; _j++) {\n            bNew[_j] = subtract(bNew[_j], M[_j][i]);\n          }\n\n          B.push(bNew);\n        }\n      }\n    }\n\n    return B.map(x => new DenseMatrix({\n      data: x.map(e => [e]),\n      size: [rows, 1]\n    }));\n  }\n\n  function _sparseForwardSubstitution(m, b_) {\n    // array of right-hand sides\n    var B = [solveValidation(m, b_, true)._data.map(e => e[0])];\n    var rows = m._size[0];\n    var columns = m._size[1];\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr; // loop columns\n\n    for (var i = 0; i < columns; i++) {\n      var L = B.length; // loop right-hand sides\n\n      for (var k = 0; k < L; k++) {\n        var b = B[k]; // values & indices (column i)\n\n        var iValues = [];\n        var iIndices = []; // first & last indeces in column\n\n        var firstIndex = ptr[i];\n        var lastIndex = ptr[i + 1]; // find the value at [i, i]\n\n        var Mii = 0;\n\n        for (var j = firstIndex; j < lastIndex; j++) {\n          var J = index[j]; // check row\n\n          if (J === i) {\n            Mii = values[j];\n          } else if (J > i) {\n            // store lower triangular\n            iValues.push(values[j]);\n            iIndices.push(J);\n          }\n        }\n\n        if (!equalScalar(Mii, 0)) {\n          // non-singular row\n          b[i] = divideScalar(b[i], Mii);\n\n          for (var _j2 = 0, _lastIndex = iIndices.length; _j2 < _lastIndex; _j2++) {\n            var _J = iIndices[_j2];\n            b[_J] = subtract(b[_J], multiplyScalar(b[i], iValues[_j2]));\n          }\n        } else if (!equalScalar(b[i], 0)) {\n          // singular row, nonzero RHS\n          if (k === 0) {\n            // There is no valid solution\n            return [];\n          } else {\n            // This RHS is invalid but other solutions may still exist\n            B.splice(k, 1);\n            k -= 1;\n            L -= 1;\n          }\n        } else if (k === 0) {\n          // singular row, RHS is zero\n          var bNew = [...b];\n          bNew[i] = 1;\n\n          for (var _j3 = 0, _lastIndex2 = iIndices.length; _j3 < _lastIndex2; _j3++) {\n            var _J2 = iIndices[_j3];\n            bNew[_J2] = subtract(bNew[_J2], iValues[_j3]);\n          }\n\n          B.push(bNew);\n        }\n      }\n    }\n\n    return B.map(x => new DenseMatrix({\n      data: x.map(e => [e]),\n      size: [rows, 1]\n    }));\n  }\n});","import { factory } from '../../../utils/factory.js';\nimport { createSolveValidation } from './utils/solveValidation.js';\nvar name = 'usolveAll';\nvar dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];\nexport var createUsolveAll = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    divideScalar,\n    multiplyScalar,\n    subtract,\n    equalScalar,\n    DenseMatrix\n  } = _ref;\n  var solveValidation = createSolveValidation({\n    DenseMatrix\n  });\n  /**\n   * Finds all solutions of a linear equation system by backward substitution. Matrix must be an upper triangular matrix.\n   *\n   * `U * x = b`\n   *\n   * Syntax:\n   *\n   *    math.usolveAll(U, b)\n   *\n   * Examples:\n   *\n   *    const a = [[-2, 3], [2, 1]]\n   *    const b = [11, 9]\n   *    const x = usolveAll(a, b)  // [ [[8], [9]] ]\n   *\n   * See also:\n   *\n   *    usolve, lup, slu, usolve, lusolve\n   *\n   * @param {Matrix, Array} U       A N x N matrix or array (U)\n   * @param {Matrix, Array} b       A column vector with the b values\n   *\n   * @return {DenseMatrix[] | Array[]}  An array of affine-independent column vectors (x) that solve the linear system\n   */\n\n  return typed(name, {\n    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {\n      return _sparseBackwardSubstitution(m, b);\n    },\n    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {\n      return _denseBackwardSubstitution(m, b);\n    },\n    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {\n      var m = matrix(a);\n\n      var R = _denseBackwardSubstitution(m, b);\n\n      return R.map(r => r.valueOf());\n    }\n  });\n\n  function _denseBackwardSubstitution(m, b_) {\n    // the algorithm is derived from\n    // https://www.overleaf.com/read/csvgqdxggyjv\n    // array of right-hand sides\n    var B = [solveValidation(m, b_, true)._data.map(e => e[0])];\n    var M = m._data;\n    var rows = m._size[0];\n    var columns = m._size[1]; // loop columns backwards\n\n    for (var i = columns - 1; i >= 0; i--) {\n      var L = B.length; // loop right-hand sides\n\n      for (var k = 0; k < L; k++) {\n        var b = B[k];\n\n        if (!equalScalar(M[i][i], 0)) {\n          // non-singular row\n          b[i] = divideScalar(b[i], M[i][i]);\n\n          for (var j = i - 1; j >= 0; j--) {\n            // b[j] -= b[i] * M[j,i]\n            b[j] = subtract(b[j], multiplyScalar(b[i], M[j][i]));\n          }\n        } else if (!equalScalar(b[i], 0)) {\n          // singular row, nonzero RHS\n          if (k === 0) {\n            // There is no valid solution\n            return [];\n          } else {\n            // This RHS is invalid but other solutions may still exist\n            B.splice(k, 1);\n            k -= 1;\n            L -= 1;\n          }\n        } else if (k === 0) {\n          // singular row, RHS is zero\n          var bNew = [...b];\n          bNew[i] = 1;\n\n          for (var _j = i - 1; _j >= 0; _j--) {\n            bNew[_j] = subtract(bNew[_j], M[_j][i]);\n          }\n\n          B.push(bNew);\n        }\n      }\n    }\n\n    return B.map(x => new DenseMatrix({\n      data: x.map(e => [e]),\n      size: [rows, 1]\n    }));\n  }\n\n  function _sparseBackwardSubstitution(m, b_) {\n    // array of right-hand sides\n    var B = [solveValidation(m, b_, true)._data.map(e => e[0])];\n    var rows = m._size[0];\n    var columns = m._size[1];\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr; // loop columns backwards\n\n    for (var i = columns - 1; i >= 0; i--) {\n      var L = B.length; // loop right-hand sides\n\n      for (var k = 0; k < L; k++) {\n        var b = B[k]; // values & indices (column i)\n\n        var iValues = [];\n        var iIndices = []; // first & last indeces in column\n\n        var firstIndex = ptr[i];\n        var lastIndex = ptr[i + 1]; // find the value at [i, i]\n\n        var Mii = 0;\n\n        for (var j = lastIndex - 1; j >= firstIndex; j--) {\n          var J = index[j]; // check row\n\n          if (J === i) {\n            Mii = values[j];\n          } else if (J < i) {\n            // store upper triangular\n            iValues.push(values[j]);\n            iIndices.push(J);\n          }\n        }\n\n        if (!equalScalar(Mii, 0)) {\n          // non-singular row\n          b[i] = divideScalar(b[i], Mii); // loop upper triangular\n\n          for (var _j2 = 0, _lastIndex = iIndices.length; _j2 < _lastIndex; _j2++) {\n            var _J = iIndices[_j2];\n            b[_J] = subtract(b[_J], multiplyScalar(b[i], iValues[_j2]));\n          }\n        } else if (!equalScalar(b[i], 0)) {\n          // singular row, nonzero RHS\n          if (k === 0) {\n            // There is no valid solution\n            return [];\n          } else {\n            // This RHS is invalid but other solutions may still exist\n            B.splice(k, 1);\n            k -= 1;\n            L -= 1;\n          }\n        } else if (k === 0) {\n          // singular row, RHS is zero\n          var bNew = [...b];\n          bNew[i] = 1; // loop upper triangular\n\n          for (var _j3 = 0, _lastIndex2 = iIndices.length; _j3 < _lastIndex2; _j3++) {\n            var _J2 = iIndices[_j3];\n            bNew[_J2] = subtract(bNew[_J2], iValues[_j3]);\n          }\n\n          B.push(bNew);\n        }\n      }\n    }\n\n    return B.map(x => new DenseMatrix({\n      data: x.map(e => [e]),\n      size: [rows, 1]\n    }));\n  }\n});","/*\r\n * Natural Sort algorithm for Javascript - Version 0.7 - Released under MIT license\r\n * Author: Jim Palmer (based on chunking idea from Dave Koelle)\r\n */\r\n/*jshint unused:false */\r\nmodule.exports = function naturalSort (a, b) {\r\n\t\"use strict\";\r\n\tvar re = /(^([+\\-]?(?:0|[1-9]\\d*)(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)?$|^0x[0-9a-f]+$|\\d+)/gi,\r\n\t\tsre = /(^[ ]*|[ ]*$)/g,\r\n\t\tdre = /(^([\\w ]+,?[\\w ]+)?[\\w ]+,?[\\w ]+\\d+:\\d+(:\\d+)?[\\w ]?|^\\d{1,4}[\\/\\-]\\d{1,4}[\\/\\-]\\d{1,4}|^\\w+, \\w+ \\d+, \\d{4})/,\r\n\t\thre = /^0x[0-9a-f]+$/i,\r\n\t\tore = /^0/,\r\n\t\ti = function(s) { return naturalSort.insensitive && ('' + s).toLowerCase() || '' + s; },\r\n\t\t// convert all to strings strip whitespace\r\n\t\tx = i(a).replace(sre, '') || '',\r\n\t\ty = i(b).replace(sre, '') || '',\r\n\t\t// chunk/tokenize\r\n\t\txN = x.replace(re, '\\0$1\\0').replace(/\\0$/,'').replace(/^\\0/,'').split('\\0'),\r\n\t\tyN = y.replace(re, '\\0$1\\0').replace(/\\0$/,'').replace(/^\\0/,'').split('\\0'),\r\n\t\t// numeric, hex or date detection\r\n\t\txD = parseInt(x.match(hre), 16) || (xN.length !== 1 && x.match(dre) && Date.parse(x)),\r\n\t\tyD = parseInt(y.match(hre), 16) || xD && y.match(dre) && Date.parse(y) || null,\r\n\t\toFxNcL, oFyNcL;\r\n\t// first try and sort Hex codes or Dates\r\n\tif (yD) {\r\n\t\tif ( xD < yD ) { return -1; }\r\n\t\telse if ( xD > yD ) { return 1; }\r\n\t}\r\n\t// natural sorting through split numeric strings and default strings\r\n\tfor(var cLoc=0, numS=Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {\r\n\t\t// find floats not starting with '0', string or 0 if not defined (Clint Priest)\r\n\t\toFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;\r\n\t\toFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0;\r\n\t\t// handle numeric vs string comparison - number < string - (Kyle Adams)\r\n\t\tif (isNaN(oFxNcL) !== isNaN(oFyNcL)) { return (isNaN(oFxNcL)) ? 1 : -1; }\r\n\t\t// rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'\r\n\t\telse if (typeof oFxNcL !== typeof oFyNcL) {\r\n\t\t\toFxNcL += '';\r\n\t\t\toFyNcL += '';\r\n\t\t}\r\n\t\tif (oFxNcL < oFyNcL) { return -1; }\r\n\t\tif (oFxNcL > oFyNcL) { return 1; }\r\n\t}\r\n\treturn 0;\r\n};\r\n","import { compareText as _compareText } from '../../utils/string.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'compareText';\nvar dependencies = ['typed', 'matrix'];\n_compareText.signature = 'any, any';\nexport var createCompareText = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  /**\n   * Compare two strings lexically. Comparison is case sensitive.\n   * Returns 1 when x > y, -1 when x < y, and 0 when x == y.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.compareText(x, y)\n   *\n   * Examples:\n   *\n   *    math.compareText('B', 'A')     // returns 1\n   *    math.compareText('2', '10')    // returns 1\n   *    math.compare('2', '10')        // returns -1\n   *    math.compareNatural('2', '10') // returns -1\n   *\n   *    math.compareText('B', ['A', 'B', 'C']) // returns [1, 0, -1]\n   *\n   * See also:\n   *\n   *    equal, equalText, compare, compareNatural\n   *\n   * @param  {string | Array | DenseMatrix} x First string to compare\n   * @param  {string | Array | DenseMatrix} y Second string to compare\n   * @return {number | Array | DenseMatrix} Returns the result of the comparison:\n   *                                        1 when x > y, -1 when x < y, and 0 when x == y.\n   */\n\n  return typed(name, _compareText, matrixAlgorithmSuite({\n    elop: _compareText,\n    Ds: true\n  }));\n});\nexport var createCompareTextNumber = /* #__PURE__ */factory(name, ['typed'], _ref2 => {\n  var {\n    typed\n  } = _ref2;\n  return typed(name, _compareText);\n});","import { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'equal';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];\nexport var createEqual = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    DenseMatrix\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  /**\n   * Test whether two values are equal.\n   *\n   * The function tests whether the relative difference between x and y is\n   * smaller than the configured epsilon. The function cannot be used to\n   * compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.\n   *\n   * Values `null` and `undefined` are compared strictly, thus `null` is only\n   * equal to `null` and nothing else, and `undefined` is only equal to\n   * `undefined` and nothing else. Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.equal(x, y)\n   *\n   * Examples:\n   *\n   *    math.equal(2 + 2, 3)         // returns false\n   *    math.equal(2 + 2, 4)         // returns true\n   *\n   *    const a = math.unit('50 cm')\n   *    const b = math.unit('5 m')\n   *    math.equal(a, b)             // returns true\n   *\n   *    const c = [2, 5, 1]\n   *    const d = [2, 7, 1]\n   *\n   *    math.equal(c, d)             // returns [true, false, true]\n   *    math.deepEqual(c, d)         // returns false\n   *\n   *    math.equal(\"1000\", \"1e3\")    // returns true\n   *    math.equal(0, null)          // returns false\n   *\n   * See also:\n   *\n   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual, equalText\n   *\n   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false\n   */\n\n  return typed(name, createEqualNumber({\n    typed,\n    equalScalar\n  }), matrixAlgorithmSuite({\n    elop: equalScalar,\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createEqualNumber = factory(name, ['typed', 'equalScalar'], _ref2 => {\n  var {\n    typed,\n    equalScalar\n  } = _ref2;\n  return typed(name, {\n    'any, any': function anyAny(x, y) {\n      // strict equality for null and undefined?\n      if (x === null) {\n        return y === null;\n      }\n\n      if (y === null) {\n        return x === null;\n      }\n\n      if (x === undefined) {\n        return y === undefined;\n      }\n\n      if (y === undefined) {\n        return x === undefined;\n      }\n\n      return equalScalar(x, y);\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'unequal';\nvar dependencies = ['typed', 'config', 'equalScalar', 'matrix', 'DenseMatrix'];\nexport var createUnequal = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    equalScalar,\n    matrix,\n    DenseMatrix\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  /**\n   * Test whether two values are unequal.\n   *\n   * The function tests whether the relative difference between x and y is\n   * larger than the configured epsilon. The function cannot be used to compare\n   * values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.\n   * Strings are compared by their numerical value.\n   *\n   * Values `null` and `undefined` are compared strictly, thus `null` is unequal\n   * with everything except `null`, and `undefined` is unequal with everything\n   * except `undefined`.\n   *\n   * Syntax:\n   *\n   *    math.unequal(x, y)\n   *\n   * Examples:\n   *\n   *    math.unequal(2 + 2, 3)       // returns true\n   *    math.unequal(2 + 2, 4)       // returns false\n   *\n   *    const a = math.unit('50 cm')\n   *    const b = math.unit('5 m')\n   *    math.unequal(a, b)           // returns false\n   *\n   *    const c = [2, 5, 1]\n   *    const d = [2, 7, 1]\n   *\n   *    math.unequal(c, d)           // returns [false, true, false]\n   *    math.deepEqual(c, d)         // returns false\n   *\n   *    math.unequal(0, null)        // returns true\n   * See also:\n   *\n   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false\n   */\n\n  return typed(name, createUnequalNumber({\n    typed,\n    equalScalar\n  }), matrixAlgorithmSuite({\n    elop: _unequal,\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n\n  function _unequal(x, y) {\n    return !equalScalar(x, y);\n  }\n});\nexport var createUnequalNumber = factory(name, ['typed', 'equalScalar'], _ref2 => {\n  var {\n    typed,\n    equalScalar\n  } = _ref2;\n  return typed(name, {\n    'any, any': function anyAny(x, y) {\n      // strict equality for null and undefined?\n      if (x === null) {\n        return y !== null;\n      }\n\n      if (y === null) {\n        return x !== null;\n      }\n\n      if (x === undefined) {\n        return y !== undefined;\n      }\n\n      if (y === undefined) {\n        return x !== undefined;\n      }\n\n      return !equalScalar(x, y);\n    }\n  });\n});","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import { memoize } from '../function.js';\n/**\n * Calculate BigNumber e\n * @param {function} BigNumber   BigNumber constructor\n * @returns {BigNumber} Returns e\n */\n\nexport var createBigNumberE = memoize(function (BigNumber) {\n  return new BigNumber(1).exp();\n}, {\n  hasher\n});\n/**\n * Calculate BigNumber golden ratio, phi = (1+sqrt(5))/2\n * @param {function} BigNumber   BigNumber constructor\n * @returns {BigNumber} Returns phi\n */\n\nexport var createBigNumberPhi = memoize(function (BigNumber) {\n  return new BigNumber(1).plus(new BigNumber(5).sqrt()).div(2);\n}, {\n  hasher\n});\n/**\n * Calculate BigNumber pi.\n * @param {function} BigNumber   BigNumber constructor\n * @returns {BigNumber} Returns pi\n */\n\nexport var createBigNumberPi = memoize(function (BigNumber) {\n  return BigNumber.acos(-1);\n}, {\n  hasher\n});\n/**\n * Calculate BigNumber tau, tau = 2 * pi\n * @param {function} BigNumber   BigNumber constructor\n * @returns {BigNumber} Returns tau\n */\n\nexport var createBigNumberTau = memoize(function (BigNumber) {\n  return createBigNumberPi(BigNumber).times(2);\n}, {\n  hasher\n});\n/**\n * Create a hash for a BigNumber constructor function. The created has is\n * the configured precision\n * @param {Array} args         Supposed to contain a single entry with\n *                             a BigNumber constructor\n * @return {number} precision\n * @private\n */\n\nfunction hasher(args) {\n  return args[0].precision;\n}","import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { isComplex, isUnit, typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { memoize } from '../../utils/function.js';\nimport { endsWith } from '../../utils/string.js';\nimport { clone, hasOwnProperty } from '../../utils/object.js';\nimport { createBigNumberPi as createPi } from '../../utils/bignumber/constants.js';\nvar name = 'Unit';\nvar dependencies = ['?on', 'config', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'abs', 'fix', 'round', 'equal', 'isNumeric', 'format', 'number', 'Complex', 'BigNumber', 'Fraction'];\nexport var createUnitClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    on,\n    config,\n    addScalar,\n    subtract,\n    multiplyScalar,\n    divideScalar,\n    pow,\n    abs,\n    fix,\n    round,\n    equal,\n    isNumeric,\n    format,\n    number,\n    Complex,\n    BigNumber: _BigNumber,\n    Fraction: _Fraction\n  } = _ref;\n  var toNumber = number;\n  /**\n   * A unit can be constructed in the following ways:\n   *\n   *     const a = new Unit(value, valuelessUnit)\n   *     const b = new Unit(null, valuelessUnit)\n   *     const c = Unit.parse(str)\n   *\n   * Example usage:\n   *\n   *     const a = new Unit(5, 'cm')               // 50 mm\n   *     const b = Unit.parse('23 kg')             // 23 kg\n   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m\n   *     const d = new Unit(9.81, \"m/s^2\")         // 9.81 m/s^2\n   *\n   * @class Unit\n   * @constructor Unit\n   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\n   */\n\n  function Unit(value, valuelessUnit) {\n    if (!(this instanceof Unit)) {\n      throw new Error('Constructor must be called with the new operator');\n    }\n\n    if (!(value === null || value === undefined || isNumeric(value) || isComplex(value))) {\n      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');\n    }\n\n    this.fixPrefix = false; // if true, function format will not search for the\n    // best prefix but leave it as initially provided.\n    // fixPrefix is set true by the method Unit.to\n    // The justification behind this is that if the constructor is explicitly called,\n    // the caller wishes the units to be returned exactly as supplied.\n\n    this.skipAutomaticSimplification = true;\n\n    if (valuelessUnit === undefined) {\n      this.units = [];\n      this.dimensions = BASE_DIMENSIONS.map(x => 0);\n    } else if (typeof valuelessUnit === 'string') {\n      var u = Unit.parse(valuelessUnit);\n      this.units = u.units;\n      this.dimensions = u.dimensions;\n    } else if (isUnit(valuelessUnit) && valuelessUnit.value === null) {\n      // clone from valuelessUnit\n      this.fixPrefix = valuelessUnit.fixPrefix;\n      this.skipAutomaticSimplification = valuelessUnit.skipAutomaticSimplification;\n      this.dimensions = valuelessUnit.dimensions.slice(0);\n      this.units = valuelessUnit.units.map(u => _extends({}, u));\n    } else {\n      throw new TypeError('Second parameter in Unit constructor must be a string or valueless Unit');\n    }\n\n    this.value = this._normalize(value);\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Object.defineProperty(Unit, 'name', {\n    value: 'Unit'\n  });\n  Unit.prototype.constructor = Unit;\n  Unit.prototype.type = 'Unit';\n  Unit.prototype.isUnit = true; // private variables and functions for the Unit parser\n\n  var text, index, c;\n\n  function skipWhitespace() {\n    while (c === ' ' || c === '\\t') {\n      next();\n    }\n  }\n\n  function isDigitDot(c) {\n    return c >= '0' && c <= '9' || c === '.';\n  }\n\n  function isDigit(c) {\n    return c >= '0' && c <= '9';\n  }\n\n  function next() {\n    index++;\n    c = text.charAt(index);\n  }\n\n  function revert(oldIndex) {\n    index = oldIndex;\n    c = text.charAt(index);\n  }\n\n  function parseNumber() {\n    var number = '';\n    var oldIndex = index;\n\n    if (c === '+') {\n      next();\n    } else if (c === '-') {\n      number += c;\n      next();\n    }\n\n    if (!isDigitDot(c)) {\n      // a + or - must be followed by a digit\n      revert(oldIndex);\n      return null;\n    } // get number, can have a single dot\n\n\n    if (c === '.') {\n      number += c;\n      next();\n\n      if (!isDigit(c)) {\n        // this is no legal number, it is just a dot\n        revert(oldIndex);\n        return null;\n      }\n    } else {\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n\n      if (c === '.') {\n        number += c;\n        next();\n      }\n    }\n\n    while (isDigit(c)) {\n      number += c;\n      next();\n    } // check for exponential notation like \"2.3e-4\" or \"1.23e50\"\n\n\n    if (c === 'E' || c === 'e') {\n      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as \"4exabytes\"\n      var tentativeNumber = '';\n      var tentativeIndex = index;\n      tentativeNumber += c;\n      next();\n\n      if (c === '+' || c === '-') {\n        tentativeNumber += c;\n        next();\n      } // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)\n\n\n      if (!isDigit(c)) {\n        // The e or E must belong to something else, so return the number without the e or E.\n        revert(tentativeIndex);\n        return number;\n      } // We can now safely say that this is scientific notation.\n\n\n      number = number + tentativeNumber;\n\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n    }\n\n    return number;\n  }\n\n  function parseUnit() {\n    var unitName = ''; // Alphanumeric characters only; matches [a-zA-Z0-9]\n\n    while (isDigit(c) || Unit.isValidAlpha(c)) {\n      unitName += c;\n      next();\n    } // Must begin with [a-zA-Z]\n\n\n    var firstC = unitName.charAt(0);\n\n    if (Unit.isValidAlpha(firstC)) {\n      return unitName;\n    } else {\n      return null;\n    }\n  }\n\n  function parseCharacter(toFind) {\n    if (c === toFind) {\n      next();\n      return toFind;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Parse a string into a unit. The value of the unit is parsed as number,\n   * BigNumber, or Fraction depending on the math.js config setting `number`.\n   *\n   * Throws an exception if the provided string does not contain a valid unit or\n   * cannot be parsed.\n   * @memberof Unit\n   * @param {string} str        A string like \"5.2 inch\", \"4e2 cm/s^2\"\n   * @return {Unit} unit\n   */\n\n\n  Unit.parse = function (str, options) {\n    options = options || {};\n    text = str;\n    index = -1;\n    c = '';\n\n    if (typeof text !== 'string') {\n      throw new TypeError('Invalid argument in Unit.parse, string expected');\n    }\n\n    var unit = new Unit();\n    unit.units = [];\n    var powerMultiplierCurrent = 1;\n    var expectingUnit = false; // A unit should follow this pattern:\n    // [number] ...[ [*/] unit[^number] ]\n    // unit[^number] ... [ [*/] unit[^number] ]\n    // Rules:\n    // number is any floating point number.\n    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!\n    // The string may optionally begin with a number.\n    // Each unit may optionally be followed by ^number.\n    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:\n    //   2m^2kg/s^2\n    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:\n    //   4erg\n\n    next();\n    skipWhitespace(); // Optional number at the start of the string\n\n    var valueStr = parseNumber();\n    var value = null;\n\n    if (valueStr) {\n      if (config.number === 'BigNumber') {\n        value = new _BigNumber(valueStr);\n      } else if (config.number === 'Fraction') {\n        try {\n          // not all numbers can be turned in Fractions, for example very small numbers not\n          value = new _Fraction(valueStr);\n        } catch (err) {\n          value = parseFloat(valueStr);\n        }\n      } else {\n        // number\n        value = parseFloat(valueStr);\n      }\n\n      skipWhitespace(); // Whitespace is not required here\n      // handle multiplication or division right after the value, like '1/s'\n\n      if (parseCharacter('*')) {\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      }\n    } // Stack to keep track of powerMultipliers applied to each parentheses group\n\n\n    var powerMultiplierStack = []; // Running product of all elements in powerMultiplierStack\n\n    var powerMultiplierStackProduct = 1;\n\n    while (true) {\n      skipWhitespace(); // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack\n      // A '(' will always appear directly before a unit.\n\n      while (c === '(') {\n        powerMultiplierStack.push(powerMultiplierCurrent);\n        powerMultiplierStackProduct *= powerMultiplierCurrent;\n        powerMultiplierCurrent = 1;\n        next();\n        skipWhitespace();\n      } // Is there something here?\n\n\n      var uStr = void 0;\n\n      if (c) {\n        var oldC = c;\n        uStr = parseUnit();\n\n        if (uStr === null) {\n          throw new SyntaxError('Unexpected \"' + oldC + '\" in \"' + text + '\" at index ' + index.toString());\n        }\n      } else {\n        // End of input.\n        break;\n      } // Verify the unit exists and get the prefix (if any)\n\n\n      var res = _findUnit(uStr);\n\n      if (res === null) {\n        // Unit not found.\n        throw new SyntaxError('Unit \"' + uStr + '\" not found.');\n      }\n\n      var power = powerMultiplierCurrent * powerMultiplierStackProduct; // Is there a \"^ number\"?\n\n      skipWhitespace();\n\n      if (parseCharacter('^')) {\n        skipWhitespace();\n        var p = parseNumber();\n\n        if (p === null) {\n          // No valid number found for the power!\n          throw new SyntaxError('In \"' + str + '\", \"^\" must be followed by a floating-point number');\n        }\n\n        power *= p;\n      } // Add the unit to the list\n\n\n      unit.units.push({\n        unit: res.unit,\n        prefix: res.prefix,\n        power\n      });\n\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;\n      } // Check for and consume closing parentheses, popping from the stack.\n      // A ')' will always follow a unit.\n\n\n      skipWhitespace();\n\n      while (c === ')') {\n        if (powerMultiplierStack.length === 0) {\n          throw new SyntaxError('Unmatched \")\" in \"' + text + '\" at index ' + index.toString());\n        }\n\n        powerMultiplierStackProduct /= powerMultiplierStack.pop();\n        next();\n        skipWhitespace();\n      } // \"*\" and \"/\" should mean we are expecting something to come next.\n      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.\n\n\n      expectingUnit = false;\n\n      if (parseCharacter('*')) {\n        // explicit multiplication\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        // division\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      } else {\n        // implicit multiplication\n        powerMultiplierCurrent = 1;\n      } // Replace the unit into the auto unit system\n\n\n      if (res.unit.base) {\n        var baseDim = res.unit.base.key;\n        UNIT_SYSTEMS.auto[baseDim] = {\n          unit: res.unit,\n          prefix: res.prefix\n        };\n      }\n    } // Has the string been entirely consumed?\n\n\n    skipWhitespace();\n\n    if (c) {\n      throw new SyntaxError('Could not parse: \"' + str + '\"');\n    } // Is there a trailing slash?\n\n\n    if (expectingUnit) {\n      throw new SyntaxError('Trailing characters: \"' + str + '\"');\n    } // Is the parentheses stack empty?\n\n\n    if (powerMultiplierStack.length !== 0) {\n      throw new SyntaxError('Unmatched \"(\" in \"' + text + '\"');\n    } // Are there any units at all?\n\n\n    if (unit.units.length === 0 && !options.allowNoUnits) {\n      throw new SyntaxError('\"' + str + '\" contains no units');\n    }\n\n    unit.value = value !== undefined ? unit._normalize(value) : null;\n    return unit;\n  };\n  /**\n   * create a copy of this unit\n   * @memberof Unit\n   * @return {Unit} Returns a cloned version of the unit\n   */\n\n\n  Unit.prototype.clone = function () {\n    var unit = new Unit();\n    unit.fixPrefix = this.fixPrefix;\n    unit.skipAutomaticSimplification = this.skipAutomaticSimplification;\n    unit.value = clone(this.value);\n    unit.dimensions = this.dimensions.slice(0);\n    unit.units = [];\n\n    for (var i = 0; i < this.units.length; i++) {\n      unit.units[i] = {};\n\n      for (var p in this.units[i]) {\n        if (hasOwnProperty(this.units[i], p)) {\n          unit.units[i][p] = this.units[i][p];\n        }\n      }\n    }\n\n    return unit;\n  };\n  /**\n   * Return the type of the value of this unit\n   *\n   * @memberof Unit\n   * @ return {string} type of the value of the unit\n   */\n\n\n  Unit.prototype.valueType = function () {\n    return typeOf(this.value);\n  };\n  /**\n   * Return whether the unit is derived (such as m/s, or cm^2, but not N)\n   * @memberof Unit\n   * @return {boolean} True if the unit is derived\n   */\n\n\n  Unit.prototype._isDerived = function () {\n    if (this.units.length === 0) {\n      return false;\n    }\n\n    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;\n  };\n  /**\n   * Normalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number | BigNumber | Fraction | boolean} value\n   * @return {number | BigNumber | Fraction | boolean} normalized value\n   * @private\n   */\n\n\n  Unit.prototype._normalize = function (value) {\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    }\n\n    var res = value;\n\n    var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n\n    for (var i = 0; i < this.units.length; i++) {\n      var unitValue = convert(this.units[i].unit.value);\n      var unitPrefixValue = convert(this.units[i].prefix.value);\n      var unitPower = convert(this.units[i].power);\n      res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n    }\n\n    return res;\n  };\n  /**\n   * Denormalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number} value\n   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)\n   * @return {number} denormalized value\n   * @private\n   */\n\n\n  Unit.prototype._denormalize = function (value, prefixValue) {\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    }\n\n    var res = value;\n\n    var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n\n    for (var i = 0; i < this.units.length; i++) {\n      var unitValue = convert(this.units[i].unit.value);\n      var unitPrefixValue = convert(this.units[i].prefix.value);\n      var unitPower = convert(this.units[i].power);\n      res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n    }\n\n    return res;\n  };\n  /**\n   * Find a unit from a string\n   * @memberof Unit\n   * @param {string} str              A string like 'cm' or 'inch'\n   * @returns {Object | null} result  When found, an object with fields unit and\n   *                                  prefix is returned. Else, null is returned.\n   * @private\n   */\n\n\n  var _findUnit = memoize(str => {\n    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.\n    if (hasOwnProperty(UNITS, str)) {\n      var unit = UNITS[str];\n      var prefix = unit.prefixes[''];\n      return {\n        unit,\n        prefix\n      };\n    }\n\n    for (var _name in UNITS) {\n      if (hasOwnProperty(UNITS, _name)) {\n        if (endsWith(str, _name)) {\n          var _unit = UNITS[_name];\n          var prefixLen = str.length - _name.length;\n          var prefixName = str.substring(0, prefixLen);\n\n          var _prefix = hasOwnProperty(_unit.prefixes, prefixName) ? _unit.prefixes[prefixName] : undefined;\n\n          if (_prefix !== undefined) {\n            // store unit, prefix, and value\n            return {\n              unit: _unit,\n              prefix: _prefix\n            };\n          }\n        }\n      }\n    }\n\n    return null;\n  }, {\n    hasher: args => args[0],\n    limit: 100\n  });\n  /**\n   * Test if the given expression is a unit.\n   * The unit can have a prefix but cannot have a value.\n   * @memberof Unit\n   * @param {string} name   A string to be tested whether it is a value less unit.\n   *                        The unit can have prefix, like \"cm\"\n   * @return {boolean}      true if the given string is a unit\n   */\n\n\n  Unit.isValuelessUnit = function (name) {\n    return _findUnit(name) !== null;\n  };\n  /**\n   * check if this unit has given base unit\n   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.\n   * @memberof Unit\n   * @param {BASE_UNITS | string | undefined} base\n   */\n\n\n  Unit.prototype.hasBase = function (base) {\n    if (typeof base === 'string') {\n      base = BASE_UNITS[base];\n    }\n\n    if (!base) {\n      return false;\n    } // All dimensions must be the same\n\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Check if this unit has a base or bases equal to another base or bases\n   * For derived units, the exponent on each base also must match\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if equal base\n   */\n\n\n  Unit.prototype.equalBase = function (other) {\n    // All dimensions must be the same\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Check if this unit equals another unit\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if both units are equal\n   */\n\n\n  Unit.prototype.equals = function (other) {\n    return this.equalBase(other) && equal(this.value, other.value);\n  };\n  /**\n   * Multiply this unit with another one or with a scalar\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {Unit} product of this unit and the other unit\n   */\n\n\n  Unit.prototype.multiply = function (_other) {\n    var res = this.clone();\n    var other = isUnit(_other) ? _other : new Unit(_other);\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);\n    } // Append other's units list onto res\n\n\n    for (var _i = 0; _i < other.units.length; _i++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread({}, other.units[_i]);\n\n      res.units.push(inverted);\n    } // If at least one operand has a value, then the result should also have a value\n\n\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = multiplyScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n\n    if (isUnit(_other)) {\n      res.skipAutomaticSimplification = false;\n    }\n\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Divide a number by this unit\n   *\n   * @memberof Unit\n   * @param {numeric} numerator\n   * @param {unit} result of dividing numerator by this unit\n   */\n\n\n  Unit.prototype.divideInto = function (numerator) {\n    return new Unit(numerator).divide(this);\n  };\n  /**\n   * Divide this unit by another one\n   * @memberof Unit\n   * @param {Unit | numeric} other\n   * @return {Unit} result of dividing this unit by the other unit\n   */\n\n\n  Unit.prototype.divide = function (_other) {\n    var res = this.clone();\n    var other = isUnit(_other) ? _other : new Unit(_other);\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);\n    } // Invert and append other's units list onto res\n\n\n    for (var _i2 = 0; _i2 < other.units.length; _i2++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread(_objectSpread({}, other.units[_i2]), {}, {\n        power: -other.units[_i2].power\n      });\n\n      res.units.push(inverted);\n    } // If at least one operand has a value, the result should have a value\n\n\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = divideScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n\n    if (isUnit(_other)) {\n      res.skipAutomaticSimplification = false;\n    }\n\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Calculate the power of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} p\n   * @returns {Unit}      The result: this^p\n   */\n\n\n  Unit.prototype.pow = function (p) {\n    var res = this.clone();\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) * p;\n    } // Adjust the power of each unit in the list\n\n\n    for (var _i3 = 0; _i3 < res.units.length; _i3++) {\n      res.units[_i3].power *= p;\n    }\n\n    if (res.value !== null) {\n      res.value = pow(res.value, p); // only allow numeric output, we don't want to return a Complex number\n      // if (!isNumeric(res.value)) {\n      //  res.value = NaN\n      // }\n      // Update: Complex supported now\n    } else {\n      res.value = null;\n    }\n\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise\n   * @param {Unit} unit\n   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise\n   */\n\n\n  function getNumericIfUnitless(unit) {\n    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {\n      return unit.value;\n    } else {\n      return unit;\n    }\n  }\n  /**\n   * Calculate the absolute value of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} x\n   * @returns {Unit}      The result: |x|, absolute value of x\n   */\n\n\n  Unit.prototype.abs = function () {\n    var ret = this.clone();\n\n    if (ret.value !== null) {\n      if (ret._isDerived() || ret.units[0].unit.offset === 0) {\n        ret.value = abs(ret.value);\n      } else {\n        // To give the correct, but unexpected, results for units with an offset.\n        // For example, abs(-283.15 degC) = -263.15 degC !!!\n        // We must take the offset into consideration here\n        var convert = ret._numberConverter(); // convert to Fraction or BigNumber if needed\n\n\n        var unitValue = convert(ret.units[0].unit.value);\n        var nominalOffset = convert(ret.units[0].unit.offset);\n        var unitOffset = multiplyScalar(unitValue, nominalOffset);\n        ret.value = subtract(abs(addScalar(ret.value, unitOffset)), unitOffset);\n      }\n    }\n\n    for (var i in ret.units) {\n      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {\n        ret.units[i].unit = UNITS.W;\n      }\n    }\n\n    return ret;\n  };\n  /**\n   * Convert the unit to a specific unit name.\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\n   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.\n   */\n\n\n  Unit.prototype.to = function (valuelessUnit) {\n    var value = this.value === null ? this._normalize(1) : this.value;\n    var other;\n\n    if (typeof valuelessUnit === 'string') {\n      other = Unit.parse(valuelessUnit);\n    } else if (isUnit(valuelessUnit)) {\n      other = valuelessUnit.clone();\n    } else {\n      throw new Error('String or Unit expected as parameter');\n    }\n\n    if (!this.equalBase(other)) {\n      throw new Error(\"Units do not match ('\".concat(other.toString(), \"' != '\").concat(this.toString(), \"')\"));\n    }\n\n    if (other.value !== null) {\n      throw new Error('Cannot convert to a unit with a value');\n    }\n\n    if (this.value === null || this._isDerived() || this.units[0].unit.offset === other.units[0].unit.offset) {\n      other.value = clone(value);\n    } else {\n      /* Need to adjust value by difference in offset to convert */\n      var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n\n      var thisUnitValue = convert(this.units[0].unit.value);\n      var thisNominalOffset = convert(this.units[0].unit.offset);\n      var thisUnitOffset = multiplyScalar(thisUnitValue, thisNominalOffset);\n      var otherUnitValue = convert(other.units[0].unit.value);\n      var otherNominalOffset = convert(other.units[0].unit.offset);\n      var otherUnitOffset = multiplyScalar(otherUnitValue, otherNominalOffset);\n      other.value = subtract(addScalar(value, thisUnitOffset), otherUnitOffset);\n    }\n\n    other.fixPrefix = true;\n    other.skipAutomaticSimplification = true;\n    return other;\n  };\n  /**\n   * Return the value of the unit when represented with given valueless unit\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number} Returns the unit value as number.\n   */\n  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric\n\n\n  Unit.prototype.toNumber = function (valuelessUnit) {\n    return toNumber(this.toNumeric(valuelessUnit));\n  };\n  /**\n   * Return the value of the unit in the original numeric type\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number | BigNumber | Fraction} Returns the unit value\n   */\n\n\n  Unit.prototype.toNumeric = function (valuelessUnit) {\n    var other;\n\n    if (valuelessUnit) {\n      // Allow getting the numeric value without converting to a different unit\n      other = this.to(valuelessUnit);\n    } else {\n      other = this.clone();\n    }\n\n    if (other._isDerived() || other.units.length === 0) {\n      return other._denormalize(other.value);\n    } else {\n      return other._denormalize(other.value, other.units[0].prefix.value);\n    }\n  };\n  /**\n   * Get a string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.toString = function () {\n    return this.format();\n  };\n  /**\n   * Get a JSON representation of the unit\n   * @memberof Unit\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   */\n\n\n  Unit.prototype.toJSON = function () {\n    return {\n      mathjs: 'Unit',\n      value: this._denormalize(this.value),\n      unit: this.formatUnits(),\n      fixPrefix: this.fixPrefix\n    };\n  };\n  /**\n   * Instantiate a Unit from a JSON object\n   * @memberof Unit\n   * @param {Object} json  A JSON object structured as:\n   *                       `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   * @return {Unit}\n   */\n\n\n  Unit.fromJSON = function (json) {\n    var unit = new Unit(json.value, json.unit);\n    unit.fixPrefix = json.fixPrefix || false;\n    return unit;\n  };\n  /**\n   * Returns the string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.valueOf = Unit.prototype.toString;\n  /**\n   * Simplify this Unit's unit list and return a new Unit with the simplified list.\n   * The returned Unit will contain a list of the \"best\" units for formatting.\n   */\n\n  Unit.prototype.simplify = function () {\n    var ret = this.clone();\n    var proposedUnitList = []; // Search for a matching base\n\n    var matchingBase;\n\n    for (var key in currentUnitSystem) {\n      if (hasOwnProperty(currentUnitSystem, key)) {\n        if (ret.hasBase(BASE_UNITS[key])) {\n          matchingBase = key;\n          break;\n        }\n      }\n    }\n\n    if (matchingBase === 'NONE') {\n      ret.units = [];\n    } else {\n      var matchingUnit;\n\n      if (matchingBase) {\n        // Does the unit system have a matching unit?\n        if (hasOwnProperty(currentUnitSystem, matchingBase)) {\n          matchingUnit = currentUnitSystem[matchingBase];\n        }\n      }\n\n      if (matchingUnit) {\n        ret.units = [{\n          unit: matchingUnit.unit,\n          prefix: matchingUnit.prefix,\n          power: 1.0\n        }];\n      } else {\n        // Multiple units or units with powers are formatted like this:\n        // 5 (kg m^2) / (s^3 mol)\n        // Build an representation from the base units of the current unit system\n        var missingBaseDim = false;\n\n        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n          var baseDim = BASE_DIMENSIONS[i];\n\n          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n            if (hasOwnProperty(currentUnitSystem, baseDim)) {\n              proposedUnitList.push({\n                unit: currentUnitSystem[baseDim].unit,\n                prefix: currentUnitSystem[baseDim].prefix,\n                power: ret.dimensions[i] || 0\n              });\n            } else {\n              missingBaseDim = true;\n            }\n          }\n        } // Is the proposed unit list \"simpler\" than the existing one?\n\n\n        if (proposedUnitList.length < ret.units.length && !missingBaseDim) {\n          // Replace this unit list with the proposed list\n          ret.units = proposedUnitList;\n        }\n      }\n    }\n\n    return ret;\n  };\n  /**\n   * Returns a new Unit in the SI system with the same value as this one\n   */\n\n\n  Unit.prototype.toSI = function () {\n    var ret = this.clone();\n    var proposedUnitList = []; // Multiple units or units with powers are formatted like this:\n    // 5 (kg m^2) / (s^3 mol)\n    // Build an representation from the base units of the SI unit system\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      var baseDim = BASE_DIMENSIONS[i];\n\n      if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n        if (hasOwnProperty(UNIT_SYSTEMS.si, baseDim)) {\n          proposedUnitList.push({\n            unit: UNIT_SYSTEMS.si[baseDim].unit,\n            prefix: UNIT_SYSTEMS.si[baseDim].prefix,\n            power: ret.dimensions[i] || 0\n          });\n        } else {\n          throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');\n        }\n      }\n    } // Replace this unit list with the proposed list\n\n\n    ret.units = proposedUnitList;\n    ret.fixPrefix = true;\n    ret.skipAutomaticSimplification = true;\n    return ret;\n  };\n  /**\n   * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.formatUnits = function () {\n    var strNum = '';\n    var strDen = '';\n    var nNum = 0;\n    var nDen = 0;\n\n    for (var i = 0; i < this.units.length; i++) {\n      if (this.units[i].power > 0) {\n        nNum++;\n        strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;\n\n        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {\n          strNum += '^' + this.units[i].power;\n        }\n      } else if (this.units[i].power < 0) {\n        nDen++;\n      }\n    }\n\n    if (nDen > 0) {\n      for (var _i4 = 0; _i4 < this.units.length; _i4++) {\n        if (this.units[_i4].power < 0) {\n          if (nNum > 0) {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n\n            if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {\n              strDen += '^' + -this.units[_i4].power;\n            }\n          } else {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n            strDen += '^' + this.units[_i4].power;\n          }\n        }\n      }\n    } // Remove leading \" \"\n\n\n    strNum = strNum.substr(1);\n    strDen = strDen.substr(1); // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting\n\n    if (nNum > 1 && nDen > 0) {\n      strNum = '(' + strNum + ')';\n    }\n\n    if (nDen > 1 && nNum > 0) {\n      strDen = '(' + strDen + ')';\n    }\n\n    var str = strNum;\n\n    if (nNum > 0 && nDen > 0) {\n      str += ' / ';\n    }\n\n    str += strDen;\n    return str;\n  };\n  /**\n   * Get a string representation of the Unit, with optional formatting options.\n   * @memberof Unit\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string}\n   */\n\n\n  Unit.prototype.format = function (options) {\n    // Simplfy the unit list, unless it is valueless or was created directly in the\n    // constructor or as the result of to or toSI\n    var simp = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify(); // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.\n\n    var isImaginary = false;\n\n    if (typeof simp.value !== 'undefined' && simp.value !== null && isComplex(simp.value)) {\n      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute\n      isImaginary = Math.abs(simp.value.re) < 1e-14;\n    }\n\n    for (var i in simp.units) {\n      if (hasOwnProperty(simp.units, i)) {\n        if (simp.units[i].unit) {\n          if (simp.units[i].unit.name === 'VA' && isImaginary) {\n            simp.units[i].unit = UNITS.VAR;\n          } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {\n            simp.units[i].unit = UNITS.VA;\n          }\n        }\n      }\n    } // Now apply the best prefix\n    // Units must have only one unit and not have the fixPrefix flag set\n\n\n    if (simp.units.length === 1 && !simp.fixPrefix) {\n      // Units must have integer powers, otherwise the prefix will change the\n      // outputted value by not-an-integer-power-of-ten\n      if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {\n        // Apply the best prefix\n        simp.units[0].prefix = simp._bestPrefix();\n      }\n    }\n\n    var value = simp._denormalize(simp.value);\n\n    var str = simp.value !== null ? format(value, options || {}) : '';\n    var unitStr = simp.formatUnits();\n\n    if (simp.value && isComplex(simp.value)) {\n      str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing\n    }\n\n    if (unitStr.length > 0 && str.length > 0) {\n      str += ' ';\n    }\n\n    str += unitStr;\n    return str;\n  };\n  /**\n   * Calculate the best prefix using current value.\n   * @memberof Unit\n   * @returns {Object} prefix\n   * @private\n   */\n\n\n  Unit.prototype._bestPrefix = function () {\n    if (this.units.length !== 1) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    }\n\n    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    } // find the best prefix value (resulting in the value of which\n    // the absolute value of the log10 is closest to zero,\n    // though with a little offset of 1.2 for nicer values: you get a\n    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...\n    // Note: the units value can be any numeric type, but to find the best\n    // prefix it's enough to work with limited precision of a regular number\n    // Update: using mathjs abs since we also allow complex numbers\n\n\n    var absValue = this.value !== null ? abs(this.value) : 0;\n    var absUnitValue = abs(this.units[0].unit.value);\n    var bestPrefix = this.units[0].prefix;\n\n    if (absValue === 0) {\n      return bestPrefix;\n    }\n\n    var power = this.units[0].power;\n    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;\n    if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix\n\n    bestDiff = Math.abs(bestDiff);\n    var prefixes = this.units[0].unit.prefixes;\n\n    for (var p in prefixes) {\n      if (hasOwnProperty(prefixes, p)) {\n        var prefix = prefixes[p];\n\n        if (prefix.scientific) {\n          var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);\n\n          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {\n            // choose the prefix with the smallest diff, or if equal, choose the one\n            // with the shortest name (can happen with SHORTLONG for example)\n            bestPrefix = prefix;\n            bestDiff = diff;\n          }\n        }\n      }\n    }\n\n    return bestPrefix;\n  };\n  /**\n   * Returns an array of units whose sum is equal to this unit\n   * @memberof Unit\n   * @param {Array} [parts] An array of strings or valueless units.\n   *\n   *   Example:\n   *\n   *   const u = new Unit(1, 'm')\n   *   u.splitUnit(['feet', 'inch'])\n   *     [ 3 feet, 3.3700787401575 inch ]\n   *\n   * @return {Array} An array of units.\n   */\n\n\n  Unit.prototype.splitUnit = function (parts) {\n    var x = this.clone();\n    var ret = [];\n\n    for (var i = 0; i < parts.length; i++) {\n      // Convert x to the requested unit\n      x = x.to(parts[i]);\n      if (i === parts.length - 1) break; // Get the numeric value of this unit\n\n      var xNumeric = x.toNumeric(); // Check to see if xNumeric is nearly equal to an integer,\n      // since fix can incorrectly round down if there is round-off error\n\n      var xRounded = round(xNumeric);\n      var xFixed = void 0;\n      var isNearlyEqual = equal(xRounded, xNumeric);\n\n      if (isNearlyEqual) {\n        xFixed = xRounded;\n      } else {\n        xFixed = fix(x.toNumeric());\n      }\n\n      var y = new Unit(xFixed, parts[i].toString());\n      ret.push(y);\n      x = subtract(x, y);\n    } // This little bit fixes a bug where the remainder should be 0 but is a little bit off.\n    // But instead of comparing x, the remainder, with zero--we will compare the sum of\n    // all the parts so far with the original value. If they are nearly equal,\n    // we set the remainder to 0.\n\n\n    var testSum = 0;\n\n    for (var _i5 = 0; _i5 < ret.length; _i5++) {\n      testSum = addScalar(testSum, ret[_i5].value);\n    }\n\n    if (equal(testSum, this.value)) {\n      x.value = 0;\n    }\n\n    ret.push(x);\n    return ret;\n  };\n\n  var PREFIXES = {\n    NONE: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      }\n    },\n    SHORT: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e1,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e2,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-1,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-2,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-3,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-6,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-9,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-12,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-15,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-18,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-21,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    LONG: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      deca: {\n        name: 'deca',\n        value: 1e1,\n        scientific: false\n      },\n      hecto: {\n        name: 'hecto',\n        value: 1e2,\n        scientific: false\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      },\n      deci: {\n        name: 'deci',\n        value: 1e-1,\n        scientific: false\n      },\n      centi: {\n        name: 'centi',\n        value: 1e-2,\n        scientific: false\n      },\n      milli: {\n        name: 'milli',\n        value: 1e-3,\n        scientific: true\n      },\n      micro: {\n        name: 'micro',\n        value: 1e-6,\n        scientific: true\n      },\n      nano: {\n        name: 'nano',\n        value: 1e-9,\n        scientific: true\n      },\n      pico: {\n        name: 'pico',\n        value: 1e-12,\n        scientific: true\n      },\n      femto: {\n        name: 'femto',\n        value: 1e-15,\n        scientific: true\n      },\n      atto: {\n        name: 'atto',\n        value: 1e-18,\n        scientific: true\n      },\n      zepto: {\n        name: 'zepto',\n        value: 1e-21,\n        scientific: true\n      },\n      yocto: {\n        name: 'yocto',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    SQUARED: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e2,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e4,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e6,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e12,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e18,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e24,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e30,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e36,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e42,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e48,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-2,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-4,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-6,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-12,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-18,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-24,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-30,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-36,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-42,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-48,\n        scientific: true\n      }\n    },\n    CUBIC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e3,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e6,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e9,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e18,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e27,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e36,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e45,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e54,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e63,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e72,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-3,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-6,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-9,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-18,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-27,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-36,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-45,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-54,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-63,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-72,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      Ki: {\n        name: 'Ki',\n        value: 1024,\n        scientific: true\n      },\n      Mi: {\n        name: 'Mi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      Gi: {\n        name: 'Gi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      Ti: {\n        name: 'Ti',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      Pi: {\n        name: 'Pi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      Ei: {\n        name: 'Ei',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      Zi: {\n        name: 'Zi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      Yi: {\n        name: 'Yi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BINARY_LONG_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_LONG_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kibi: {\n        name: 'kibi',\n        value: 1024,\n        scientific: true\n      },\n      mebi: {\n        name: 'mebi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      gibi: {\n        name: 'gibi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      tebi: {\n        name: 'tebi',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      pebi: {\n        name: 'pebi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      exi: {\n        name: 'exi',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      zebi: {\n        name: 'zebi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      yobi: {\n        name: 'yobi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BTU: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      MM: {\n        name: 'MM',\n        value: 1e6,\n        scientific: true\n      }\n    }\n  };\n  PREFIXES.SHORTLONG = _extends({}, PREFIXES.SHORT, PREFIXES.LONG);\n  PREFIXES.BINARY_SHORT = _extends({}, PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);\n  PREFIXES.BINARY_LONG = _extends({}, PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);\n  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:\n   * Index  Dimension\n   * -----  ---------\n   *   0    Length\n   *   1    Mass\n   *   2    Time\n   *   3    Current\n   *   4    Temperature\n   *   5    Luminous intensity\n   *   6    Amount of substance\n   *   7    Angle\n   *   8    Bit (digital)\n   * For example, the unit \"298.15 K\" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit \"1 cal / (gm °C)\" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].\n   *\n   */\n\n  var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];\n  var BASE_UNITS = {\n    NONE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    MASS: {\n      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    LENGTH: {\n      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]\n    },\n    TIME: {\n      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]\n    },\n    CURRENT: {\n      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]\n    },\n    TEMPERATURE: {\n      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]\n    },\n    LUMINOUS_INTENSITY: {\n      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]\n    },\n    AMOUNT_OF_SUBSTANCE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]\n    },\n    FORCE: {\n      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    SURFACE: {\n      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]\n    },\n    VOLUME: {\n      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]\n    },\n    ENERGY: {\n      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]\n    },\n    POWER: {\n      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]\n    },\n    PRESSURE: {\n      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CHARGE: {\n      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CAPACITANCE: {\n      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_POTENTIAL: {\n      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_RESISTANCE: {\n      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_INDUCTANCE: {\n      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CONDUCTANCE: {\n      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX: {\n      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX_DENSITY: {\n      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]\n    },\n    FREQUENCY: {\n      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]\n    },\n    ANGLE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]\n    },\n    BIT: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]\n    }\n  };\n\n  for (var key in BASE_UNITS) {\n    if (hasOwnProperty(BASE_UNITS, key)) {\n      BASE_UNITS[key].key = key;\n    }\n  }\n\n  var BASE_UNIT_NONE = {};\n  var UNIT_NONE = {\n    name: '',\n    base: BASE_UNIT_NONE,\n    value: 1,\n    offset: 0,\n    dimensions: BASE_DIMENSIONS.map(x => 0)\n  };\n  var UNITS = {\n    // length\n    meter: {\n      name: 'meter',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    inch: {\n      name: 'inch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    foot: {\n      name: 'foot',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yard: {\n      name: 'yard',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mile: {\n      name: 'mile',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    link: {\n      name: 'link',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rod: {\n      name: 'rod',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.0292,\n      offset: 0\n    },\n    chain: {\n      name: 'chain',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    angstrom: {\n      name: 'angstrom',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1e-10,\n      offset: 0\n    },\n    m: {\n      name: 'm',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    in: {\n      name: 'in',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    ft: {\n      name: 'ft',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yd: {\n      name: 'yd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mi: {\n      name: 'mi',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    li: {\n      name: 'li',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rd: {\n      name: 'rd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.029210,\n      offset: 0\n    },\n    ch: {\n      name: 'ch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    mil: {\n      name: 'mil',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000254,\n      offset: 0\n    },\n    // 1/1000 inch\n    // Surface\n    m2: {\n      name: 'm2',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.SQUARED,\n      value: 1,\n      offset: 0\n    },\n    sqin: {\n      name: 'sqin',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.00064516,\n      offset: 0\n    },\n    // 645.16 mm2\n    sqft: {\n      name: 'sqft',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.09290304,\n      offset: 0\n    },\n    // 0.09290304 m2\n    sqyd: {\n      name: 'sqyd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.83612736,\n      offset: 0\n    },\n    // 0.83612736 m2\n    sqmi: {\n      name: 'sqmi',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 2589988.110336,\n      offset: 0\n    },\n    // 2.589988110336 km2\n    sqrd: {\n      name: 'sqrd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 25.29295,\n      offset: 0\n    },\n    // 25.29295 m2\n    sqch: {\n      name: 'sqch',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 404.6873,\n      offset: 0\n    },\n    // 404.6873 m2\n    sqmil: {\n      name: 'sqmil',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 6.4516e-10,\n      offset: 0\n    },\n    // 6.4516 * 10^-10 m2\n    acre: {\n      name: 'acre',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 4046.86,\n      offset: 0\n    },\n    // 4046.86 m2\n    hectare: {\n      name: 'hectare',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 10000,\n      offset: 0\n    },\n    // 10000 m2\n    // Volume\n    m3: {\n      name: 'm3',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.CUBIC,\n      value: 1,\n      offset: 0\n    },\n    L: {\n      name: 'L',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    l: {\n      name: 'l',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    litre: {\n      name: 'litre',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    cuin: {\n      name: 'cuin',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1.6387064e-5,\n      offset: 0\n    },\n    // 1.6387064e-5 m3\n    cuft: {\n      name: 'cuft',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.028316846592,\n      offset: 0\n    },\n    // 28.316 846 592 L\n    cuyd: {\n      name: 'cuyd',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.764554857984,\n      offset: 0\n    },\n    // 764.554 857 984 L\n    teaspoon: {\n      name: 'teaspoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000005,\n      offset: 0\n    },\n    // 5 mL\n    tablespoon: {\n      name: 'tablespoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000015,\n      offset: 0\n    },\n    // 15 mL\n    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup\n    drop: {\n      name: 'drop',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    gtt: {\n      name: 'gtt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    // Liquid volume\n    minim: {\n      name: 'minim',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00000006161152,\n      offset: 0\n    },\n    // 0.06161152 mL\n    fluiddram: {\n      name: 'fluiddram',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    fluidounce: {\n      name: 'fluidounce',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gill: {\n      name: 'gill',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cc: {\n      name: 'cc',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1e-6,\n      offset: 0\n    },\n    // 1e-6 L\n    cup: {\n      name: 'cup',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pint: {\n      name: 'pint',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    quart: {\n      name: 'quart',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gallon: {\n      name: 'gallon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    beerbarrel: {\n      name: 'beerbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    oilbarrel: {\n      name: 'oilbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    hogshead: {\n      name: 'hogshead',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.2384810,\n      offset: 0\n    },\n    // 238.4810 L\n    // {name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute\n    fldr: {\n      name: 'fldr',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    floz: {\n      name: 'floz',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gi: {\n      name: 'gi',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cp: {\n      name: 'cp',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pt: {\n      name: 'pt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    qt: {\n      name: 'qt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gal: {\n      name: 'gal',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    bbl: {\n      name: 'bbl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    obl: {\n      name: 'obl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    // {name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?\n    // Mass\n    g: {\n      name: 'g',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    gram: {\n      name: 'gram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    ton: {\n      name: 'ton',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 907.18474,\n      offset: 0\n    },\n    t: {\n      name: 't',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 1000,\n      offset: 0\n    },\n    tonne: {\n      name: 'tonne',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 1000,\n      offset: 0\n    },\n    grain: {\n      name: 'grain',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dram: {\n      name: 'dram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    ounce: {\n      name: 'ounce',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    poundmass: {\n      name: 'poundmass',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    hundredweight: {\n      name: 'hundredweight',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    stick: {\n      name: 'stick',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 115e-3,\n      offset: 0\n    },\n    stone: {\n      name: 'stone',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 6.35029318,\n      offset: 0\n    },\n    gr: {\n      name: 'gr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dr: {\n      name: 'dr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    oz: {\n      name: 'oz',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    lbm: {\n      name: 'lbm',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    cwt: {\n      name: 'cwt',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    // Time\n    s: {\n      name: 's',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    min: {\n      name: 'min',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    h: {\n      name: 'h',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    second: {\n      name: 'second',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    sec: {\n      name: 'sec',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    minute: {\n      name: 'minute',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    hour: {\n      name: 'hour',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    day: {\n      name: 'day',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 86400,\n      offset: 0\n    },\n    week: {\n      name: 'week',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 7 * 86400,\n      offset: 0\n    },\n    month: {\n      name: 'month',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 2629800,\n      // 1/12th of Julian year\n      offset: 0\n    },\n    year: {\n      name: 'year',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600,\n      // Julian year\n      offset: 0\n    },\n    decade: {\n      name: 'decade',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 315576000,\n      // Julian decade\n      offset: 0\n    },\n    century: {\n      name: 'century',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3155760000,\n      // Julian century\n      offset: 0\n    },\n    millennium: {\n      name: 'millennium',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600000,\n      // Julian millennium\n      offset: 0\n    },\n    // Frequency\n    hertz: {\n      name: 'Hertz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    Hz: {\n      name: 'Hz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    // Angle\n    rad: {\n      name: 'rad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    radian: {\n      name: 'radian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888\n    deg: {\n      name: 'deg',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    degree: {\n      name: 'degree',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399\n    grad: {\n      name: 'grad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    gradian: {\n      name: 'gradian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793\n    cycle: {\n      name: 'cycle',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795\n    arcsec: {\n      name: 'arcsec',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477\n    arcmin: {\n      name: 'arcmin',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // Electric current\n    A: {\n      name: 'A',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    ampere: {\n      name: 'ampere',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // Temperature\n    // K(C) = °C + 273.15\n    // K(F) = (°F + 459.67) / 1.8\n    // K(R) = °R / 1.8\n    K: {\n      name: 'K',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    degC: {\n      name: 'degC',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 273.15\n    },\n    degF: {\n      name: 'degF',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    degR: {\n      name: 'degR',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 0\n    },\n    kelvin: {\n      name: 'kelvin',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    celsius: {\n      name: 'celsius',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 273.15\n    },\n    fahrenheit: {\n      name: 'fahrenheit',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    rankine: {\n      name: 'rankine',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 0\n    },\n    // amount of substance\n    mol: {\n      name: 'mol',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    mole: {\n      name: 'mole',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // luminous intensity\n    cd: {\n      name: 'cd',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    candela: {\n      name: 'candela',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // TODO: units STERADIAN\n    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // Force\n    N: {\n      name: 'N',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    newton: {\n      name: 'newton',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    dyn: {\n      name: 'dyn',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 0.00001,\n      offset: 0\n    },\n    dyne: {\n      name: 'dyne',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 0.00001,\n      offset: 0\n    },\n    lbf: {\n      name: 'lbf',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    poundforce: {\n      name: 'poundforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    kip: {\n      name: 'kip',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 4448.2216,\n      offset: 0\n    },\n    kilogramforce: {\n      name: 'kilogramforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    // Energy\n    J: {\n      name: 'J',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    joule: {\n      name: 'joule',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    erg: {\n      name: 'erg',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.NONE,\n      value: 1e-7,\n      offset: 0\n    },\n    Wh: {\n      name: 'Wh',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 3600,\n      offset: 0\n    },\n    BTU: {\n      name: 'BTU',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.BTU,\n      value: 1055.05585262,\n      offset: 0\n    },\n    eV: {\n      name: 'eV',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    electronvolt: {\n      name: 'electronvolt',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.LONG,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    // Power\n    W: {\n      name: 'W',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    watt: {\n      name: 'watt',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    hp: {\n      name: 'hp',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.NONE,\n      value: 745.6998715386,\n      offset: 0\n    },\n    // Electrical power units\n    VAR: {\n      name: 'VAR',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: Complex.I,\n      offset: 0\n    },\n    VA: {\n      name: 'VA',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Pressure\n    Pa: {\n      name: 'Pa',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    psi: {\n      name: 'psi',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 6894.75729276459,\n      offset: 0\n    },\n    atm: {\n      name: 'atm',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 101325,\n      offset: 0\n    },\n    bar: {\n      name: 'bar',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORTLONG,\n      value: 100000,\n      offset: 0\n    },\n    torr: {\n      name: 'torr',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmHg: {\n      name: 'mmHg',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmH2O: {\n      name: 'mmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    cmH2O: {\n      name: 'cmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 98.0665,\n      offset: 0\n    },\n    // Electric charge\n    coulomb: {\n      name: 'coulomb',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    C: {\n      name: 'C',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric capacitance\n    farad: {\n      name: 'farad',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    F: {\n      name: 'F',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric potential\n    volt: {\n      name: 'volt',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    V: {\n      name: 'V',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric resistance\n    ohm: {\n      name: 'ohm',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORTLONG,\n      // Both Mohm and megaohm are acceptable\n      value: 1,\n      offset: 0\n    },\n\n    /*\n     * Unicode breaks in browsers if charset is not specified\n    Ω: {\n      name: 'Ω',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    */\n    // Electric inductance\n    henry: {\n      name: 'henry',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    H: {\n      name: 'H',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric conductance\n    siemens: {\n      name: 'siemens',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    S: {\n      name: 'S',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux\n    weber: {\n      name: 'weber',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    Wb: {\n      name: 'Wb',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux density\n    tesla: {\n      name: 'tesla',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    T: {\n      name: 'T',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Binary\n    b: {\n      name: 'b',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 1,\n      offset: 0\n    },\n    bits: {\n      name: 'bits',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 1,\n      offset: 0\n    },\n    B: {\n      name: 'B',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 8,\n      offset: 0\n    },\n    bytes: {\n      name: 'bytes',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 8,\n      offset: 0\n    }\n  }; // aliases (formerly plurals)\n\n  var ALIASES = {\n    meters: 'meter',\n    inches: 'inch',\n    feet: 'foot',\n    yards: 'yard',\n    miles: 'mile',\n    links: 'link',\n    rods: 'rod',\n    chains: 'chain',\n    angstroms: 'angstrom',\n    lt: 'l',\n    litres: 'litre',\n    liter: 'litre',\n    liters: 'litre',\n    teaspoons: 'teaspoon',\n    tablespoons: 'tablespoon',\n    minims: 'minim',\n    fluiddrams: 'fluiddram',\n    fluidounces: 'fluidounce',\n    gills: 'gill',\n    cups: 'cup',\n    pints: 'pint',\n    quarts: 'quart',\n    gallons: 'gallon',\n    beerbarrels: 'beerbarrel',\n    oilbarrels: 'oilbarrel',\n    hogsheads: 'hogshead',\n    gtts: 'gtt',\n    grams: 'gram',\n    tons: 'ton',\n    tonnes: 'tonne',\n    grains: 'grain',\n    drams: 'dram',\n    ounces: 'ounce',\n    poundmasses: 'poundmass',\n    hundredweights: 'hundredweight',\n    sticks: 'stick',\n    lb: 'lbm',\n    lbs: 'lbm',\n    kips: 'kip',\n    kgf: 'kilogramforce',\n    acres: 'acre',\n    hectares: 'hectare',\n    sqfeet: 'sqft',\n    sqyard: 'sqyd',\n    sqmile: 'sqmi',\n    sqmiles: 'sqmi',\n    mmhg: 'mmHg',\n    mmh2o: 'mmH2O',\n    cmh2o: 'cmH2O',\n    seconds: 'second',\n    secs: 'second',\n    minutes: 'minute',\n    mins: 'minute',\n    hours: 'hour',\n    hr: 'hour',\n    hrs: 'hour',\n    days: 'day',\n    weeks: 'week',\n    months: 'month',\n    years: 'year',\n    decades: 'decade',\n    centuries: 'century',\n    millennia: 'millennium',\n    hertz: 'hertz',\n    radians: 'radian',\n    degrees: 'degree',\n    gradians: 'gradian',\n    cycles: 'cycle',\n    arcsecond: 'arcsec',\n    arcseconds: 'arcsec',\n    arcminute: 'arcmin',\n    arcminutes: 'arcmin',\n    BTUs: 'BTU',\n    watts: 'watt',\n    joules: 'joule',\n    amperes: 'ampere',\n    coulombs: 'coulomb',\n    volts: 'volt',\n    ohms: 'ohm',\n    farads: 'farad',\n    webers: 'weber',\n    teslas: 'tesla',\n    electronvolts: 'electronvolt',\n    moles: 'mole',\n    bit: 'bits',\n    byte: 'bytes'\n  };\n  /**\n   * Calculate the values for the angle units.\n   * Value is calculated as number or BigNumber depending on the configuration\n   * @param {{number: 'number' | 'BigNumber'}} config\n   */\n\n  function calculateAngleValues(config) {\n    if (config.number === 'BigNumber') {\n      var pi = createPi(_BigNumber);\n      UNITS.rad.value = new _BigNumber(1);\n      UNITS.deg.value = pi.div(180); // 2 * pi / 360\n\n      UNITS.grad.value = pi.div(200); // 2 * pi / 400\n\n      UNITS.cycle.value = pi.times(2); // 2 * pi\n\n      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600\n\n      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60\n    } else {\n      // number\n      UNITS.rad.value = 1;\n      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360\n\n      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400\n\n      UNITS.cycle.value = Math.PI * 2; // 2 * pi\n\n      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600\n\n      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60\n    } // copy to the full names of the angles\n\n\n    UNITS.radian.value = UNITS.rad.value;\n    UNITS.degree.value = UNITS.deg.value;\n    UNITS.gradian.value = UNITS.grad.value;\n  } // apply the angle values now\n\n\n  calculateAngleValues(config);\n\n  if (on) {\n    // recalculate the values on change of configuration\n    on('config', function (curr, prev) {\n      if (curr.number !== prev.number) {\n        calculateAngleValues(curr);\n      }\n    });\n  }\n  /**\n   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.\n   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).\n   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.\n   */\n\n\n  var UNIT_SYSTEMS = {\n    si: {\n      // Base units\n      NONE: {\n        unit: UNIT_NONE,\n        prefix: PREFIXES.NONE['']\n      },\n      LENGTH: {\n        unit: UNITS.m,\n        prefix: PREFIXES.SHORT['']\n      },\n      MASS: {\n        unit: UNITS.g,\n        prefix: PREFIXES.SHORT.k\n      },\n      TIME: {\n        unit: UNITS.s,\n        prefix: PREFIXES.SHORT['']\n      },\n      CURRENT: {\n        unit: UNITS.A,\n        prefix: PREFIXES.SHORT['']\n      },\n      TEMPERATURE: {\n        unit: UNITS.K,\n        prefix: PREFIXES.SHORT['']\n      },\n      LUMINOUS_INTENSITY: {\n        unit: UNITS.cd,\n        prefix: PREFIXES.SHORT['']\n      },\n      AMOUNT_OF_SUBSTANCE: {\n        unit: UNITS.mol,\n        prefix: PREFIXES.SHORT['']\n      },\n      ANGLE: {\n        unit: UNITS.rad,\n        prefix: PREFIXES.SHORT['']\n      },\n      BIT: {\n        unit: UNITS.bits,\n        prefix: PREFIXES.SHORT['']\n      },\n      // Derived units\n      FORCE: {\n        unit: UNITS.N,\n        prefix: PREFIXES.SHORT['']\n      },\n      ENERGY: {\n        unit: UNITS.J,\n        prefix: PREFIXES.SHORT['']\n      },\n      POWER: {\n        unit: UNITS.W,\n        prefix: PREFIXES.SHORT['']\n      },\n      PRESSURE: {\n        unit: UNITS.Pa,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CHARGE: {\n        unit: UNITS.C,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CAPACITANCE: {\n        unit: UNITS.F,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_POTENTIAL: {\n        unit: UNITS.V,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_RESISTANCE: {\n        unit: UNITS.ohm,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_INDUCTANCE: {\n        unit: UNITS.H,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CONDUCTANCE: {\n        unit: UNITS.S,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX: {\n        unit: UNITS.Wb,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX_DENSITY: {\n        unit: UNITS.T,\n        prefix: PREFIXES.SHORT['']\n      },\n      FREQUENCY: {\n        unit: UNITS.Hz,\n        prefix: PREFIXES.SHORT['']\n      }\n    }\n  }; // Clone to create the other unit systems\n\n  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.cgs.LENGTH = {\n    unit: UNITS.m,\n    prefix: PREFIXES.SHORT.c\n  };\n  UNIT_SYSTEMS.cgs.MASS = {\n    unit: UNITS.g,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.FORCE = {\n    unit: UNITS.dyn,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.ENERGY = {\n    unit: UNITS.erg,\n    prefix: PREFIXES.NONE['']\n  }; // there are wholly 4 unique cgs systems for electricity and magnetism,\n  // so let's not worry about it unless somebody complains\n\n  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.us.LENGTH = {\n    unit: UNITS.ft,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.MASS = {\n    unit: UNITS.lbm,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.TEMPERATURE = {\n    unit: UNITS.degF,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.FORCE = {\n    unit: UNITS.lbf,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.ENERGY = {\n    unit: UNITS.BTU,\n    prefix: PREFIXES.BTU['']\n  };\n  UNIT_SYSTEMS.us.POWER = {\n    unit: UNITS.hp,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.PRESSURE = {\n    unit: UNITS.psi,\n    prefix: PREFIXES.NONE['']\n  }; // Add additional unit systems here.\n  // Choose a unit system to seed the auto unit system.\n\n  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si)); // Set the current unit system\n\n  var currentUnitSystem = UNIT_SYSTEMS.auto;\n  /**\n   * Set a unit system for formatting derived units.\n   * @param {string} [name] The name of the unit system.\n   */\n\n  Unit.setUnitSystem = function (name) {\n    if (hasOwnProperty(UNIT_SYSTEMS, name)) {\n      currentUnitSystem = UNIT_SYSTEMS[name];\n    } else {\n      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));\n    }\n  };\n  /**\n   * Return the current unit system.\n   * @return {string} The current unit system.\n   */\n\n\n  Unit.getUnitSystem = function () {\n    for (var _key in UNIT_SYSTEMS) {\n      if (hasOwnProperty(UNIT_SYSTEMS, _key)) {\n        if (UNIT_SYSTEMS[_key] === currentUnitSystem) {\n          return _key;\n        }\n      }\n    }\n  };\n  /**\n   * Converters to convert from number to an other numeric type like BigNumber\n   * or Fraction\n   */\n\n\n  Unit.typeConverters = {\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(x + ''); // stringify to prevent constructor error\n    },\n    Fraction: function Fraction(x) {\n      return new _Fraction(x);\n    },\n    Complex: function Complex(x) {\n      return x;\n    },\n    number: function number(x) {\n      return x;\n    }\n  };\n  /**\n   * Retrieve the right converter function corresponding with this unit's\n   * value\n   *\n   * @memberof Unit\n   * @return {Function}\n   */\n\n  Unit.prototype._numberConverter = function () {\n    var convert = Unit.typeConverters[this.valueType()];\n\n    if (convert) {\n      return convert;\n    }\n\n    throw new TypeError('Unsupported Unit value type \"' + this.valueType() + '\"');\n  };\n  /**\n   * Retrieve the right convertor function corresponding with the type\n   * of provided exampleValue.\n   *\n   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'\n   *                        In case of an unknown type,\n   * @return {Function}\n   */\n\n\n  Unit._getNumberConverter = function (type) {\n    if (!Unit.typeConverters[type]) {\n      throw new TypeError('Unsupported type \"' + type + '\"');\n    }\n\n    return Unit.typeConverters[type];\n  }; // Add dimensions to each built-in unit\n\n\n  for (var _key2 in UNITS) {\n    if (hasOwnProperty(UNITS, _key2)) {\n      var unit = UNITS[_key2];\n      unit.dimensions = unit.base.dimensions;\n    }\n  } // Create aliases\n\n\n  for (var _name2 in ALIASES) {\n    if (hasOwnProperty(ALIASES, _name2)) {\n      var _unit2 = UNITS[ALIASES[_name2]];\n      var alias = {};\n\n      for (var _key3 in _unit2) {\n        if (hasOwnProperty(_unit2, _key3)) {\n          alias[_key3] = _unit2[_key3];\n        }\n      }\n\n      alias.name = _name2;\n      UNITS[_name2] = alias;\n    }\n  }\n  /**\n   * Checks if a character is a valid latin letter (upper or lower case).\n   * Note that this function can be overridden, for example to allow support of other alphabets.\n   * @param {string} c Tested character\n   */\n\n\n  Unit.isValidAlpha = function isValidAlpha(c) {\n    return /^[a-zA-Z]$/.test(c);\n  };\n\n  function assertUnitNameIsValid(name) {\n    for (var i = 0; i < name.length; i++) {\n      c = name.charAt(i);\n\n      if (i === 0 && !Unit.isValidAlpha(c)) {\n        throw new Error('Invalid unit name (must begin with alpha character): \"' + name + '\"');\n      }\n\n      if (i > 0 && !(Unit.isValidAlpha(c) || isDigit(c))) {\n        throw new Error('Invalid unit name (only alphanumeric characters are allowed): \"' + name + '\"');\n      }\n    }\n  }\n  /**\n   * Wrapper around createUnitSingle.\n   * Example:\n   *  createUnit({\n   *    foo: { },\n   *    bar: {\n   *      definition: 'kg/foo',\n   *      aliases: ['ba', 'barr', 'bars'],\n   *      offset: 200\n   *    },\n   *    baz: '4 bar'\n   *  },\n   *  {\n   *    override: true\n   *  })\n   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.\n   * @param {object} options\n   */\n\n\n  Unit.createUnit = function (obj, options) {\n    if (typeof obj !== 'object') {\n      throw new TypeError(\"createUnit expects first parameter to be of type 'Object'\");\n    } // Remove all units and aliases we are overriding\n\n\n    if (options && options.override) {\n      for (var _key4 in obj) {\n        if (hasOwnProperty(obj, _key4)) {\n          Unit.deleteUnit(_key4);\n        }\n\n        if (obj[_key4].aliases) {\n          for (var i = 0; i < obj[_key4].aliases.length; i++) {\n            Unit.deleteUnit(obj[_key4].aliases[i]);\n          }\n        }\n      }\n    } // TODO: traverse multiple times until all units have been added\n\n\n    var lastUnit;\n\n    for (var _key5 in obj) {\n      if (hasOwnProperty(obj, _key5)) {\n        lastUnit = Unit.createUnitSingle(_key5, obj[_key5]);\n      }\n    }\n\n    return lastUnit;\n  };\n  /**\n   * Create a user-defined unit and register it with the Unit type.\n   * Example:\n   *  createUnitSingle('knot', '0.514444444 m/s')\n   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))\n   *\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n   * @param {string, Unit, Object} definition      Definition of the unit in terms\n   * of existing units. For example, '0.514444444 m / s'. Can be a Unit, a string,\n   * or an Object. If an Object, may have the following properties:\n   *   - definition {string|Unit} The definition of this unit.\n   *   - prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\".\n   *     The default is \"none\".\n   *   - aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\n   *   - offset {Numeric} An offset to apply when converting from the unit. For\n   *     example, the offset for celsius is 273.15 and the offset for farhenheit\n   *     is 459.67. Default is 0.\n   *   - baseName {string} If the unit's dimension does not match that of any other\n   *     base unit, the name of the newly create base unit. Otherwise, this property\n   *     has no effect.\n   *\n   * @param {Object} options   (optional) An object containing any of the following\n   * properties:\n   *   - override {boolean} Whether this unit should be allowed to override existing\n   *     units.\n   *\n   * @return {Unit}\n   */\n\n\n  Unit.createUnitSingle = function (name, obj, options) {\n    if (typeof obj === 'undefined' || obj === null) {\n      obj = {};\n    }\n\n    if (typeof name !== 'string') {\n      throw new TypeError(\"createUnitSingle expects first parameter to be of type 'string'\");\n    } // Check collisions with existing units\n\n\n    if (hasOwnProperty(UNITS, name)) {\n      throw new Error('Cannot create unit \"' + name + '\": a unit with that name already exists');\n    } // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.\n\n\n    assertUnitNameIsValid(name);\n    var defUnit = null; // The Unit from which the new unit will be created.\n\n    var aliases = [];\n    var offset = 0;\n    var definition;\n    var prefixes;\n    var baseName;\n\n    if (obj && obj.type === 'Unit') {\n      defUnit = obj.clone();\n    } else if (typeof obj === 'string') {\n      if (obj !== '') {\n        definition = obj;\n      }\n    } else if (typeof obj === 'object') {\n      definition = obj.definition;\n      prefixes = obj.prefixes;\n      offset = obj.offset;\n      baseName = obj.baseName;\n\n      if (obj.aliases) {\n        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array\n      }\n    } else {\n      throw new TypeError('Cannot create unit \"' + name + '\" from \"' + obj.toString() + '\": expecting \"string\" or \"Unit\" or \"Object\"');\n    }\n\n    if (aliases) {\n      for (var i = 0; i < aliases.length; i++) {\n        if (hasOwnProperty(UNITS, aliases[i])) {\n          throw new Error('Cannot create alias \"' + aliases[i] + '\": a unit with that name already exists');\n        }\n      }\n    }\n\n    if (definition && typeof definition === 'string' && !defUnit) {\n      try {\n        defUnit = Unit.parse(definition, {\n          allowNoUnits: true\n        });\n      } catch (ex) {\n        ex.message = 'Could not create unit \"' + name + '\" from \"' + definition + '\": ' + ex.message;\n        throw ex;\n      }\n    } else if (definition && definition.type === 'Unit') {\n      defUnit = definition.clone();\n    }\n\n    aliases = aliases || [];\n    offset = offset || 0;\n\n    if (prefixes && prefixes.toUpperCase) {\n      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;\n    } else {\n      prefixes = PREFIXES.NONE;\n    } // If defUnit is null, it is because the user did not\n    // specify a defintion. So create a new base dimension.\n\n\n    var newUnit = {};\n\n    if (!defUnit) {\n      // Add a new base dimension\n      baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n\n      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {\n        throw new Error('Cannot create new base unit \"' + name + '\": a base unit with that name already exists (and cannot be overridden)');\n      }\n\n      BASE_DIMENSIONS.push(baseName); // Push 0 onto existing base units\n\n      for (var b in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, b)) {\n          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;\n        }\n      } // Add the new base unit\n\n\n      var newBaseUnit = {\n        dimensions: []\n      };\n\n      for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {\n        newBaseUnit.dimensions[_i6] = 0;\n      }\n\n      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;\n      newBaseUnit.key = baseName;\n      BASE_UNITS[baseName] = newBaseUnit;\n      newUnit = {\n        name,\n        value: 1,\n        dimensions: BASE_UNITS[baseName].dimensions.slice(0),\n        prefixes,\n        offset,\n        base: BASE_UNITS[baseName]\n      };\n      currentUnitSystem[baseName] = {\n        unit: newUnit,\n        prefix: PREFIXES.NONE['']\n      };\n    } else {\n      newUnit = {\n        name,\n        value: defUnit.value,\n        dimensions: defUnit.dimensions.slice(0),\n        prefixes,\n        offset\n      }; // Create a new base if no matching base exists\n\n      var anyMatch = false;\n\n      for (var _i7 in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, _i7)) {\n          var match = true;\n\n          for (var j = 0; j < BASE_DIMENSIONS.length; j++) {\n            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {\n              match = false;\n              break;\n            }\n          }\n\n          if (match) {\n            anyMatch = true;\n            newUnit.base = BASE_UNITS[_i7];\n            break;\n          }\n        }\n      }\n\n      if (!anyMatch) {\n        baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n        // Add the new base unit\n\n        var _newBaseUnit = {\n          dimensions: defUnit.dimensions.slice(0)\n        };\n        _newBaseUnit.key = baseName;\n        BASE_UNITS[baseName] = _newBaseUnit;\n        currentUnitSystem[baseName] = {\n          unit: newUnit,\n          prefix: PREFIXES.NONE['']\n        };\n        newUnit.base = BASE_UNITS[baseName];\n      }\n    }\n\n    Unit.UNITS[name] = newUnit;\n\n    for (var _i8 = 0; _i8 < aliases.length; _i8++) {\n      var aliasName = aliases[_i8];\n      var _alias = {};\n\n      for (var _key6 in newUnit) {\n        if (hasOwnProperty(newUnit, _key6)) {\n          _alias[_key6] = newUnit[_key6];\n        }\n      }\n\n      _alias.name = aliasName;\n      Unit.UNITS[aliasName] = _alias;\n    } // delete the memoization cache, since adding a new unit to the array\n    // invalidates all old results\n\n\n    delete _findUnit.cache;\n    return new Unit(null, name);\n  };\n\n  Unit.deleteUnit = function (name) {\n    delete Unit.UNITS[name];\n  }; // expose arrays with prefixes, dimensions, units, systems\n\n\n  Unit.PREFIXES = PREFIXES;\n  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;\n  Unit.BASE_UNITS = BASE_UNITS;\n  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;\n  Unit.UNITS = UNITS;\n  return Unit;\n}, {\n  isClass: true\n});","import { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nvar name = 'dot';\nvar dependencies = ['typed', 'addScalar', 'multiplyScalar', 'conj', 'size'];\nexport var createDot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    addScalar,\n    multiplyScalar,\n    conj,\n    size\n  } = _ref;\n\n  /**\n   * Calculate the dot product of two vectors. The dot product of\n   * `A = [a1, a2, ..., an]` and `B = [b1, b2, ..., bn]` is defined as:\n   *\n   *    dot(A, B) = conj(a1) * b1 + conj(a2) * b2 + ... + conj(an) * bn\n   *\n   * Syntax:\n   *\n   *    math.dot(x, y)\n   *\n   * Examples:\n   *\n   *    math.dot([2, 4, 1], [2, 2, 3])       // returns number 15\n   *    math.multiply([2, 4, 1], [2, 2, 3])  // returns number 15\n   *\n   * See also:\n   *\n   *    multiply, cross\n   *\n   * @param  {Array | Matrix} x     First vector\n   * @param  {Array | Matrix} y     Second vector\n   * @return {number}               Returns the dot product of `x` and `y`\n   */\n  return typed(name, {\n    'Array | DenseMatrix, Array | DenseMatrix': _denseDot,\n    'SparseMatrix, SparseMatrix': _sparseDot\n  });\n\n  function _validateDim(x, y) {\n    var xSize = _size(x);\n\n    var ySize = _size(y);\n\n    var xLen, yLen;\n\n    if (xSize.length === 1) {\n      xLen = xSize[0];\n    } else if (xSize.length === 2 && xSize[1] === 1) {\n      xLen = xSize[0];\n    } else {\n      throw new RangeError('Expected a column vector, instead got a matrix of size (' + xSize.join(', ') + ')');\n    }\n\n    if (ySize.length === 1) {\n      yLen = ySize[0];\n    } else if (ySize.length === 2 && ySize[1] === 1) {\n      yLen = ySize[0];\n    } else {\n      throw new RangeError('Expected a column vector, instead got a matrix of size (' + ySize.join(', ') + ')');\n    }\n\n    if (xLen !== yLen) throw new RangeError('Vectors must have equal length (' + xLen + ' != ' + yLen + ')');\n    if (xLen === 0) throw new RangeError('Cannot calculate the dot product of empty vectors');\n    return xLen;\n  }\n\n  function _denseDot(a, b) {\n    var N = _validateDim(a, b);\n\n    var adata = isMatrix(a) ? a._data : a;\n    var adt = isMatrix(a) ? a._datatype : undefined;\n    var bdata = isMatrix(b) ? b._data : b;\n    var bdt = isMatrix(b) ? b._datatype : undefined; // are these 2-dimensional column vectors? (as opposed to 1-dimensional vectors)\n\n    var aIsColumn = _size(a).length === 2;\n    var bIsColumn = _size(b).length === 2;\n    var add = addScalar;\n    var mul = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      var dt = adt; // find signatures that matches (dt, dt)\n\n      add = typed.find(addScalar, [dt, dt]);\n      mul = typed.find(multiplyScalar, [dt, dt]);\n    } // both vectors 1-dimensional\n\n\n    if (!aIsColumn && !bIsColumn) {\n      var c = mul(conj(adata[0]), bdata[0]);\n\n      for (var i = 1; i < N; i++) {\n        c = add(c, mul(conj(adata[i]), bdata[i]));\n      }\n\n      return c;\n    } // a is 1-dim, b is column\n\n\n    if (!aIsColumn && bIsColumn) {\n      var _c = mul(conj(adata[0]), bdata[0][0]);\n\n      for (var _i = 1; _i < N; _i++) {\n        _c = add(_c, mul(conj(adata[_i]), bdata[_i][0]));\n      }\n\n      return _c;\n    } // a is column, b is 1-dim\n\n\n    if (aIsColumn && !bIsColumn) {\n      var _c2 = mul(conj(adata[0][0]), bdata[0]);\n\n      for (var _i2 = 1; _i2 < N; _i2++) {\n        _c2 = add(_c2, mul(conj(adata[_i2][0]), bdata[_i2]));\n      }\n\n      return _c2;\n    } // both vectors are column\n\n\n    if (aIsColumn && bIsColumn) {\n      var _c3 = mul(conj(adata[0][0]), bdata[0][0]);\n\n      for (var _i3 = 1; _i3 < N; _i3++) {\n        _c3 = add(_c3, mul(conj(adata[_i3][0]), bdata[_i3][0]));\n      }\n\n      return _c3;\n    }\n  }\n\n  function _sparseDot(x, y) {\n    _validateDim(x, y);\n\n    var xindex = x._index;\n    var xvalues = x._values;\n    var yindex = y._index;\n    var yvalues = y._values; // TODO optimize add & mul using datatype\n\n    var c = 0;\n    var add = addScalar;\n    var mul = multiplyScalar;\n    var i = 0;\n    var j = 0;\n\n    while (i < xindex.length && j < yindex.length) {\n      var I = xindex[i];\n      var J = yindex[j];\n\n      if (I < J) {\n        i++;\n        continue;\n      }\n\n      if (I > J) {\n        j++;\n        continue;\n      }\n\n      if (I === J) {\n        c = add(c, mul(xvalues[i], yvalues[j]));\n        i++;\n        j++;\n      }\n    }\n\n    return c;\n  } // TODO remove this once #1771 is fixed\n\n\n  function _size(x) {\n    return isMatrix(x) ? x.size() : size(x);\n  }\n});","import { isArray, isMatrix } from '../../../utils/is.js';\nimport { factory } from '../../../utils/factory.js';\nimport { createSolveValidation } from './utils/solveValidation.js';\nimport { csIpvec } from '../sparse/csIpvec.js';\nvar name = 'lusolve';\nvar dependencies = ['typed', 'matrix', 'lup', 'slu', 'usolve', 'lsolve', 'DenseMatrix'];\nexport var createLusolve = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    lup,\n    slu,\n    usolve,\n    lsolve,\n    DenseMatrix\n  } = _ref;\n  var solveValidation = createSolveValidation({\n    DenseMatrix\n  });\n  /**\n   * Solves the linear system `A * x = b` where `A` is an [n x n] matrix and `b` is a [n] column vector.\n   *\n   * Syntax:\n   *\n   *    math.lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b\n   *    math.lusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = math.lup(A)\n   *\n   * Examples:\n   *\n   *    const m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]]\n   *\n   *    const x = math.lusolve(m, [-1, -1, -1, -1])        // x = [[-1], [-0.5], [-1/3], [-0.25]]\n   *\n   *    const f = math.lup(m)\n   *    const x1 = math.lusolve(f, [-1, -1, -1, -1])       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]\n   *    const x2 = math.lusolve(f, [1, 2, 1, -1])          // x2 = [[1], [1], [1/3], [-0.25]]\n   *\n   *    const a = [[-2, 3], [2, 1]]\n   *    const b = [11, 9]\n   *    const x = math.lusolve(a, b)  // [[2], [5]]\n   *\n   * See also:\n   *\n   *    lup, slu, lsolve, usolve\n   *\n   * @param {Matrix | Array | Object} A      Invertible Matrix or the Matrix LU decomposition\n   * @param {Matrix | Array} b               Column Vector\n   * @param {number} [order]                 The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix\n   * @param {Number} [threshold]             Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.\n   *\n   * @return {DenseMatrix | Array}           Column vector with the solution to the linear system A * x = b\n   */\n\n  return typed(name, {\n    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {\n      a = matrix(a);\n      var d = lup(a);\n\n      var x = _lusolve(d.L, d.U, d.p, null, b);\n\n      return x.valueOf();\n    },\n    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(a, b) {\n      var d = lup(a);\n      return _lusolve(d.L, d.U, d.p, null, b);\n    },\n    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(a, b) {\n      var d = lup(a);\n      return _lusolve(d.L, d.U, d.p, null, b);\n    },\n    'SparseMatrix, Array | Matrix, number, number': function SparseMatrixArrayMatrixNumberNumber(a, b, order, threshold) {\n      var d = slu(a, order, threshold);\n      return _lusolve(d.L, d.U, d.p, d.q, b);\n    },\n    'Object, Array | Matrix': function ObjectArrayMatrix(d, b) {\n      return _lusolve(d.L, d.U, d.p, d.q, b);\n    }\n  });\n\n  function _toMatrix(a) {\n    if (isMatrix(a)) {\n      return a;\n    }\n\n    if (isArray(a)) {\n      return matrix(a);\n    }\n\n    throw new TypeError('Invalid Matrix LU decomposition');\n  }\n\n  function _lusolve(l, u, p, q, b) {\n    // verify decomposition\n    l = _toMatrix(l);\n    u = _toMatrix(u); // apply row permutations if needed (b is a DenseMatrix)\n\n    if (p) {\n      b = solveValidation(l, b, true);\n      b._data = csIpvec(p, b._data);\n    } // use forward substitution to resolve L * y = b\n\n\n    var y = lsolve(l, b); // use backward substitution to resolve U * x = y\n\n    var x = usolve(u, y); // apply column permutations if needed (x is a DenseMatrix)\n\n    if (q) {\n      x._data = csIpvec(q, x._data);\n    }\n\n    return x;\n  }\n});","import { isMatrix } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { format } from '../../utils/string.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'det';\nvar dependencies = ['typed', 'matrix', 'subtract', 'multiply', 'divideScalar', 'isZero', 'unaryMinus'];\nexport var createDet = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    subtract,\n    multiply,\n    divideScalar,\n    isZero,\n    unaryMinus\n  } = _ref;\n\n  /**\n   * Calculate the determinant of a matrix.\n   *\n   * Syntax:\n   *\n   *    math.det(x)\n   *\n   * Examples:\n   *\n   *    math.det([[1, 2], [3, 4]]) // returns -2\n   *\n   *    const A = [\n   *      [-2, 2, 3],\n   *      [-1, 1, 3],\n   *      [2, 0, -1]\n   *    ]\n   *    math.det(A) // returns 6\n   *\n   * See also:\n   *\n   *    inv\n   *\n   * @param {Array | Matrix} x  A matrix\n   * @return {number} The determinant of `x`\n   */\n  return typed(name, {\n    any: function any(x) {\n      return clone(x);\n    },\n    'Array | Matrix': function det(x) {\n      var size;\n\n      if (isMatrix(x)) {\n        size = x.size();\n      } else if (Array.isArray(x)) {\n        x = matrix(x);\n        size = x.size();\n      } else {\n        // a scalar\n        size = [];\n      }\n\n      switch (size.length) {\n        case 0:\n          // scalar\n          return clone(x);\n\n        case 1:\n          // vector\n          if (size[0] === 1) {\n            return clone(x.valueOf()[0]);\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n          }\n\n        case 2:\n          {\n            // two dimensional array\n            var rows = size[0];\n            var cols = size[1];\n\n            if (rows === cols) {\n              return _det(x.clone().valueOf(), rows, cols);\n            } else {\n              throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n            }\n          }\n\n        default:\n          // multi dimensional array\n          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + format(size) + ')');\n      }\n    }\n  });\n  /**\n   * Calculate the determinant of a matrix\n   * @param {Array[]} matrix  A square, two dimensional matrix\n   * @param {number} rows     Number of rows of the matrix (zero-based)\n   * @param {number} cols     Number of columns of the matrix (zero-based)\n   * @returns {number} det\n   * @private\n   */\n\n  function _det(matrix, rows, cols) {\n    if (rows === 1) {\n      // this is a 1 x 1 matrix\n      return clone(matrix[0][0]);\n    } else if (rows === 2) {\n      // this is a 2 x 2 matrix\n      // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12\n      return subtract(multiply(matrix[0][0], matrix[1][1]), multiply(matrix[1][0], matrix[0][1]));\n    } else {\n      // Bareiss algorithm\n      // this algorithm have same complexity as LUP decomposition (O(n^3))\n      // but it preserve precision of floating point more relative to the LUP decomposition\n      var negated = false;\n      var rowIndices = new Array(rows).fill(0).map((_, i) => i); // matrix index of row i\n\n      for (var k = 0; k < rows; k++) {\n        var k_ = rowIndices[k];\n\n        if (isZero(matrix[k_][k])) {\n          var _k = void 0;\n\n          for (_k = k + 1; _k < rows; _k++) {\n            if (!isZero(matrix[rowIndices[_k]][k])) {\n              k_ = rowIndices[_k];\n              rowIndices[_k] = rowIndices[k];\n              rowIndices[k] = k_;\n              negated = !negated;\n              break;\n            }\n          }\n\n          if (_k === rows) return matrix[k_][k]; // some zero of the type\n        }\n\n        var piv = matrix[k_][k];\n        var piv_ = k === 0 ? 1 : matrix[rowIndices[k - 1]][k - 1];\n\n        for (var i = k + 1; i < rows; i++) {\n          var i_ = rowIndices[i];\n\n          for (var j = k + 1; j < rows; j++) {\n            matrix[i_][j] = divideScalar(subtract(multiply(matrix[i_][j], piv), multiply(matrix[i_][k], matrix[k_][j])), piv_);\n          }\n        }\n      }\n\n      var det = matrix[rowIndices[rows - 1]][rows - 1];\n      return negated ? unaryMinus(det) : det;\n    }\n  }\n});","import { clone } from '../../../utils/object.js';\nexport function createComplexEigs(_ref) {\n  var {\n    addScalar,\n    subtract,\n    flatten,\n    multiply,\n    multiplyScalar,\n    divideScalar,\n    sqrt,\n    abs,\n    bignumber,\n    diag,\n    inv,\n    qr,\n    usolve,\n    usolveAll,\n    equal,\n    complex,\n    larger,\n    smaller,\n    matrixFromColumns,\n    dot\n  } = _ref;\n\n  /**\n   * @param {number[][]} arr the matrix to find eigenvalues of\n   * @param {number} N size of the matrix\n   * @param {number|BigNumber} prec precision, anything lower will be considered zero\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @param {boolean} findVectors should we find eigenvectors?\n   *\n   * @returns {{ values: number[], vectors: number[][] }}\n   */\n  function complexEigs(arr, N, prec, type, findVectors) {\n    if (findVectors === undefined) {\n      findVectors = true;\n    } // TODO check if any row/col are zero except the diagonal\n    // make sure corresponding rows and columns have similar magnitude\n    // important because of numerical stability\n    // MODIFIES arr by side effect!\n\n\n    var R = balance(arr, N, prec, type, findVectors); // R is the row transformation matrix\n    // arr = A' = R A R⁻¹, A is the original matrix\n    // (if findVectors is false, R is undefined)\n    // (And so to return to original matrix: A = R⁻¹ arr R)\n    // TODO if magnitudes of elements vary over many orders,\n    // move greatest elements to the top left corner\n    // using similarity transformations, reduce the matrix\n    // to Hessenberg form (upper triangular plus one subdiagonal row)\n    // updates the transformation matrix R with new row operationsq\n    // MODIFIES arr by side effect!\n\n    reduceToHessenberg(arr, N, prec, type, findVectors, R); // still true that original A = R⁻¹ arr R)\n    // find eigenvalues\n\n    var {\n      values,\n      C\n    } = iterateUntilTriangular(arr, N, prec, type, findVectors); // values is the list of eigenvalues, C is the column\n    // transformation matrix that transforms arr, the hessenberg\n    // matrix, to upper triangular\n    // (So U = C⁻¹ arr C and the relationship between current arr\n    // and original A is unchanged.)\n\n    var vectors;\n\n    if (findVectors) {\n      vectors = findEigenvectors(arr, N, C, R, values, prec, type);\n      vectors = matrixFromColumns(...vectors);\n    }\n\n    return {\n      values,\n      vectors\n    };\n  }\n  /**\n   * @param {number[][]} arr\n   * @param {number} N\n   * @param {number} prec\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {number[][]}\n   */\n\n\n  function balance(arr, N, prec, type, findVectors) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var realzero = big ? bignumber(0) : 0;\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n    var realone = big ? bignumber(1) : 1; // base of the floating-point arithmetic\n\n    var radix = big ? bignumber(10) : 2;\n    var radixSq = multiplyScalar(radix, radix); // the diagonal transformation matrix R\n\n    var Rdiag;\n\n    if (findVectors) {\n      Rdiag = Array(N).fill(one);\n    } // this isn't the only time we loop thru the matrix...\n\n\n    var last = false;\n\n    while (!last) {\n      // ...haha I'm joking! unless...\n      last = true;\n\n      for (var i = 0; i < N; i++) {\n        // compute the taxicab norm of i-th column and row\n        // TODO optimize for complex numbers\n        var colNorm = realzero;\n        var rowNorm = realzero;\n\n        for (var j = 0; j < N; j++) {\n          if (i === j) continue;\n          var c = abs(arr[i][j]); // should be real\n\n          colNorm = addScalar(colNorm, c);\n          rowNorm = addScalar(rowNorm, c);\n        }\n\n        if (!equal(colNorm, 0) && !equal(rowNorm, 0)) {\n          // find integer power closest to balancing the matrix\n          // (we want to scale only by integer powers of radix,\n          // so that we don't lose any precision due to round-off)\n          var f = realone;\n          var _c = colNorm;\n          var rowDivRadix = divideScalar(rowNorm, radix);\n          var rowMulRadix = multiplyScalar(rowNorm, radix);\n\n          while (smaller(_c, rowDivRadix)) {\n            _c = multiplyScalar(_c, radixSq);\n            f = multiplyScalar(f, radix);\n          }\n\n          while (larger(_c, rowMulRadix)) {\n            _c = divideScalar(_c, radixSq);\n            f = divideScalar(f, radix);\n          } // check whether balancing is needed\n          // condition = (c + rowNorm) / f < 0.95 * (colNorm + rowNorm)\n\n\n          var condition = smaller(divideScalar(addScalar(_c, rowNorm), f), multiplyScalar(addScalar(colNorm, rowNorm), 0.95)); // apply balancing similarity transformation\n\n          if (condition) {\n            // we should loop once again to check whether\n            // another rebalancing is needed\n            last = false;\n            var g = divideScalar(1, f);\n\n            for (var _j = 0; _j < N; _j++) {\n              if (i === _j) {\n                continue;\n              }\n\n              arr[i][_j] = multiplyScalar(arr[i][_j], f);\n              arr[_j][i] = multiplyScalar(arr[_j][i], g);\n            } // keep track of transformations\n\n\n            if (findVectors) {\n              Rdiag[i] = multiplyScalar(Rdiag[i], f);\n            }\n          }\n        }\n      }\n    } // return the diagonal row transformation matrix\n\n\n    return diag(Rdiag);\n  }\n  /**\n   * @param {number[][]} arr\n   * @param {number} N\n   * @param {number} prec\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @param {boolean} findVectors\n   * @param {number[][]} R the row transformation matrix that will be modified\n   */\n\n\n  function reduceToHessenberg(arr, N, prec, type, findVectors, R) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n\n    if (big) {\n      prec = bignumber(prec);\n    }\n\n    for (var i = 0; i < N - 2; i++) {\n      // Find the largest subdiag element in the i-th col\n      var maxIndex = 0;\n      var max = zero;\n\n      for (var j = i + 1; j < N; j++) {\n        var el = arr[j][i];\n\n        if (smaller(abs(max), abs(el))) {\n          max = el;\n          maxIndex = j;\n        }\n      } // This col is pivoted, no need to do anything\n\n\n      if (smaller(abs(max), prec)) {\n        continue;\n      }\n\n      if (maxIndex !== i + 1) {\n        // Interchange maxIndex-th and (i+1)-th row\n        var tmp1 = arr[maxIndex];\n        arr[maxIndex] = arr[i + 1];\n        arr[i + 1] = tmp1; // Interchange maxIndex-th and (i+1)-th column\n\n        for (var _j2 = 0; _j2 < N; _j2++) {\n          var tmp2 = arr[_j2][maxIndex];\n          arr[_j2][maxIndex] = arr[_j2][i + 1];\n          arr[_j2][i + 1] = tmp2;\n        } // keep track of transformations\n\n\n        if (findVectors) {\n          var tmp3 = R[maxIndex];\n          R[maxIndex] = R[i + 1];\n          R[i + 1] = tmp3;\n        }\n      } // Reduce following rows and columns\n\n\n      for (var _j3 = i + 2; _j3 < N; _j3++) {\n        var n = divideScalar(arr[_j3][i], max);\n\n        if (n === 0) {\n          continue;\n        } // from j-th row subtract n-times (i+1)th row\n\n\n        for (var k = 0; k < N; k++) {\n          arr[_j3][k] = subtract(arr[_j3][k], multiplyScalar(n, arr[i + 1][k]));\n        } // to (i+1)th column add n-times j-th column\n\n\n        for (var _k = 0; _k < N; _k++) {\n          arr[_k][i + 1] = addScalar(arr[_k][i + 1], multiplyScalar(n, arr[_k][_j3]));\n        } // keep track of transformations\n\n\n        if (findVectors) {\n          for (var _k2 = 0; _k2 < N; _k2++) {\n            R[_j3][_k2] = subtract(R[_j3][_k2], multiplyScalar(n, R[i + 1][_k2]));\n          }\n        }\n      }\n    }\n\n    return R;\n  }\n  /**\n   * @returns {{values: values, C: Matrix}}\n   * @see Press, Wiliams: Numerical recipes in Fortran 77\n   * @see https://en.wikipedia.org/wiki/QR_algorithm\n   */\n\n\n  function iterateUntilTriangular(A, N, prec, type, findVectors) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n\n    if (big) {\n      prec = bignumber(prec);\n    } // The Francis Algorithm\n    // The core idea of this algorithm is that doing successive\n    // A' = Q⁺AQ transformations will eventually converge to block-\n    // upper-triangular with diagonal blocks either 1x1 or 2x2.\n    // The Q here is the one from the QR decomposition, A = QR.\n    // Since the eigenvalues of a block-upper-triangular matrix are\n    // the eigenvalues of its diagonal blocks and we know how to find\n    // eigenvalues of a 2x2 matrix, we know the eigenvalues of A.\n\n\n    var arr = clone(A); // the list of converged eigenvalues\n\n    var lambdas = []; // size of arr, which will get smaller as eigenvalues converge\n\n    var n = N; // the diagonal of the block-diagonal matrix that turns\n    // converged 2x2 matrices into upper triangular matrices\n\n    var Sdiag = []; // N×N matrix describing the overall transformation done during the QR algorithm\n\n    var Qtotal = findVectors ? diag(Array(N).fill(one)) : undefined; // n×n matrix describing the QR transformations done since last convergence\n\n    var Qpartial = findVectors ? diag(Array(n).fill(one)) : undefined; // last eigenvalue converged before this many steps\n\n    var lastConvergenceBefore = 0;\n\n    while (lastConvergenceBefore <= 100) {\n      lastConvergenceBefore += 1; // TODO if the convergence is slow, do something clever\n      // Perform the factorization\n\n      var k = 0; // TODO set close to an eigenvalue\n\n      for (var i = 0; i < n; i++) {\n        arr[i][i] = subtract(arr[i][i], k);\n      } // TODO do an implicit QR transformation\n\n\n      var {\n        Q,\n        R\n      } = qr(arr);\n      arr = multiply(R, Q);\n\n      for (var _i = 0; _i < n; _i++) {\n        arr[_i][_i] = addScalar(arr[_i][_i], k);\n      } // keep track of transformations\n\n\n      if (findVectors) {\n        Qpartial = multiply(Qpartial, Q);\n      } // The rightmost diagonal element converged to an eigenvalue\n\n\n      if (n === 1 || smaller(abs(arr[n - 1][n - 2]), prec)) {\n        lastConvergenceBefore = 0;\n        lambdas.push(arr[n - 1][n - 1]); // keep track of transformations\n\n        if (findVectors) {\n          Sdiag.unshift([[1]]);\n          inflateMatrix(Qpartial, N);\n          Qtotal = multiply(Qtotal, Qpartial);\n\n          if (n > 1) {\n            Qpartial = diag(Array(n - 1).fill(one));\n          }\n        } // reduce the matrix size\n\n\n        n -= 1;\n        arr.pop();\n\n        for (var _i2 = 0; _i2 < n; _i2++) {\n          arr[_i2].pop();\n        } // The rightmost diagonal 2x2 block converged\n\n      } else if (n === 2 || smaller(abs(arr[n - 2][n - 3]), prec)) {\n        lastConvergenceBefore = 0;\n        var ll = eigenvalues2x2(arr[n - 2][n - 2], arr[n - 2][n - 1], arr[n - 1][n - 2], arr[n - 1][n - 1]);\n        lambdas.push(...ll); // keep track of transformations\n\n        if (findVectors) {\n          Sdiag.unshift(jordanBase2x2(arr[n - 2][n - 2], arr[n - 2][n - 1], arr[n - 1][n - 2], arr[n - 1][n - 1], ll[0], ll[1], prec, type));\n          inflateMatrix(Qpartial, N);\n          Qtotal = multiply(Qtotal, Qpartial);\n\n          if (n > 2) {\n            Qpartial = diag(Array(n - 2).fill(one));\n          }\n        } // reduce the matrix size\n\n\n        n -= 2;\n        arr.pop();\n        arr.pop();\n\n        for (var _i3 = 0; _i3 < n; _i3++) {\n          arr[_i3].pop();\n\n          arr[_i3].pop();\n        }\n      }\n\n      if (n === 0) {\n        break;\n      }\n    } // standard sorting\n\n\n    lambdas.sort((a, b) => +subtract(abs(a), abs(b))); // the algorithm didn't converge\n\n    if (lastConvergenceBefore > 100) {\n      var err = Error('The eigenvalues failed to converge. Only found these eigenvalues: ' + lambdas.join(', '));\n      err.values = lambdas;\n      err.vectors = [];\n      throw err;\n    } // combine the overall QR transformation Qtotal with the subsequent\n    // transformation S that turns the diagonal 2x2 blocks to upper triangular\n\n\n    var C = findVectors ? multiply(Qtotal, blockDiag(Sdiag, N)) : undefined;\n    return {\n      values: lambdas,\n      C\n    };\n  }\n  /**\n   * @param {Matrix} A hessenberg-form matrix\n   * @param {number} N size of A\n   * @param {Matrix} C column transformation matrix that turns A into upper triangular\n   * @param {Matrix} R similarity that turns original matrix into A\n   * @param {number[]} values array of eigenvalues of A\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {number[][]} eigenvalues\n   */\n\n\n  function findEigenvectors(A, N, C, R, values, prec, type) {\n    var Cinv = inv(C);\n    var U = multiply(Cinv, A, C);\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1; // turn values into a kind of \"multiset\"\n    // this way it is easier to find eigenvectors\n\n    var uniqueValues = [];\n    var multiplicities = [];\n\n    for (var λ of values) {\n      var i = indexOf(uniqueValues, λ, equal);\n\n      if (i === -1) {\n        uniqueValues.push(λ);\n        multiplicities.push(1);\n      } else {\n        multiplicities[i] += 1;\n      }\n    } // find eigenvectors by solving U − λE = 0\n    // TODO replace with an iterative eigenvector algorithm\n    // (this one might fail for imprecise eigenvalues)\n\n\n    var vectors = [];\n    var len = uniqueValues.length;\n    var b = Array(N).fill(zero);\n    var E = diag(Array(N).fill(one)); // eigenvalues for which usolve failed (due to numerical error)\n\n    var failedLambdas = [];\n\n    var _loop = function _loop(_i4) {\n      var λ = uniqueValues[_i4];\n      var S = subtract(U, multiply(λ, E)); // the characteristic matrix\n\n      var solutions = usolveAll(S, b);\n      solutions.shift(); // ignore the null vector\n      // looks like we missed something, try inverse iteration\n\n      while (solutions.length < multiplicities[_i4]) {\n        var approxVec = inverseIterate(S, N, solutions, prec, type);\n\n        if (approxVec == null) {\n          // no more vectors were found\n          failedLambdas.push(λ);\n          break;\n        }\n\n        solutions.push(approxVec);\n      } // Transform back into original array coordinates\n\n\n      var correction = multiply(inv(R), C);\n      solutions = solutions.map(v => multiply(correction, v));\n      vectors.push(...solutions.map(v => flatten(v)));\n    };\n\n    for (var _i4 = 0; _i4 < len; _i4++) {\n      _loop(_i4);\n    }\n\n    if (failedLambdas.length !== 0) {\n      var err = new Error('Failed to find eigenvectors for the following eigenvalues: ' + failedLambdas.join(', '));\n      err.values = values;\n      err.vectors = vectors;\n      throw err;\n    }\n\n    return vectors;\n  }\n  /**\n   * Compute the eigenvalues of an 2x2 matrix\n   * @return {[number,number]}\n   */\n\n\n  function eigenvalues2x2(a, b, c, d) {\n    // λ± = ½ trA ± ½ √( tr²A - 4 detA )\n    var trA = addScalar(a, d);\n    var detA = subtract(multiplyScalar(a, d), multiplyScalar(b, c));\n    var x = multiplyScalar(trA, 0.5);\n    var y = multiplyScalar(sqrt(subtract(multiplyScalar(trA, trA), multiplyScalar(4, detA))), 0.5);\n    return [addScalar(x, y), subtract(x, y)];\n  }\n  /**\n   * For an 2x2 matrix compute the transformation matrix S,\n   * so that SAS⁻¹ is an upper triangular matrix\n   * @return {[[number,number],[number,number]]}\n   * @see https://math.berkeley.edu/~ogus/old/Math_54-05/webfoils/jordan.pdf\n   * @see http://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n   */\n\n\n  function jordanBase2x2(a, b, c, d, l1, l2, prec, type) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1; // matrix is already upper triangular\n    // return an identity matrix\n\n    if (smaller(abs(c), prec)) {\n      return [[one, zero], [zero, one]];\n    } // matrix is diagonalizable\n    // return its eigenvectors as columns\n\n\n    if (larger(abs(subtract(l1, l2)), prec)) {\n      return [[subtract(l1, d), subtract(l2, d)], [c, c]];\n    } // matrix is not diagonalizable\n    // compute off-diagonal elements of N = A - λI\n    // N₁₂ = 0 ⇒ S = ( N⃗₁, I⃗₁ )\n    // N₁₂ ≠ 0 ⇒ S = ( N⃗₂, I⃗₂ )\n\n\n    var na = subtract(a, l1);\n    var nb = subtract(b, l1);\n    var nc = subtract(c, l1);\n    var nd = subtract(d, l1);\n\n    if (smaller(abs(nb), prec)) {\n      return [[na, one], [nc, zero]];\n    } else {\n      return [[nb, zero], [nd, one]];\n    }\n  }\n  /**\n   * Enlarge the matrix from n×n to N×N, setting the new\n   * elements to 1 on diagonal and 0 elsewhere\n   */\n\n\n  function inflateMatrix(arr, N) {\n    // add columns\n    for (var i = 0; i < arr.length; i++) {\n      arr[i].push(...Array(N - arr[i].length).fill(0));\n    } // add rows\n\n\n    for (var _i5 = arr.length; _i5 < N; _i5++) {\n      arr.push(Array(N).fill(0));\n      arr[_i5][_i5] = 1;\n    }\n\n    return arr;\n  }\n  /**\n   * Create a block-diagonal matrix with the given square matrices on the diagonal\n   * @param {Matrix[] | number[][][]} arr array of matrices to be placed on the diagonal\n   * @param {number} N the size of the resulting matrix\n   */\n\n\n  function blockDiag(arr, N) {\n    var M = [];\n\n    for (var i = 0; i < N; i++) {\n      M[i] = Array(N).fill(0);\n    }\n\n    var I = 0;\n\n    for (var sub of arr) {\n      var n = sub.length;\n\n      for (var _i6 = 0; _i6 < n; _i6++) {\n        for (var j = 0; j < n; j++) {\n          M[I + _i6][I + j] = sub[_i6][j];\n        }\n      }\n\n      I += n;\n    }\n\n    return M;\n  }\n  /**\n   * Finds the index of an element in an array using a custom equality function\n   * @template T\n   * @param {Array<T>} arr array in which to search\n   * @param {T} el the element to find\n   * @param {function(T, T): boolean} fn the equality function, first argument is an element of `arr`, the second is always `el`\n   * @returns {number} the index of `el`, or -1 when it's not in `arr`\n   */\n\n\n  function indexOf(arr, el, fn) {\n    for (var i = 0; i < arr.length; i++) {\n      if (fn(arr[i], el)) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * Provided a near-singular upper-triangular matrix A and a list of vectors,\n   * finds an eigenvector of A with the smallest eigenvalue, which is orthogonal\n   * to each vector in the list\n   * @template T\n   * @param {T[][]} A near-singular square matrix\n   * @param {number} N dimension\n   * @param {T[][]} orthog list of vectors\n   * @param {number} prec epsilon\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @return {T[] | null} eigenvector\n   *\n   * @see Numerical Recipes for Fortran 77 – 11.7 Eigenvalues or Eigenvectors by Inverse Iteration\n   */\n\n\n  function inverseIterate(A, N, orthog, prec, type) {\n    var largeNum = type === 'BigNumber' ? bignumber(1000) : 1000;\n    var b; // the vector\n    // you better choose a random vector before I count to five\n\n    var i = 0;\n\n    while (true) {\n      b = randomOrthogonalVector(N, orthog, type);\n      b = usolve(A, b);\n\n      if (larger(norm(b), largeNum)) {\n        break;\n      }\n\n      if (++i >= 5) {\n        return null;\n      }\n    } // you better converge before I count to ten\n\n\n    i = 0;\n\n    while (true) {\n      var c = usolve(A, b);\n\n      if (smaller(norm(orthogonalComplement(b, [c])), prec)) {\n        break;\n      }\n\n      if (++i >= 10) {\n        return null;\n      }\n\n      b = normalize(c);\n    }\n\n    return b;\n  }\n  /**\n   * Generates a random unit vector of dimension N, orthogonal to each vector in the list\n   * @template T\n   * @param {number} N dimension\n   * @param {T[][]} orthog list of vectors\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {T[]} random vector\n   */\n\n\n  function randomOrthogonalVector(N, orthog, type) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex'; // generate random vector with the correct type\n\n    var v = Array(N).fill(0).map(_ => 2 * Math.random() - 1);\n\n    if (big) {\n      v = v.map(n => bignumber(n));\n    }\n\n    if (cplx) {\n      v = v.map(n => complex(n));\n    } // project to orthogonal complement\n\n\n    v = orthogonalComplement(v, orthog); // normalize\n\n    return normalize(v, type);\n  }\n  /**\n   * Project vector v to the orthogonal complement of an array of vectors\n   */\n\n\n  function orthogonalComplement(v, orthog) {\n    for (var w of orthog) {\n      // v := v − (w, v)/∥w∥² w\n      v = subtract(v, multiply(divideScalar(dot(w, v), dot(w, w)), w));\n    }\n\n    return v;\n  }\n  /**\n   * Calculate the norm of a vector.\n   * We can't use math.norm because factory can't handle circular dependency.\n   * Seriously, I'm really fed up with factory.\n   */\n\n\n  function norm(v) {\n    return abs(sqrt(dot(v, v)));\n  }\n  /**\n   * Normalize a vector\n   * @template T\n   * @param {T[]} v\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {T[]} normalized vec\n   */\n\n\n  function normalize(v, type) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n    return multiply(divideScalar(one, norm(v)), v);\n  }\n\n  return complexEigs;\n}","import { isInteger } from '../../utils/number.js';\nimport { product } from '../../utils/product.js';\nexport function combinationsNumber(n, k) {\n  if (!isInteger(n) || n < 0) {\n    throw new TypeError('Positive integer value expected in function combinations');\n  }\n\n  if (!isInteger(k) || k < 0) {\n    throw new TypeError('Positive integer value expected in function combinations');\n  }\n\n  if (k > n) {\n    throw new TypeError('k must be less than or equal to n');\n  }\n\n  var nMinusk = n - k;\n  var answer = 1;\n  var firstnumerator = k < nMinusk ? nMinusk + 1 : k + 1;\n  var nextdivisor = 2;\n  var lastdivisor = k < nMinusk ? k : nMinusk; // balance multiplications and divisions to try to keep intermediate values\n  // in exact-integer range as long as possible\n\n  for (var nextnumerator = firstnumerator; nextnumerator <= n; ++nextnumerator) {\n    answer *= nextnumerator;\n\n    while (nextdivisor <= lastdivisor && answer % nextdivisor === 0) {\n      answer /= nextdivisor;\n      ++nextdivisor;\n    }\n  } // for big n, k, floating point may have caused weirdness in remainder\n\n\n  if (nextdivisor <= lastdivisor) {\n    answer /= product(nextdivisor, lastdivisor);\n  }\n\n  return answer;\n}\ncombinationsNumber.signature = 'number, number';","// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n\n// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\nvar alea = require('./lib/alea');\n\n// xor128, a pure xor-shift generator by George Marsaglia.\n// Period: 2^128-1.\n// Reported to fail: MatrixRank and LinearComp.\nvar xor128 = require('./lib/xor128');\n\n// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.\n// Period: 2^192-2^32\n// Reported to fail: CollisionOver, SimpPoker, and LinearComp.\nvar xorwow = require('./lib/xorwow');\n\n// xorshift7, by François Panneton and Pierre L'ecuyer, takes\n// a different approach: it adds robustness by allowing more shifts\n// than Marsaglia's original three.  It is a 7-shift generator\n// with 256 bits, that passes BigCrush with no systmatic failures.\n// Period 2^256-1.\n// No systematic BigCrush failures reported.\nvar xorshift7 = require('./lib/xorshift7');\n\n// xor4096, by Richard Brent, is a 4096-bit xor-shift with a\n// very long period that also adds a Weyl generator. It also passes\n// BigCrush with no systematic failures.  Its long period may\n// be useful if you have many generators and need to avoid\n// collisions.\n// Period: 2^4128-2^32.\n// No systematic BigCrush failures reported.\nvar xor4096 = require('./lib/xor4096');\n\n// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random\n// number generator derived from ChaCha, a modern stream cipher.\n// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n// Period: ~2^127\n// No systematic BigCrush failures reported.\nvar tychei = require('./lib/tychei');\n\n// The original ARC4-based prng included in this library.\n// Period: ~2^1600\nvar sr = require('./seedrandom');\n\nsr.alea = alea;\nsr.xor128 = xor128;\nsr.xorwow = xorwow;\nsr.xorshift7 = xorshift7;\nsr.xor4096 = xor4096;\nsr.tychei = tychei;\n\nmodule.exports = sr;\n","/*\nCopyright 2019 David Bau.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n(function (global, pool, math) {\n//\n// The following constants are related to IEEE 754 limits.\n//\n\nvar width = 256,        // each RC4 output is 0 <= x < 256\n    chunks = 6,         // at least six RC4 outputs for each double\n    digits = 52,        // there are 52 significant digits in a double\n    rngname = 'random', // rngname: name for Math.random and Math.seedrandom\n    startdenom = math.pow(width, chunks),\n    significance = math.pow(2, digits),\n    overflow = significance * 2,\n    mask = width - 1,\n    nodecrypto;         // node.js crypto module, initialized at the bottom.\n\n//\n// seedrandom()\n// This is the seedrandom function described above.\n//\nfunction seedrandom(seed, options, callback) {\n  var key = [];\n  options = (options == true) ? { entropy: true } : (options || {});\n\n  // Flatten the seed string or build one from local entropy if needed.\n  var shortseed = mixkey(flatten(\n    options.entropy ? [seed, tostring(pool)] :\n    (seed == null) ? autoseed() : seed, 3), key);\n\n  // Use the seed to initialize an ARC4 generator.\n  var arc4 = new ARC4(key);\n\n  // This function returns a random double in [0, 1) that contains\n  // randomness in every bit of the mantissa of the IEEE 754 value.\n  var prng = function() {\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\n        x = 0;                          //   and no 'extra last byte'.\n    while (n < significance) {          // Fill up all significant digits by\n      n = (n + x) * width;              //   shifting numerator and\n      d *= width;                       //   denominator and generating a\n      x = arc4.g(1);                    //   new least-significant-byte.\n    }\n    while (n >= overflow) {             // To avoid rounding up, before adding\n      n /= 2;                           //   last byte, shift everything\n      d /= 2;                           //   right using integer math until\n      x >>>= 1;                         //   we have exactly the desired bits.\n    }\n    return (n + x) / d;                 // Form the number within [0, 1).\n  };\n\n  prng.int32 = function() { return arc4.g(4) | 0; }\n  prng.quick = function() { return arc4.g(4) / 0x100000000; }\n  prng.double = prng;\n\n  // Mix the randomness into accumulated entropy.\n  mixkey(tostring(arc4.S), pool);\n\n  // Calling convention: what to return as a function of prng, seed, is_math.\n  return (options.pass || callback ||\n      function(prng, seed, is_math_call, state) {\n        if (state) {\n          // Load the arc4 state from the given state if it has an S array.\n          if (state.S) { copy(state, arc4); }\n          // Only provide the .state method if requested via options.state.\n          prng.state = function() { return copy(arc4, {}); }\n        }\n\n        // If called as a method of Math (Math.seedrandom()), mutate\n        // Math.random because that is how seedrandom.js has worked since v1.0.\n        if (is_math_call) { math[rngname] = prng; return seed; }\n\n        // Otherwise, it is a newer calling convention, so return the\n        // prng directly.\n        else return prng;\n      })(\n  prng,\n  shortseed,\n  'global' in options ? options.global : (this == math),\n  options.state);\n}\n\n//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\nfunction ARC4(key) {\n  var t, keylen = key.length,\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\n\n  // The empty key [] is treated as [0].\n  if (!keylen) { key = [keylen++]; }\n\n  // Set up S using the standard key scheduling algorithm.\n  while (i < width) {\n    s[i] = i++;\n  }\n  for (i = 0; i < width; i++) {\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\n    s[j] = t;\n  }\n\n  // The \"g\" method returns the next (count) outputs as one number.\n  (me.g = function(count) {\n    // Using instance members instead of closure state nearly doubles speed.\n    var t, r = 0,\n        i = me.i, j = me.j, s = me.S;\n    while (count--) {\n      t = s[i = mask & (i + 1)];\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\n    }\n    me.i = i; me.j = j;\n    return r;\n    // For robust unpredictability, the function call below automatically\n    // discards an initial batch of values.  This is called RC4-drop[256].\n    // See http://google.com/search?q=rsa+fluhrer+response&btnI\n  })(width);\n}\n\n//\n// copy()\n// Copies internal state of ARC4 to or from a plain object.\n//\nfunction copy(f, t) {\n  t.i = f.i;\n  t.j = f.j;\n  t.S = f.S.slice();\n  return t;\n};\n\n//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\nfunction flatten(obj, depth) {\n  var result = [], typ = (typeof obj), prop;\n  if (depth && typ == 'object') {\n    for (prop in obj) {\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\n    }\n  }\n  return (result.length ? result : typ == 'string' ? obj : obj + '\\0');\n}\n\n//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\nfunction mixkey(seed, key) {\n  var stringseed = seed + '', smear, j = 0;\n  while (j < stringseed.length) {\n    key[mask & j] =\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\n  }\n  return tostring(key);\n}\n\n//\n// autoseed()\n// Returns an object for autoseeding, using window.crypto and Node crypto\n// module if available.\n//\nfunction autoseed() {\n  try {\n    var out;\n    if (nodecrypto && (out = nodecrypto.randomBytes)) {\n      // The use of 'out' to remember randomBytes makes tight minified code.\n      out = out(width);\n    } else {\n      out = new Uint8Array(width);\n      (global.crypto || global.msCrypto).getRandomValues(out);\n    }\n    return tostring(out);\n  } catch (e) {\n    var browser = global.navigator,\n        plugins = browser && browser.plugins;\n    return [+new Date, global, plugins, global.screen, tostring(pool)];\n  }\n}\n\n//\n// tostring()\n// Converts an array of charcodes to a string\n//\nfunction tostring(a) {\n  return String.fromCharCode.apply(0, a);\n}\n\n//\n// When seedrandom.js is loaded, we immediately mix a few bits\n// from the built-in RNG into the entropy pool.  Because we do\n// not want to interfere with deterministic PRNG state later,\n// seedrandom will not call math.random on its own again after\n// initialization.\n//\nmixkey(math.random(), pool);\n\n//\n// Nodejs and AMD support: export the implementation as a module using\n// either convention.\n//\nif ((typeof module) == 'object' && module.exports) {\n  module.exports = seedrandom;\n  // When in node.js, try using crypto package for autoseeding.\n  try {\n    nodecrypto = require('crypto');\n  } catch (ex) {}\n} else if ((typeof define) == 'function' && define.amd) {\n  define(function() { return seedrandom; });\n} else {\n  // When included as a plain script, set up Math.seedrandom global.\n  math['seed' + rngname] = seedrandom;\n}\n\n\n// End anonymous scope, and pass initial values.\n})(\n  // global: `self` in browsers (including strict mode and web workers),\n  // otherwise `this` in Node and other environments\n  (typeof self !== 'undefined') ? self : this,\n  [],     // pool: entropy pool starts empty\n  Math    // math: package containing random, pow, and seedrandom\n);\n","import seedrandom from 'seedrandom';\nvar singletonRandom = /* #__PURE__ */seedrandom(Date.now());\nexport function createRng(randomSeed) {\n  var random; // create a new random generator with given seed\n\n  function setSeed(seed) {\n    random = seed === null ? singletonRandom : seedrandom(String(seed));\n  } // initialize a seeded pseudo random number generator with config's random seed\n\n\n  setSeed(randomSeed); // wrapper function so the rng can be updated via generator\n\n  function rng() {\n    return random();\n  }\n\n  return rng;\n}","import { factory } from '../../utils/factory.js'; // Source: https://en.wikipedia.org/wiki/Physical_constant\n// Universal constants\n\nexport var createSpeedOfLight = /* #__PURE__ */unitFactory('speedOfLight', '299792458', 'm s^-1');\nexport var createGravitationConstant = /* #__PURE__ */unitFactory('gravitationConstant', '6.67430e-11', 'm^3 kg^-1 s^-2');\nexport var createPlanckConstant = /* #__PURE__ */unitFactory('planckConstant', '6.62607015e-34', 'J s');\nexport var createReducedPlanckConstant = /* #__PURE__ */unitFactory('reducedPlanckConstant', '1.0545718176461565e-34', 'J s'); // Electromagnetic constants\n\nexport var createMagneticConstant = /* #__PURE__ */unitFactory('magneticConstant', '1.25663706212e-6', 'N A^-2');\nexport var createElectricConstant = /* #__PURE__ */unitFactory('electricConstant', '8.8541878128e-12', 'F m^-1');\nexport var createVacuumImpedance = /* #__PURE__ */unitFactory('vacuumImpedance', '376.730313667', 'ohm');\nexport var createCoulomb = /* #__PURE__ */unitFactory('coulomb', '8.987551792261171e9', 'N m^2 C^-2');\nexport var createElementaryCharge = /* #__PURE__ */unitFactory('elementaryCharge', '1.602176634e-19', 'C');\nexport var createBohrMagneton = /* #__PURE__ */unitFactory('bohrMagneton', '9.2740100783e-24', 'J T^-1');\nexport var createConductanceQuantum = /* #__PURE__ */unitFactory('conductanceQuantum', '7.748091729863649e-5', 'S');\nexport var createInverseConductanceQuantum = /* #__PURE__ */unitFactory('inverseConductanceQuantum', '12906.403729652257', 'ohm');\nexport var createMagneticFluxQuantum = /* #__PURE__ */unitFactory('magneticFluxQuantum', '2.0678338484619295e-15', 'Wb');\nexport var createNuclearMagneton = /* #__PURE__ */unitFactory('nuclearMagneton', '5.0507837461e-27', 'J T^-1');\nexport var createKlitzing = /* #__PURE__ */unitFactory('klitzing', '25812.807459304513', 'ohm');\nexport var createJosephson = /* #__PURE__ */unitFactory('josephson', '4.835978484169836e14 Hz V', 'Hz V^-1'); // TODO: support for Hz needed\n// Atomic and nuclear constants\n\nexport var createBohrRadius = /* #__PURE__ */unitFactory('bohrRadius', '5.29177210903e-11', 'm');\nexport var createClassicalElectronRadius = /* #__PURE__ */unitFactory('classicalElectronRadius', '2.8179403262e-15', 'm');\nexport var createElectronMass = /* #__PURE__ */unitFactory('electronMass', '9.1093837015e-31', 'kg');\nexport var createFermiCoupling = /* #__PURE__ */unitFactory('fermiCoupling', '1.1663787e-5', 'GeV^-2');\nexport var createFineStructure = numberFactory('fineStructure', 7.2973525693e-3);\nexport var createHartreeEnergy = /* #__PURE__ */unitFactory('hartreeEnergy', '4.3597447222071e-18', 'J');\nexport var createProtonMass = /* #__PURE__ */unitFactory('protonMass', '1.67262192369e-27', 'kg');\nexport var createDeuteronMass = /* #__PURE__ */unitFactory('deuteronMass', '3.3435830926e-27', 'kg');\nexport var createNeutronMass = /* #__PURE__ */unitFactory('neutronMass', '1.6749271613e-27', 'kg');\nexport var createQuantumOfCirculation = /* #__PURE__ */unitFactory('quantumOfCirculation', '3.6369475516e-4', 'm^2 s^-1');\nexport var createRydberg = /* #__PURE__ */unitFactory('rydberg', '10973731.568160', 'm^-1');\nexport var createThomsonCrossSection = /* #__PURE__ */unitFactory('thomsonCrossSection', '6.6524587321e-29', 'm^2');\nexport var createWeakMixingAngle = numberFactory('weakMixingAngle', 0.22290);\nexport var createEfimovFactor = numberFactory('efimovFactor', 22.7); // Physico-chemical constants\n\nexport var createAtomicMass = /* #__PURE__ */unitFactory('atomicMass', '1.66053906660e-27', 'kg');\nexport var createAvogadro = /* #__PURE__ */unitFactory('avogadro', '6.02214076e23', 'mol^-1');\nexport var createBoltzmann = /* #__PURE__ */unitFactory('boltzmann', '1.380649e-23', 'J K^-1');\nexport var createFaraday = /* #__PURE__ */unitFactory('faraday', '96485.33212331001', 'C mol^-1');\nexport var createFirstRadiation = /* #__PURE__ */unitFactory('firstRadiation', '3.7417718521927573e-16', 'W m^2'); // export const createSpectralRadiance = /* #__PURE__ */ unitFactory('spectralRadiance', '1.1910429723971881e-16', 'W m^2 sr^-1') // TODO spectralRadiance\n\nexport var createLoschmidt = /* #__PURE__ */unitFactory('loschmidt', '2.686780111798444e25', 'm^-3');\nexport var createGasConstant = /* #__PURE__ */unitFactory('gasConstant', '8.31446261815324', 'J K^-1 mol^-1');\nexport var createMolarPlanckConstant = /* #__PURE__ */unitFactory('molarPlanckConstant', '3.990312712893431e-10', 'J s mol^-1');\nexport var createMolarVolume = /* #__PURE__ */unitFactory('molarVolume', '0.022413969545014137', 'm^3 mol^-1');\nexport var createSackurTetrode = numberFactory('sackurTetrode', -1.16487052358);\nexport var createSecondRadiation = /* #__PURE__ */unitFactory('secondRadiation', '0.014387768775039337', 'm K');\nexport var createStefanBoltzmann = /* #__PURE__ */unitFactory('stefanBoltzmann', '5.67037441918443e-8', 'W m^-2 K^-4');\nexport var createWienDisplacement = /* #__PURE__ */unitFactory('wienDisplacement', '2.897771955e-3', 'm K'); // Adopted values\n\nexport var createMolarMass = /* #__PURE__ */unitFactory('molarMass', '0.99999999965e-3', 'kg mol^-1');\nexport var createMolarMassC12 = /* #__PURE__ */unitFactory('molarMassC12', '11.9999999958e-3', 'kg mol^-1');\nexport var createGravity = /* #__PURE__ */unitFactory('gravity', '9.80665', 'm s^-2'); // atm is defined in Unit.js\n// Natural units\n\nexport var createPlanckLength = /* #__PURE__ */unitFactory('planckLength', '1.616255e-35', 'm');\nexport var createPlanckMass = /* #__PURE__ */unitFactory('planckMass', '2.176435e-8', 'kg');\nexport var createPlanckTime = /* #__PURE__ */unitFactory('planckTime', '5.391245e-44', 's');\nexport var createPlanckCharge = /* #__PURE__ */unitFactory('planckCharge', '1.87554603778e-18', 'C');\nexport var createPlanckTemperature = /* #__PURE__ */unitFactory('planckTemperature', '1.416785e+32', 'K'); // helper function to create a factory function which creates a physical constant,\n// a Unit with either a number value or a BigNumber value depending on the configuration\n\nfunction unitFactory(name, valueStr, unitStr) {\n  var dependencies = ['config', 'Unit', 'BigNumber'];\n  return factory(name, dependencies, _ref => {\n    var {\n      config,\n      Unit,\n      BigNumber\n    } = _ref;\n    // Note that we can parse into number or BigNumber.\n    // We do not parse into Fractions as that doesn't make sense: we would lose precision of the values\n    // Therefore we dont use Unit.parse()\n    var value = config.number === 'BigNumber' ? new BigNumber(valueStr) : parseFloat(valueStr);\n    var unit = new Unit(value, unitStr);\n    unit.fixPrefix = true;\n    return unit;\n  });\n} // helper function to create a factory function which creates a numeric constant,\n// either a number or BigNumber depending on the configuration\n\n\nfunction numberFactory(name, value) {\n  var dependencies = ['config', 'BigNumber'];\n  return factory(name, dependencies, _ref2 => {\n    var {\n      config,\n      BigNumber\n    } = _ref2;\n    return config.number === 'BigNumber' ? new BigNumber(value) : value;\n  });\n}","/**\n * THIS FILE IS AUTO-GENERATED\n * DON'T MAKE CHANGES HERE\n */\nimport { config } from './configReadonly.js';\nimport { createBigNumberClass, createComplexClass, createE, createFalse, createFineStructure, createFractionClass, createI, createInfinity, createLN10, createLOG10E, createMatrixClass, createNaN, createNull, createPhi, createRangeClass, createResultSet, createSQRT1_2, // eslint-disable-line camelcase\ncreateSackurTetrode, createTau, createTrue, createVersion, createDenseMatrixClass, createEfimovFactor, createLN2, createPi, createReplacer, createSQRT2, createTyped, createUnaryPlus, createWeakMixingAngle, createAbs, createAcos, createAcot, createAcsc, createAddScalar, createArg, createAsech, createAsinh, createAtan, createAtanh, createBignumber, createBitNot, createBoolean, createClone, createCombinations, createComplex, createConj, createCosh, createCoth, createCsc, createCube, createEqualScalar, createErf, createExp, createExpm1, createFilter, createForEach, createFormat, createGetMatrixDataType, createHex, createIm, createIsInteger, createIsNegative, createIsPositive, createIsZero, createLOG2E, createLgamma, createLog10, createLog2, createMap, createMultiplyScalar, createNot, createNumber, createOct, createPickRandom, createPrint, createRandom, createRe, createSec, createSign, createSin, createSparseMatrixClass, createSplitUnit, createSquare, createString, createTan, createTypeOf, createAcosh, createAcsch, createApply, createAsec, createBin, createCombinationsWithRep, createCos, createCsch, createIsNaN, createIsPrime, createRandomInt, createSech, createSinh, createSparse, createSqrt, createTanh, createUnaryMinus, createAcoth, createCot, createFraction, createIsNumeric, createMatrix, createMatrixFromFunction, createMod, createNthRoot, createNumeric, createOr, createProd, createReshape, createSize, createSmaller, createSqueeze, createSubset, createSubtract, createTo, createTranspose, createXgcd, createZeros, createAnd, createBitAnd, createBitXor, createCbrt, createCompare, createCompareText, createConcat, createCount, createCtranspose, createDiag, createDivideScalar, createDotDivide, createEqual, createFft, createFlatten, createGcd, createHasNumericValue, createHypot, createIfft, createKron, createLargerEq, createLeftShift, createLsolve, createMatrixFromColumns, createMin, createMode, createNthRoots, createOnes, createPartitionSelect, createResize, createRightArithShift, createRound, createSmallerEq, createUnequal, createUsolve, createXor, createAdd, createAtan2, createBitOr, createCatalan, createCompareNatural, createCumSum, createDeepEqual, createDiff, createDot, createEqualText, createFloor, createIdentity, createInvmod, createLarger, createLog, createLsolveAll, createMatrixFromRows, createMultiply, createQr, createRange, createRightLogShift, createSetSize, createSlu, createSum, createTrace, createUsolveAll, createAsin, createCeil, createComposition, createCross, createDet, createDistance, createDotMultiply, createFibonacciHeapClass, createFix, createImmutableDenseMatrixClass, createIndexClass, createIntersect, createLcm, createLog1p, createMax, createQuantileSeq, createRow, createSetCartesian, createSetDistinct, createSetIsSubset, createSetPowerset, createSort, createColumn, createIndex, createInv, createPinv, createPow, createSetDifference, createSetMultiplicity, createSpaClass, createSqrtm, createUnitClass, createVacuumImpedance, createWienDisplacement, createAtomicMass, createBohrMagneton, createBoltzmann, createConductanceQuantum, createCreateUnit, createDeuteronMass, createDotPow, createElectricConstant, createElementaryCharge, createExpm, createFaraday, createFirstRadiation, createGamma, createGravitationConstant, createHartreeEnergy, createKlitzing, createLoschmidt, createMagneticConstant, createMolarMass, createMolarPlanckConstant, createNeutronMass, createNuclearMagneton, createPlanckCharge, createPlanckLength, createPlanckTemperature, createProtonMass, createReducedPlanckConstant, createRydberg, createSetIntersect, createSpeedOfLight, createStefanBoltzmann, createThomsonCrossSection, createAvogadro, createBohrRadius, createCoulomb, createDivide, createElectronMass, createFactorial, createGravity, createInverseConductanceQuantum, createLup, createMagneticFluxQuantum, createMolarMassC12, createMultinomial, createPermutations, createPlanckMass, createQuantumOfCirculation, createSecondRadiation, createStirlingS2, createUnitFunction, createBellNumbers, createEigs, createFermiCoupling, createMean, createMolarVolume, createPlanckConstant, createSetSymDifference, createVariance, createClassicalElectronRadius, createLusolve, createMedian, createSetUnion, createStd, createGasConstant, createMad, createNorm, createRotationMatrix, createKldivergence, createRotate, createPlanckTime } from '../factoriesAny.js';\nexport var BigNumber = /* #__PURE__ */createBigNumberClass({\n  config\n});\nexport var Complex = /* #__PURE__ */createComplexClass({});\nexport var e = /* #__PURE__ */createE({\n  BigNumber,\n  config\n});\nexport var _false = /* #__PURE__ */createFalse({});\nexport var fineStructure = /* #__PURE__ */createFineStructure({\n  BigNumber,\n  config\n});\nexport var Fraction = /* #__PURE__ */createFractionClass({});\nexport var i = /* #__PURE__ */createI({\n  Complex\n});\nexport var _Infinity = /* #__PURE__ */createInfinity({\n  BigNumber,\n  config\n});\nexport var LN10 = /* #__PURE__ */createLN10({\n  BigNumber,\n  config\n});\nexport var LOG10E = /* #__PURE__ */createLOG10E({\n  BigNumber,\n  config\n});\nexport var Matrix = /* #__PURE__ */createMatrixClass({});\nexport var _NaN = /* #__PURE__ */createNaN({\n  BigNumber,\n  config\n});\nexport var _null = /* #__PURE__ */createNull({});\nexport var phi = /* #__PURE__ */createPhi({\n  BigNumber,\n  config\n});\nexport var Range = /* #__PURE__ */createRangeClass({});\nexport var ResultSet = /* #__PURE__ */createResultSet({});\nexport var SQRT1_2 = /* #__PURE__ */createSQRT1_2({\n  BigNumber,\n  config\n});\nexport var sackurTetrode = /* #__PURE__ */createSackurTetrode({\n  BigNumber,\n  config\n});\nexport var tau = /* #__PURE__ */createTau({\n  BigNumber,\n  config\n});\nexport var _true = /* #__PURE__ */createTrue({});\nexport var version = /* #__PURE__ */createVersion({});\nexport var DenseMatrix = /* #__PURE__ */createDenseMatrixClass({\n  Matrix\n});\nexport var efimovFactor = /* #__PURE__ */createEfimovFactor({\n  BigNumber,\n  config\n});\nexport var LN2 = /* #__PURE__ */createLN2({\n  BigNumber,\n  config\n});\nexport var pi = /* #__PURE__ */createPi({\n  BigNumber,\n  config\n});\nexport var replacer = /* #__PURE__ */createReplacer({});\nexport var SQRT2 = /* #__PURE__ */createSQRT2({\n  BigNumber,\n  config\n});\nexport var typed = /* #__PURE__ */createTyped({\n  BigNumber,\n  Complex,\n  DenseMatrix,\n  Fraction\n});\nexport var unaryPlus = /* #__PURE__ */createUnaryPlus({\n  BigNumber,\n  config,\n  typed\n});\nexport var weakMixingAngle = /* #__PURE__ */createWeakMixingAngle({\n  BigNumber,\n  config\n});\nexport var abs = /* #__PURE__ */createAbs({\n  typed\n});\nexport var acos = /* #__PURE__ */createAcos({\n  Complex,\n  config,\n  typed\n});\nexport var acot = /* #__PURE__ */createAcot({\n  BigNumber,\n  typed\n});\nexport var acsc = /* #__PURE__ */createAcsc({\n  BigNumber,\n  Complex,\n  config,\n  typed\n});\nexport var addScalar = /* #__PURE__ */createAddScalar({\n  typed\n});\nexport var arg = /* #__PURE__ */createArg({\n  typed\n});\nexport var asech = /* #__PURE__ */createAsech({\n  BigNumber,\n  Complex,\n  config,\n  typed\n});\nexport var asinh = /* #__PURE__ */createAsinh({\n  typed\n});\nexport var atan = /* #__PURE__ */createAtan({\n  typed\n});\nexport var atanh = /* #__PURE__ */createAtanh({\n  Complex,\n  config,\n  typed\n});\nexport var bignumber = /* #__PURE__ */createBignumber({\n  BigNumber,\n  typed\n});\nexport var bitNot = /* #__PURE__ */createBitNot({\n  typed\n});\nexport var boolean = /* #__PURE__ */createBoolean({\n  typed\n});\nexport var clone = /* #__PURE__ */createClone({\n  typed\n});\nexport var combinations = /* #__PURE__ */createCombinations({\n  typed\n});\nexport var complex = /* #__PURE__ */createComplex({\n  Complex,\n  typed\n});\nexport var conj = /* #__PURE__ */createConj({\n  typed\n});\nexport var cosh = /* #__PURE__ */createCosh({\n  typed\n});\nexport var coth = /* #__PURE__ */createCoth({\n  BigNumber,\n  typed\n});\nexport var csc = /* #__PURE__ */createCsc({\n  BigNumber,\n  typed\n});\nexport var cube = /* #__PURE__ */createCube({\n  typed\n});\nexport var equalScalar = /* #__PURE__ */createEqualScalar({\n  config,\n  typed\n});\nexport var erf = /* #__PURE__ */createErf({\n  typed\n});\nexport var exp = /* #__PURE__ */createExp({\n  typed\n});\nexport var expm1 = /* #__PURE__ */createExpm1({\n  Complex,\n  typed\n});\nexport var filter = /* #__PURE__ */createFilter({\n  typed\n});\nexport var forEach = /* #__PURE__ */createForEach({\n  typed\n});\nexport var format = /* #__PURE__ */createFormat({\n  typed\n});\nexport var getMatrixDataType = /* #__PURE__ */createGetMatrixDataType({\n  typed\n});\nexport var hex = /* #__PURE__ */createHex({\n  format,\n  typed\n});\nexport var im = /* #__PURE__ */createIm({\n  typed\n});\nexport var isInteger = /* #__PURE__ */createIsInteger({\n  typed\n});\nexport var isNegative = /* #__PURE__ */createIsNegative({\n  typed\n});\nexport var isPositive = /* #__PURE__ */createIsPositive({\n  typed\n});\nexport var isZero = /* #__PURE__ */createIsZero({\n  typed\n});\nexport var LOG2E = /* #__PURE__ */createLOG2E({\n  BigNumber,\n  config\n});\nexport var lgamma = /* #__PURE__ */createLgamma({\n  Complex,\n  typed\n});\nexport var log10 = /* #__PURE__ */createLog10({\n  Complex,\n  config,\n  typed\n});\nexport var log2 = /* #__PURE__ */createLog2({\n  Complex,\n  config,\n  typed\n});\nexport var map = /* #__PURE__ */createMap({\n  typed\n});\nexport var multiplyScalar = /* #__PURE__ */createMultiplyScalar({\n  typed\n});\nexport var not = /* #__PURE__ */createNot({\n  typed\n});\nexport var number = /* #__PURE__ */createNumber({\n  typed\n});\nexport var oct = /* #__PURE__ */createOct({\n  format,\n  typed\n});\nexport var pickRandom = /* #__PURE__ */createPickRandom({\n  config,\n  typed\n});\nexport var print = /* #__PURE__ */createPrint({\n  typed\n});\nexport var random = /* #__PURE__ */createRandom({\n  config,\n  typed\n});\nexport var re = /* #__PURE__ */createRe({\n  typed\n});\nexport var sec = /* #__PURE__ */createSec({\n  BigNumber,\n  typed\n});\nexport var sign = /* #__PURE__ */createSign({\n  BigNumber,\n  Fraction,\n  complex,\n  typed\n});\nexport var sin = /* #__PURE__ */createSin({\n  typed\n});\nexport var SparseMatrix = /* #__PURE__ */createSparseMatrixClass({\n  Matrix,\n  equalScalar,\n  typed\n});\nexport var splitUnit = /* #__PURE__ */createSplitUnit({\n  typed\n});\nexport var square = /* #__PURE__ */createSquare({\n  typed\n});\nexport var string = /* #__PURE__ */createString({\n  typed\n});\nexport var tan = /* #__PURE__ */createTan({\n  typed\n});\nexport var typeOf = /* #__PURE__ */createTypeOf({\n  typed\n});\nexport var acosh = /* #__PURE__ */createAcosh({\n  Complex,\n  config,\n  typed\n});\nexport var acsch = /* #__PURE__ */createAcsch({\n  BigNumber,\n  typed\n});\nexport var apply = /* #__PURE__ */createApply({\n  isInteger,\n  typed\n});\nexport var asec = /* #__PURE__ */createAsec({\n  BigNumber,\n  Complex,\n  config,\n  typed\n});\nexport var bin = /* #__PURE__ */createBin({\n  format,\n  typed\n});\nexport var combinationsWithRep = /* #__PURE__ */createCombinationsWithRep({\n  typed\n});\nexport var cos = /* #__PURE__ */createCos({\n  typed\n});\nexport var csch = /* #__PURE__ */createCsch({\n  BigNumber,\n  typed\n});\nexport var isNaN = /* #__PURE__ */createIsNaN({\n  typed\n});\nexport var isPrime = /* #__PURE__ */createIsPrime({\n  typed\n});\nexport var randomInt = /* #__PURE__ */createRandomInt({\n  config,\n  typed\n});\nexport var sech = /* #__PURE__ */createSech({\n  BigNumber,\n  typed\n});\nexport var sinh = /* #__PURE__ */createSinh({\n  typed\n});\nexport var sparse = /* #__PURE__ */createSparse({\n  SparseMatrix,\n  typed\n});\nexport var sqrt = /* #__PURE__ */createSqrt({\n  Complex,\n  config,\n  typed\n});\nexport var tanh = /* #__PURE__ */createTanh({\n  typed\n});\nexport var unaryMinus = /* #__PURE__ */createUnaryMinus({\n  typed\n});\nexport var acoth = /* #__PURE__ */createAcoth({\n  BigNumber,\n  Complex,\n  config,\n  typed\n});\nexport var cot = /* #__PURE__ */createCot({\n  BigNumber,\n  typed\n});\nexport var fraction = /* #__PURE__ */createFraction({\n  Fraction,\n  typed\n});\nexport var isNumeric = /* #__PURE__ */createIsNumeric({\n  typed\n});\nexport var matrix = /* #__PURE__ */createMatrix({\n  DenseMatrix,\n  Matrix,\n  SparseMatrix,\n  typed\n});\nexport var matrixFromFunction = /* #__PURE__ */createMatrixFromFunction({\n  isZero,\n  matrix,\n  typed\n});\nexport var mod = /* #__PURE__ */createMod({\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var nthRoot = /* #__PURE__ */createNthRoot({\n  BigNumber,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var numeric = /* #__PURE__ */createNumeric({\n  bignumber,\n  fraction,\n  number\n});\nexport var or = /* #__PURE__ */createOr({\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var prod = /* #__PURE__ */createProd({\n  config,\n  multiplyScalar,\n  numeric,\n  typed\n});\nexport var reshape = /* #__PURE__ */createReshape({\n  isInteger,\n  matrix,\n  typed\n});\nexport var size = /* #__PURE__ */createSize({\n  matrix,\n  config,\n  typed\n});\nexport var smaller = /* #__PURE__ */createSmaller({\n  DenseMatrix,\n  config,\n  matrix,\n  typed\n});\nexport var squeeze = /* #__PURE__ */createSqueeze({\n  matrix,\n  typed\n});\nexport var subset = /* #__PURE__ */createSubset({\n  matrix,\n  typed\n});\nexport var subtract = /* #__PURE__ */createSubtract({\n  DenseMatrix,\n  addScalar,\n  equalScalar,\n  matrix,\n  typed,\n  unaryMinus\n});\nexport var to = /* #__PURE__ */createTo({\n  matrix,\n  typed\n});\nexport var transpose = /* #__PURE__ */createTranspose({\n  matrix,\n  typed\n});\nexport var xgcd = /* #__PURE__ */createXgcd({\n  BigNumber,\n  config,\n  matrix,\n  typed\n});\nexport var zeros = /* #__PURE__ */createZeros({\n  BigNumber,\n  config,\n  matrix,\n  typed\n});\nexport var and = /* #__PURE__ */createAnd({\n  equalScalar,\n  matrix,\n  not,\n  typed,\n  zeros\n});\nexport var bitAnd = /* #__PURE__ */createBitAnd({\n  equalScalar,\n  matrix,\n  typed\n});\nexport var bitXor = /* #__PURE__ */createBitXor({\n  DenseMatrix,\n  matrix,\n  typed\n});\nexport var cbrt = /* #__PURE__ */createCbrt({\n  BigNumber,\n  Complex,\n  Fraction,\n  config,\n  isNegative,\n  matrix,\n  typed,\n  unaryMinus\n});\nexport var compare = /* #__PURE__ */createCompare({\n  BigNumber,\n  DenseMatrix,\n  Fraction,\n  config,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var compareText = /* #__PURE__ */createCompareText({\n  matrix,\n  typed\n});\nexport var concat = /* #__PURE__ */createConcat({\n  isInteger,\n  matrix,\n  typed\n});\nexport var count = /* #__PURE__ */createCount({\n  prod,\n  size,\n  typed\n});\nexport var ctranspose = /* #__PURE__ */createCtranspose({\n  conj,\n  transpose,\n  typed\n});\nexport var diag = /* #__PURE__ */createDiag({\n  DenseMatrix,\n  SparseMatrix,\n  matrix,\n  typed\n});\nexport var divideScalar = /* #__PURE__ */createDivideScalar({\n  numeric,\n  typed\n});\nexport var dotDivide = /* #__PURE__ */createDotDivide({\n  DenseMatrix,\n  divideScalar,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var equal = /* #__PURE__ */createEqual({\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var fft = /* #__PURE__ */createFft({\n  addScalar,\n  divideScalar,\n  exp,\n  i,\n  matrix,\n  multiplyScalar,\n  tau,\n  typed\n});\nexport var flatten = /* #__PURE__ */createFlatten({\n  matrix,\n  typed\n});\nexport var gcd = /* #__PURE__ */createGcd({\n  BigNumber,\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var hasNumericValue = /* #__PURE__ */createHasNumericValue({\n  isNumeric,\n  typed\n});\nexport var hypot = /* #__PURE__ */createHypot({\n  abs,\n  addScalar,\n  divideScalar,\n  isPositive,\n  multiplyScalar,\n  smaller,\n  sqrt,\n  typed\n});\nexport var ifft = /* #__PURE__ */createIfft({\n  conj,\n  dotDivide,\n  fft,\n  typed\n});\nexport var kron = /* #__PURE__ */createKron({\n  matrix,\n  multiplyScalar,\n  typed\n});\nexport var largerEq = /* #__PURE__ */createLargerEq({\n  DenseMatrix,\n  config,\n  matrix,\n  typed\n});\nexport var leftShift = /* #__PURE__ */createLeftShift({\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed,\n  zeros\n});\nexport var lsolve = /* #__PURE__ */createLsolve({\n  DenseMatrix,\n  divideScalar,\n  equalScalar,\n  matrix,\n  multiplyScalar,\n  subtract,\n  typed\n});\nexport var matrixFromColumns = /* #__PURE__ */createMatrixFromColumns({\n  flatten,\n  matrix,\n  size,\n  typed\n});\nexport var min = /* #__PURE__ */createMin({\n  config,\n  numeric,\n  smaller,\n  typed\n});\nexport var mode = /* #__PURE__ */createMode({\n  isNaN,\n  isNumeric,\n  typed\n});\nexport var nthRoots = /* #__PURE__ */createNthRoots({\n  Complex,\n  config,\n  divideScalar,\n  typed\n});\nexport var ones = /* #__PURE__ */createOnes({\n  BigNumber,\n  config,\n  matrix,\n  typed\n});\nexport var partitionSelect = /* #__PURE__ */createPartitionSelect({\n  compare,\n  isNaN,\n  isNumeric,\n  typed\n});\nexport var resize = /* #__PURE__ */createResize({\n  config,\n  matrix\n});\nexport var rightArithShift = /* #__PURE__ */createRightArithShift({\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed,\n  zeros\n});\nexport var round = /* #__PURE__ */createRound({\n  BigNumber,\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed,\n  zeros\n});\nexport var smallerEq = /* #__PURE__ */createSmallerEq({\n  DenseMatrix,\n  config,\n  matrix,\n  typed\n});\nexport var unequal = /* #__PURE__ */createUnequal({\n  DenseMatrix,\n  config,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var usolve = /* #__PURE__ */createUsolve({\n  DenseMatrix,\n  divideScalar,\n  equalScalar,\n  matrix,\n  multiplyScalar,\n  subtract,\n  typed\n});\nexport var xor = /* #__PURE__ */createXor({\n  DenseMatrix,\n  matrix,\n  typed\n});\nexport var add = /* #__PURE__ */createAdd({\n  DenseMatrix,\n  SparseMatrix,\n  addScalar,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var atan2 = /* #__PURE__ */createAtan2({\n  BigNumber,\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var bitOr = /* #__PURE__ */createBitOr({\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed\n});\nexport var catalan = /* #__PURE__ */createCatalan({\n  addScalar,\n  combinations,\n  divideScalar,\n  isInteger,\n  isNegative,\n  multiplyScalar,\n  typed\n});\nexport var compareNatural = /* #__PURE__ */createCompareNatural({\n  compare,\n  typed\n});\nexport var cumsum = /* #__PURE__ */createCumSum({\n  add,\n  typed,\n  unaryPlus\n});\nexport var deepEqual = /* #__PURE__ */createDeepEqual({\n  equal,\n  typed\n});\nexport var diff = /* #__PURE__ */createDiff({\n  matrix,\n  number,\n  subtract,\n  typed\n});\nexport var dot = /* #__PURE__ */createDot({\n  addScalar,\n  conj,\n  multiplyScalar,\n  size,\n  typed\n});\nexport var equalText = /* #__PURE__ */createEqualText({\n  compareText,\n  isZero,\n  typed\n});\nexport var floor = /* #__PURE__ */createFloor({\n  DenseMatrix,\n  config,\n  equalScalar,\n  matrix,\n  round,\n  typed,\n  zeros\n});\nexport var identity = /* #__PURE__ */createIdentity({\n  BigNumber,\n  DenseMatrix,\n  SparseMatrix,\n  config,\n  matrix,\n  typed\n});\nexport var invmod = /* #__PURE__ */createInvmod({\n  BigNumber,\n  add,\n  config,\n  equal,\n  isInteger,\n  mod,\n  smaller,\n  typed,\n  xgcd\n});\nexport var larger = /* #__PURE__ */createLarger({\n  DenseMatrix,\n  config,\n  matrix,\n  typed\n});\nexport var log = /* #__PURE__ */createLog({\n  Complex,\n  config,\n  divideScalar,\n  typed\n});\nexport var lsolveAll = /* #__PURE__ */createLsolveAll({\n  DenseMatrix,\n  divideScalar,\n  equalScalar,\n  matrix,\n  multiplyScalar,\n  subtract,\n  typed\n});\nexport var matrixFromRows = /* #__PURE__ */createMatrixFromRows({\n  flatten,\n  matrix,\n  size,\n  typed\n});\nexport var multiply = /* #__PURE__ */createMultiply({\n  addScalar,\n  dot,\n  equalScalar,\n  matrix,\n  multiplyScalar,\n  typed\n});\nexport var qr = /* #__PURE__ */createQr({\n  addScalar,\n  complex,\n  conj,\n  divideScalar,\n  equal,\n  identity,\n  isZero,\n  matrix,\n  multiplyScalar,\n  sign,\n  sqrt,\n  subtract,\n  typed,\n  unaryMinus,\n  zeros\n});\nexport var range = /* #__PURE__ */createRange({\n  bignumber,\n  matrix,\n  config,\n  larger,\n  largerEq,\n  smaller,\n  smallerEq,\n  typed\n});\nexport var rightLogShift = /* #__PURE__ */createRightLogShift({\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  typed,\n  zeros\n});\nexport var setSize = /* #__PURE__ */createSetSize({\n  compareNatural,\n  typed\n});\nexport var slu = /* #__PURE__ */createSlu({\n  SparseMatrix,\n  abs,\n  add,\n  divideScalar,\n  larger,\n  largerEq,\n  multiply,\n  subtract,\n  transpose,\n  typed\n});\nexport var sum = /* #__PURE__ */createSum({\n  add,\n  config,\n  numeric,\n  typed\n});\nexport var trace = /* #__PURE__ */createTrace({\n  add,\n  matrix,\n  typed\n});\nexport var usolveAll = /* #__PURE__ */createUsolveAll({\n  DenseMatrix,\n  divideScalar,\n  equalScalar,\n  matrix,\n  multiplyScalar,\n  subtract,\n  typed\n});\nexport var asin = /* #__PURE__ */createAsin({\n  Complex,\n  config,\n  typed\n});\nexport var ceil = /* #__PURE__ */createCeil({\n  DenseMatrix,\n  config,\n  equalScalar,\n  matrix,\n  round,\n  typed,\n  zeros\n});\nexport var composition = /* #__PURE__ */createComposition({\n  addScalar,\n  combinations,\n  isInteger,\n  isNegative,\n  isPositive,\n  larger,\n  typed\n});\nexport var cross = /* #__PURE__ */createCross({\n  matrix,\n  multiply,\n  subtract,\n  typed\n});\nexport var det = /* #__PURE__ */createDet({\n  divideScalar,\n  isZero,\n  matrix,\n  multiply,\n  subtract,\n  typed,\n  unaryMinus\n});\nexport var distance = /* #__PURE__ */createDistance({\n  abs,\n  addScalar,\n  divideScalar,\n  multiplyScalar,\n  sqrt,\n  subtract,\n  typed,\n  unaryMinus\n});\nexport var dotMultiply = /* #__PURE__ */createDotMultiply({\n  equalScalar,\n  matrix,\n  multiplyScalar,\n  typed\n});\nexport var FibonacciHeap = /* #__PURE__ */createFibonacciHeapClass({\n  larger,\n  smaller\n});\nexport var fix = /* #__PURE__ */createFix({\n  Complex,\n  DenseMatrix,\n  ceil,\n  equalScalar,\n  floor,\n  matrix,\n  typed,\n  zeros\n});\nexport var ImmutableDenseMatrix = /* #__PURE__ */createImmutableDenseMatrixClass({\n  DenseMatrix,\n  smaller\n});\nexport var Index = /* #__PURE__ */createIndexClass({\n  ImmutableDenseMatrix\n});\nexport var intersect = /* #__PURE__ */createIntersect({\n  abs,\n  add,\n  addScalar,\n  config,\n  divideScalar,\n  equalScalar,\n  flatten,\n  isNumeric,\n  isZero,\n  matrix,\n  multiply,\n  multiplyScalar,\n  smaller,\n  subtract,\n  typed\n});\nexport var lcm = /* #__PURE__ */createLcm({\n  equalScalar,\n  matrix,\n  typed\n});\nexport var log1p = /* #__PURE__ */createLog1p({\n  Complex,\n  config,\n  divideScalar,\n  log,\n  typed\n});\nexport var max = /* #__PURE__ */createMax({\n  config,\n  larger,\n  numeric,\n  typed\n});\nexport var quantileSeq = /* #__PURE__ */createQuantileSeq({\n  add,\n  compare,\n  multiply,\n  partitionSelect,\n  typed\n});\nexport var row = /* #__PURE__ */createRow({\n  Index,\n  matrix,\n  range,\n  typed\n});\nexport var setCartesian = /* #__PURE__ */createSetCartesian({\n  DenseMatrix,\n  Index,\n  compareNatural,\n  size,\n  subset,\n  typed\n});\nexport var setDistinct = /* #__PURE__ */createSetDistinct({\n  DenseMatrix,\n  Index,\n  compareNatural,\n  size,\n  subset,\n  typed\n});\nexport var setIsSubset = /* #__PURE__ */createSetIsSubset({\n  Index,\n  compareNatural,\n  size,\n  subset,\n  typed\n});\nexport var setPowerset = /* #__PURE__ */createSetPowerset({\n  Index,\n  compareNatural,\n  size,\n  subset,\n  typed\n});\nexport var sort = /* #__PURE__ */createSort({\n  compare,\n  compareNatural,\n  matrix,\n  typed\n});\nexport var column = /* #__PURE__ */createColumn({\n  Index,\n  matrix,\n  range,\n  typed\n});\nexport var index = /* #__PURE__ */createIndex({\n  Index,\n  typed\n});\nexport var inv = /* #__PURE__ */createInv({\n  abs,\n  addScalar,\n  det,\n  divideScalar,\n  identity,\n  matrix,\n  multiply,\n  typed,\n  unaryMinus\n});\nexport var pinv = /* #__PURE__ */createPinv({\n  Complex,\n  add,\n  ctranspose,\n  deepEqual,\n  divideScalar,\n  dot,\n  dotDivide,\n  equal,\n  inv,\n  matrix,\n  multiply,\n  typed\n});\nexport var pow = /* #__PURE__ */createPow({\n  Complex,\n  config,\n  fraction,\n  identity,\n  inv,\n  matrix,\n  multiply,\n  number,\n  typed\n});\nexport var setDifference = /* #__PURE__ */createSetDifference({\n  DenseMatrix,\n  Index,\n  compareNatural,\n  size,\n  subset,\n  typed\n});\nexport var setMultiplicity = /* #__PURE__ */createSetMultiplicity({\n  Index,\n  compareNatural,\n  size,\n  subset,\n  typed\n});\nexport var Spa = /* #__PURE__ */createSpaClass({\n  FibonacciHeap,\n  addScalar,\n  equalScalar\n});\nexport var sqrtm = /* #__PURE__ */createSqrtm({\n  abs,\n  add,\n  identity,\n  inv,\n  map,\n  max,\n  multiply,\n  size,\n  sqrt,\n  subtract,\n  typed\n});\nexport var Unit = /* #__PURE__ */createUnitClass({\n  BigNumber,\n  Complex,\n  Fraction,\n  abs,\n  addScalar,\n  config,\n  divideScalar,\n  equal,\n  fix,\n  format,\n  isNumeric,\n  multiplyScalar,\n  number,\n  pow,\n  round,\n  subtract\n});\nexport var vacuumImpedance = /* #__PURE__ */createVacuumImpedance({\n  BigNumber,\n  Unit,\n  config\n});\nexport var wienDisplacement = /* #__PURE__ */createWienDisplacement({\n  BigNumber,\n  Unit,\n  config\n});\nexport var atomicMass = /* #__PURE__ */createAtomicMass({\n  BigNumber,\n  Unit,\n  config\n});\nexport var bohrMagneton = /* #__PURE__ */createBohrMagneton({\n  BigNumber,\n  Unit,\n  config\n});\nexport var boltzmann = /* #__PURE__ */createBoltzmann({\n  BigNumber,\n  Unit,\n  config\n});\nexport var conductanceQuantum = /* #__PURE__ */createConductanceQuantum({\n  BigNumber,\n  Unit,\n  config\n});\nexport var createUnit = /* #__PURE__ */createCreateUnit({\n  Unit,\n  typed\n});\nexport var deuteronMass = /* #__PURE__ */createDeuteronMass({\n  BigNumber,\n  Unit,\n  config\n});\nexport var dotPow = /* #__PURE__ */createDotPow({\n  DenseMatrix,\n  equalScalar,\n  matrix,\n  pow,\n  typed\n});\nexport var electricConstant = /* #__PURE__ */createElectricConstant({\n  BigNumber,\n  Unit,\n  config\n});\nexport var elementaryCharge = /* #__PURE__ */createElementaryCharge({\n  BigNumber,\n  Unit,\n  config\n});\nexport var expm = /* #__PURE__ */createExpm({\n  abs,\n  add,\n  identity,\n  inv,\n  multiply,\n  typed\n});\nexport var faraday = /* #__PURE__ */createFaraday({\n  BigNumber,\n  Unit,\n  config\n});\nexport var firstRadiation = /* #__PURE__ */createFirstRadiation({\n  BigNumber,\n  Unit,\n  config\n});\nexport var gamma = /* #__PURE__ */createGamma({\n  BigNumber,\n  Complex,\n  config,\n  multiplyScalar,\n  pow,\n  typed\n});\nexport var gravitationConstant = /* #__PURE__ */createGravitationConstant({\n  BigNumber,\n  Unit,\n  config\n});\nexport var hartreeEnergy = /* #__PURE__ */createHartreeEnergy({\n  BigNumber,\n  Unit,\n  config\n});\nexport var klitzing = /* #__PURE__ */createKlitzing({\n  BigNumber,\n  Unit,\n  config\n});\nexport var loschmidt = /* #__PURE__ */createLoschmidt({\n  BigNumber,\n  Unit,\n  config\n});\nexport var magneticConstant = /* #__PURE__ */createMagneticConstant({\n  BigNumber,\n  Unit,\n  config\n});\nexport var molarMass = /* #__PURE__ */createMolarMass({\n  BigNumber,\n  Unit,\n  config\n});\nexport var molarPlanckConstant = /* #__PURE__ */createMolarPlanckConstant({\n  BigNumber,\n  Unit,\n  config\n});\nexport var neutronMass = /* #__PURE__ */createNeutronMass({\n  BigNumber,\n  Unit,\n  config\n});\nexport var nuclearMagneton = /* #__PURE__ */createNuclearMagneton({\n  BigNumber,\n  Unit,\n  config\n});\nexport var planckCharge = /* #__PURE__ */createPlanckCharge({\n  BigNumber,\n  Unit,\n  config\n});\nexport var planckLength = /* #__PURE__ */createPlanckLength({\n  BigNumber,\n  Unit,\n  config\n});\nexport var planckTemperature = /* #__PURE__ */createPlanckTemperature({\n  BigNumber,\n  Unit,\n  config\n});\nexport var protonMass = /* #__PURE__ */createProtonMass({\n  BigNumber,\n  Unit,\n  config\n});\nexport var reducedPlanckConstant = /* #__PURE__ */createReducedPlanckConstant({\n  BigNumber,\n  Unit,\n  config\n});\nexport var rydberg = /* #__PURE__ */createRydberg({\n  BigNumber,\n  Unit,\n  config\n});\nexport var setIntersect = /* #__PURE__ */createSetIntersect({\n  DenseMatrix,\n  Index,\n  compareNatural,\n  size,\n  subset,\n  typed\n});\nexport var speedOfLight = /* #__PURE__ */createSpeedOfLight({\n  BigNumber,\n  Unit,\n  config\n});\nexport var stefanBoltzmann = /* #__PURE__ */createStefanBoltzmann({\n  BigNumber,\n  Unit,\n  config\n});\nexport var thomsonCrossSection = /* #__PURE__ */createThomsonCrossSection({\n  BigNumber,\n  Unit,\n  config\n});\nexport var avogadro = /* #__PURE__ */createAvogadro({\n  BigNumber,\n  Unit,\n  config\n});\nexport var bohrRadius = /* #__PURE__ */createBohrRadius({\n  BigNumber,\n  Unit,\n  config\n});\nexport var coulomb = /* #__PURE__ */createCoulomb({\n  BigNumber,\n  Unit,\n  config\n});\nexport var divide = /* #__PURE__ */createDivide({\n  divideScalar,\n  equalScalar,\n  inv,\n  matrix,\n  multiply,\n  typed\n});\nexport var electronMass = /* #__PURE__ */createElectronMass({\n  BigNumber,\n  Unit,\n  config\n});\nexport var factorial = /* #__PURE__ */createFactorial({\n  gamma,\n  typed\n});\nexport var gravity = /* #__PURE__ */createGravity({\n  BigNumber,\n  Unit,\n  config\n});\nexport var inverseConductanceQuantum = /* #__PURE__ */createInverseConductanceQuantum({\n  BigNumber,\n  Unit,\n  config\n});\nexport var lup = /* #__PURE__ */createLup({\n  DenseMatrix,\n  Spa,\n  SparseMatrix,\n  abs,\n  addScalar,\n  divideScalar,\n  equalScalar,\n  larger,\n  matrix,\n  multiplyScalar,\n  subtract,\n  typed,\n  unaryMinus\n});\nexport var magneticFluxQuantum = /* #__PURE__ */createMagneticFluxQuantum({\n  BigNumber,\n  Unit,\n  config\n});\nexport var molarMassC12 = /* #__PURE__ */createMolarMassC12({\n  BigNumber,\n  Unit,\n  config\n});\nexport var multinomial = /* #__PURE__ */createMultinomial({\n  add,\n  divide,\n  factorial,\n  isInteger,\n  isPositive,\n  multiply,\n  typed\n});\nexport var permutations = /* #__PURE__ */createPermutations({\n  factorial,\n  typed\n});\nexport var planckMass = /* #__PURE__ */createPlanckMass({\n  BigNumber,\n  Unit,\n  config\n});\nexport var quantumOfCirculation = /* #__PURE__ */createQuantumOfCirculation({\n  BigNumber,\n  Unit,\n  config\n});\nexport var secondRadiation = /* #__PURE__ */createSecondRadiation({\n  BigNumber,\n  Unit,\n  config\n});\nexport var stirlingS2 = /* #__PURE__ */createStirlingS2({\n  bignumber,\n  addScalar,\n  combinations,\n  divideScalar,\n  factorial,\n  isInteger,\n  isNegative,\n  larger,\n  multiplyScalar,\n  number,\n  pow,\n  subtract,\n  typed\n});\nexport var unit = /* #__PURE__ */createUnitFunction({\n  Unit,\n  typed\n});\nexport var bellNumbers = /* #__PURE__ */createBellNumbers({\n  addScalar,\n  isInteger,\n  isNegative,\n  stirlingS2,\n  typed\n});\nexport var eigs = /* #__PURE__ */createEigs({\n  abs,\n  add,\n  addScalar,\n  atan,\n  bignumber,\n  column,\n  complex,\n  config,\n  cos,\n  diag,\n  divideScalar,\n  dot,\n  equal,\n  flatten,\n  im,\n  inv,\n  larger,\n  matrix,\n  matrixFromColumns,\n  multiply,\n  multiplyScalar,\n  number,\n  qr,\n  re,\n  sin,\n  smaller,\n  sqrt,\n  subtract,\n  typed,\n  usolve,\n  usolveAll\n});\nexport var fermiCoupling = /* #__PURE__ */createFermiCoupling({\n  BigNumber,\n  Unit,\n  config\n});\nexport var mean = /* #__PURE__ */createMean({\n  add,\n  divide,\n  typed\n});\nexport var molarVolume = /* #__PURE__ */createMolarVolume({\n  BigNumber,\n  Unit,\n  config\n});\nexport var planckConstant = /* #__PURE__ */createPlanckConstant({\n  BigNumber,\n  Unit,\n  config\n});\nexport var setSymDifference = /* #__PURE__ */createSetSymDifference({\n  Index,\n  concat,\n  setDifference,\n  size,\n  subset,\n  typed\n});\nexport var variance = /* #__PURE__ */createVariance({\n  add,\n  apply,\n  divide,\n  isNaN,\n  multiply,\n  subtract,\n  typed\n});\nexport var classicalElectronRadius = /* #__PURE__ */createClassicalElectronRadius({\n  BigNumber,\n  Unit,\n  config\n});\nexport var lusolve = /* #__PURE__ */createLusolve({\n  DenseMatrix,\n  lsolve,\n  lup,\n  matrix,\n  slu,\n  typed,\n  usolve\n});\nexport var median = /* #__PURE__ */createMedian({\n  add,\n  compare,\n  divide,\n  partitionSelect,\n  typed\n});\nexport var setUnion = /* #__PURE__ */createSetUnion({\n  Index,\n  concat,\n  setIntersect,\n  setSymDifference,\n  size,\n  subset,\n  typed\n});\nexport var std = /* #__PURE__ */createStd({\n  map,\n  sqrt,\n  typed,\n  variance\n});\nexport var gasConstant = /* #__PURE__ */createGasConstant({\n  BigNumber,\n  Unit,\n  config\n});\nexport var mad = /* #__PURE__ */createMad({\n  abs,\n  map,\n  median,\n  subtract,\n  typed\n});\nexport var norm = /* #__PURE__ */createNorm({\n  abs,\n  add,\n  conj,\n  ctranspose,\n  eigs,\n  equalScalar,\n  larger,\n  matrix,\n  multiply,\n  pow,\n  smaller,\n  sqrt,\n  typed\n});\nexport var rotationMatrix = /* #__PURE__ */createRotationMatrix({\n  BigNumber,\n  DenseMatrix,\n  SparseMatrix,\n  addScalar,\n  config,\n  cos,\n  matrix,\n  multiplyScalar,\n  norm,\n  sin,\n  typed,\n  unaryMinus\n});\nexport var kldivergence = /* #__PURE__ */createKldivergence({\n  divide,\n  dotDivide,\n  isNumeric,\n  log,\n  map,\n  matrix,\n  multiply,\n  sum,\n  typed\n});\nexport var rotate = /* #__PURE__ */createRotate({\n  multiply,\n  rotationMatrix,\n  typed\n});\nexport var planckTime = /* #__PURE__ */createPlanckTime({\n  BigNumber,\n  Unit,\n  config\n});","/* eslint-disable @typescript-eslint/restrict-plus-operands */\n/* eslint-disable prefer-template */\n\nimport { Core, NodeSingular } from 'cytoscape';\nimport { Mode, Parameters } from './modes';\n\nfunction arrayToHTMLTable(array: number[][]) {\n  let result = '<table class=\"matrix\">';\n  for (let i = 0; i < array.length; i += 1) {\n    result += '<tr>';\n    for (let j = 0; j < array[i].length; j += 1) {\n      result += '<td>' + array[i][j] + '</td>';\n    }\n    result += '</tr>';\n  }\n  result += '</table>';\n\n  return result;\n}\n\nexport default class ModeAdjacencyMatrix implements Mode {\n  cy;\n\n  parameters;\n\n  constructor(cy: Core, parameters: Parameters) {\n    this.cy = cy;\n    this.parameters = parameters;\n  }\n\n  activate = () => {\n    this.render();\n  };\n\n  render = () => {\n    this.cy.elements().removeClass('highlighted');\n    this.cy\n      .elements()\n      .nodes()\n      .style(\n        'label',\n        (n: NodeSingular) => this.parameters.nodeIndex.indexOf(n.id()) + 1,\n      );\n  };\n\n  infobox = () => {\n    if (this.cy.nodes().size() > 0) {\n      const A = this.cy\n        .elements()\n        .utils()\n        .adjacencyMatrix({\n          indexing: (n: NodeSingular) =>\n            this.parameters.nodeIndex.indexOf(n.id()),\n        });\n\n      const d = arrayToHTMLTable(A);\n      return d.toString();\n    }\n    return '';\n  };\n\n  deactivate = () => {\n    this.cy.elements().nodes().style('label', '');\n  };\n}\n","\"use strict\";\n\nmodule.exports = function (workerUrl, origin, isESM) {\n  if (origin === self.location.origin) {\n    // If the worker bundle's url is on the same origin as the document,\n    // use the worker bundle's own url.\n    return workerUrl;\n  } else {\n    // Otherwise, create a blob URL which loads the worker bundle with `importScripts`.\n    var source = isESM ? 'import ' + JSON.stringify(workerUrl) + ';' : 'importScripts(' + JSON.stringify(workerUrl) + ');';\n    return URL.createObjectURL(new Blob([source], {\n      type: 'application/javascript'\n    }));\n  }\n};","let workerURL = require('./helpers/get-worker-url');\nlet bundleURL = require('./helpers/bundle-url');\nlet url = bundleURL.getBundleURL('hHmmC') + require('./helpers/bundle-manifest').resolve(\"7xBTE\");module.exports = workerURL(url, bundleURL.getOrigin(url), false);"],"names":["$2813f7ea3cc58695$export$6503ec6e8aabbaf","$2813f7ea3cc58695$export$f7ad0328861e2f03","$2813f7ea3cc58695$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","global","module","define","Alea","seed","me","this","mash","Mash","next","t","s0","c","s1","s2","copy","f","impl","opts","xg","state","prng","int32","double","quick","n","data","String","h","charCodeAt","exports","amd","alea","XorGen","strseed","x","y","z","w","k","result","xor128","v","d","xorwow","seed1","me1","X","j","push","init","slice","Date","xorshift7","limit","Math","max","xor4096","b","a","floor","tychei","$955b28bea593eb9d$export$bdfd709ae4826697","$955b28bea593eb9d$export$5a759dc7a1cfb72a","$955b28bea593eb9d$var$bundleURL","$955b28bea593eb9d$var$getBaseURL","url","replace","value","err","matches","stack","match","$955b28bea593eb9d$var$getBundleURL","parcelRequire","register","JSON","parse","$lgcSj","$22BvR","$j36hr","$89b41a1f389daad0$export$2e2bcd8739ae039","ModeNumNodes","cy","parameters","key","render","elements","removeClass","nodes","addClass","size","toString","$97da781958229b0f$export$2e2bcd8739ae039","ModeNumEdges","edges","$434cb2520e538697$var$_extends","$434cb2520e538697$exports","assign","bind","target","arguments","source","prototype","hasOwnProperty","call","__esModule","apply","$c1e1a60ada436141$export$c2f8e0cc249a8d8f","epsilon","matrix","number","precision","predictable","randomSeed","$6UW8E","$4afb3ea59c449560$export$7e4aa119212bc614","$4afb3ea59c449560$export$e51d0e7e5c4a03ab","constructor","isBigNumber","isDecimal","$4afb3ea59c449560$export$8849a896711efe0c","getPrototypeOf","isComplex","$4afb3ea59c449560$export$e312cb8a8e5e7c34","isFraction","$4afb3ea59c449560$export$8960dc335987b8da","isUnit","$4afb3ea59c449560$export$844ec244b1367d54","$4afb3ea59c449560$export$43bee75e5e14138e","Array","isArray","$4afb3ea59c449560$export$b22160e0a14f87b7","isMatrix","$4afb3ea59c449560$export$cea7aa84e978eba5","$4afb3ea59c449560$export$eb44495df7ba11d","isDenseMatrix","$4afb3ea59c449560$export$d508368d4da3c38a","isSparseMatrix","$4afb3ea59c449560$export$e331ccfa6f694c99","isRange","$4afb3ea59c449560$export$ba3dc792055c2f45","isIndex","$4afb3ea59c449560$export$f9ce7b637dfbe238","$4afb3ea59c449560$export$381a1a20e6a63376","isResultSet","$4afb3ea59c449560$export$e5dec9a75b602d6c","isHelp","$4afb3ea59c449560$export$f6e2535fb5126e54","$4afb3ea59c449560$export$871608497c498473","$4afb3ea59c449560$export$49841c62b9eff15","RegExp","$4afb3ea59c449560$export$a6cdc56e425d0d0a","$4afb3ea59c449560$export$630801d484da15df","$4afb3ea59c449560$export$fce6876652108ab","undefined","$4afb3ea59c449560$export$f88fb19d6b9ee5cb","isAccessorNode","isNode","$4afb3ea59c449560$export$440fa93dcf2757a3","isArrayNode","$4afb3ea59c449560$export$64d7d515ec030d5e","isAssignmentNode","$4afb3ea59c449560$export$1665e2275a3d717a","isBlockNode","$4afb3ea59c449560$export$e1babefe78c70737","isConditionalNode","$4afb3ea59c449560$export$fa9d80731fd8c54b","isConstantNode","$4afb3ea59c449560$export$27c05cfffd263d30","isFunctionAssignmentNode","$4afb3ea59c449560$export$6ae03b16e064e6c4","isFunctionNode","$4afb3ea59c449560$export$ff90979121a6cabc","isIndexNode","$4afb3ea59c449560$export$8ee0fc9ee280b4ee","$4afb3ea59c449560$export$3f18867a334658e9","isObjectNode","$4afb3ea59c449560$export$7e624cbaab6cce94","isOperatorNode","$4afb3ea59c449560$export$c55e3736c5721220","isParenthesisNode","$4afb3ea59c449560$export$92729c5c4ff6fc83","isRangeNode","$4afb3ea59c449560$export$87815d550facaed9","isSymbolNode","$4afb3ea59c449560$export$dc36953d0b3a4f05","isChain","$4afb3ea59c449560$export$f5bbd400c2f4426f","$parcel$interopDefault","name","$e4a3379dbeb48739$export$9cd59f9826255e47","type","clone","map","valueOf","TypeError","$e4a3379dbeb48739$export$d6051a0f7a227332","object","callback","clone1","$e4a3379dbeb48739$export$5a15a386532a5ea4","$e4a3379dbeb48739$export$8b58be045bf06082","prop","$e4a3379dbeb48739$export$6cc798251952180","len","property","$e4a3379dbeb48739$export$8cea971c64639ea7","properties","$0c9ceac53d350611$export$517ab898194ae9af","$0c9ceac53d350611$export$f4b0a2084fdf2177","$473c23b3265c4496$export$e506a1d27d1eaa20","options","freeze","MATRIX_OPTIONS","NUMBER_OPTIONS","$3c33217817a58d0a$export$a287f47fed4544b8","isFinite","round","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","_unsupportedIterableToArray","F","s","done","e","_e","normalCompletion","didErr","step","_e2","return","minLen","_arrayLikeToArray","from","test","arr","arr2","ok","notOk","undef","_typeof","obj1","obj","NOT_TYPED_FUNCTION","create","isPlainObject","typeMap","typeList","_types","anyType","isAny","nConversions","typed","createCount","findType","typeName","get","otherName","_step","message","toLowerCase","_iterator","addTypes","types","beforeSpec","beforeIndex","index","newTypes","has","set","conversionsTo","affectedTypes","concat","_i","clear","Map","clearConversions","_step2","_iterator2","findTypeNames","filter","isTypedFunction","entity","findSignature","fn","signature","exact","params","parseSignature","join","canonicalSignature","stringifyParams","signatures","_typedFunctionData","signatureMap","remainingSignatures","candidate","nParams","i1","_step3","want","filteredSignatures","possibility","_iterator3","have","getParamAtIndex","restParam","hasAny","haveTypes","paramTypeSet","some","wtype","_loop","_step4","_iterator4","find","implementation","convert","conversions","separator","p","parseParam","param","indexOf","typeDefs","split","trim","paramName","typeIndex","conversion","conversionIndex","hasConversion","expandParam","matchingConversions","availableConversions","newName","convertibleTypes","typeSet","Set","forEach","add","rawSignature","rawParams","parsedParam","SyntaxError","hasRestParam","last3","compileTest","test0","test1","tests","compileTests","varIndex","initial","lastTest","testRestParam","args","getTypeSetAtIndex","isExactType","mergeExpectedParams","_step5","paramSet","_iterator5","createError","expected","_name","matchingSignatures","nextMatchingDefs","actualTypes","category","actual","_ret2","lengths","Infinity","min","maxLength","expectedLength","argTypes","getLowestTypeIndex","getLowestConversionIndex","compareParams","param1","param2","typeDiff","convDiff","compareSignatures","signature1","signature2","pars1","pars2","last1","last2","hasRest1","hasRest2","par","_step6","any1","conv1","_iterator6","_step7","any2","conv2","_iterator7","err1","lengthCriterion","comparisons","tc","thisComparison","_i2","_comparisons","typeNames","sort","t1","t2","knownTypes","_step8","newMatch","_iterator8","compileArgsPreprocessing","fnConvert","compiledConversions","compileArgConversion","last","fnPreprocess","offset","conversion0","conversion1","arg","splitParams","params1","_splitParams","paramsSoFar","resultingParams","exactTypes","flatMap","nextParam","conflicting","params2","ii","_step9","typeSet1","typeSet2","overlap","_iterator9","len1","len2","restParam1","restParam2","clearResolutions","functionList","isReferToSelf","referToSelf","isReferTo","makeReferTo","referTo","references","collectResolutions","reference","_step10","resolvedReferences","_iterator10","resolution","resolveReferences","self","resolvedFunctions","isResolved","fill","leftUnresolved","nothingResolved","validateDeprecatedThis","signaturesMap","deprecatedThisRegex","createTypedFunction","rawSignaturesMap","warnAgainstDeprecatedThis","parsedParams","originalFunctions","preliminarySignatures","_loop2","pp","functionIndex","_step11","conversionParams","sp","_iterator11","spName","every","theTypedFn","internalSignatureMap","_i3","_preliminarySignature","ok0","ok1","ok2","ok3","ok4","ok5","allOk","test00","test10","test20","test30","test40","test50","test01","test11","test21","test31","test41","test51","_i4","fn0","fn1","fn2","fn3","fn4","fn5","len0","len3","len4","len5","iStart","iEnd","fns","generic","_i5","onMismatch","arg0","arg1","defineProperty","_onMismatch","start","end","findInArray","objectOrFn","checkName","nameSoFar","getObjectName","mergeSignatures","dest","sourceFunction","destFunction","saveTyped","_validateConversion","to","maybeName","named","allSignatures","item","theseSignatures","thisName","argument","throwMismatchError","_findType","addType","beforeObjectTest","before","addConversion","other","addConversions","removeConversion","existingConversion","splice","resolve","tf","argList","sigs","$3c33217817a58d0a$export$c5552dfdbc7cec71","sign","$3c33217817a58d0a$export$b9fae0bba9d9094d","log2","log","LN2","$3c33217817a58d0a$export$75e08744a3ff8516","log10","LN10","$3c33217817a58d0a$export$841fc4d5a1480b85","log1p","cbrt","negate","exp","$3c33217817a58d0a$export$b6c0a80d46d3391d","expm1","$3c33217817a58d0a$var$formatNumberToBase","base","prefix","suffix","pow","sign1","$3c33217817a58d0a$export$d9468344d3651243","isNaN","wordSize","notation","$3c33217817a58d0a$export$a81f732198733497","$3c33217817a58d0a$export$888cb08ddc4765be","rounded","$3c33217817a58d0a$export$e5b32ced877afc7e","$3c33217817a58d0a$export$feb80e120a50087f","exponent","coefficients","newExp","missingZeros","abs","expDiff","decimalIdx","decimals","decimalVal","str","$3c33217817a58d0a$export$9299fe684ed0ee48","lowerExp","upperExp","$3c33217817a58d0a$var$zeros","dot","$3c33217817a58d0a$export$3e91a10e66078270","digits1","sign2","digits2","parseFloat","zeros1","parseInt","splitValue","first","shift","unshift","pop","$3c33217817a58d0a$export$41b54fa1db30dbb5","Number","EPSILON","$3c33217817a58d0a$export$6f3989c6ecc04081","diff","$3c33217817a58d0a$export$b26caf0f29211d08","acosh","sqrt","$3c33217817a58d0a$export$839d8a01b6af4fc0","asinh","$3c33217817a58d0a$export$21ea955025ceb08b","atanh","$3c33217817a58d0a$export$545004b505d7c555","cosh","sinh","tanh","$7c8269fe298cd4ad$var$formatBigNumberToBase","big2","BigNumberCtor","greaterThan","sub","lessThan","mul","isInteger","toBinary","toOctal","toHexadecimal","$7c8269fe298cd4ad$export$d9468344d3651243","gt","toFixed","$7c8269fe298cd4ad$export$a81f732198733497","$7c8269fe298cd4ad$export$888cb08ddc4765be","valueWithoutExp","valueStr","toPrecision","$7c8269fe298cd4ad$export$9299fe684ed0ee48","isZero","toSignificantDigits","digits","toExponential","$8923835495067d03$export$d9468344d3651243","$8923835495067d03$var$looksLikeFraction","fraction","$8923835495067d03$var$formatArray","syntax","format","$8923835495067d03$var$_format","truncate","substring","array","$8923835495067d03$export$2da9287da10b19e2","$29d72bdb7c6030b3$export$ad1391ca020fdd96","relation","$a070017483467c46$export$efa5eacb1304c464","$ff342017db33d44c$export$51ffaee4afb683a5","$ff342017db33d44c$var$_validate","dim","dimNext","child","$ff342017db33d44c$export$a22775fa5e2eebd9","$ff342017db33d44c$export$3cfe3fbfec03f260","$ff342017db33d44c$export$4380c87abf28fdf","defaultValue","$ff342017db33d44c$var$_resize","elem","oldLen","newLen","$ff342017db33d44c$export$9eaad88cf88cee2b","sizes","flatArray","$ff342017db33d44c$export$bffa455ba8c619a6","currentLength","newLength","$ff342017db33d44c$var$product","$ff342017db33d44c$export$d0efc868ac2c6822","tmpArray2","tmpArray","sizeIndex","$ff342017db33d44c$var$_reshape","processedSizes","wildCardIndex","reduce","prev","curr","$ff342017db33d44c$export$5a07c5202d40a604","dims","outer","$ff342017db33d44c$var$_unsqueeze","flat","$ff342017db33d44c$export$d31e00bf4359ea8b","typeOf","itemType","$3f1a40c31e8a14a1$export$e9008f2713103c6c","dependencies","create1","meta","assertAndCreate","scope","deps","$3f1a40c31e8a14a1$export$2f4d32a1468e229c","dependency","$3f1a40c31e8a14a1$export$1399ac7f45b04b5","missingDependencies","$3f1a40c31e8a14a1$export$19a2c26dad95d6e7","isFactory","RangeError","isDimensionError","isIndexError","$7751568ebfebddf6$export$87a87648a1961976","$7751568ebfebddf6$export$53b83ca8eaab0383","$7751568ebfebddf6$export$3039c640f3cfc12a","$7751568ebfebddf6$export$2220a91638ab1d9e","$7751568ebfebddf6$export$e99fe8700ee9f9cd","$7751568ebfebddf6$var$safeNativeProperties","Function","method","$7751568ebfebddf6$var$safeNativeMethods","toLocaleString","$f0d7169d94e800f9$export$6f491f8f4fd27271","ObjectWrappingMap","wrappedObject","$f0d7169d94e800f9$export$5c90113a285f2241","$dc5a98b1150a2a66$var$_createTyped2","$c71f9ce1cc1be553$exports","$dc5a98b1150a2a66$export$8597b5d47504f989","_ref","BigNumber","Complex","DenseMatrix","Fraction","$dc5a98b1150a2a66$var$throwNoBignumber","$dc5a98b1150a2a66$var$throwNoComplex","toNumber","$dc5a98b1150a2a66$var$throwNoFraction","$dc5a98b1150a2a66$var$throwNoMatrix","usualError","includes","sig","globalScope","inexact","noConflict","quadrant","digitsToString","ws","indexOfLastWord","LOG_BASE","getZeroString","invalidArgument","rm","repeating","di","r","rd","ceil","mathpow","baseIn","baseOut","strL","arrL","NUMERALS","charAt","reverse","sd","isTruncated","roundUp","xd","xdi","Ctor","out","BASE","external","maxE","NaN","minE","finiteToString","isExp","nonFiniteToString","getLn10","pr","LN10_PRECISION","precisionLimitExceeded","PI_PRECISION","finalise","PI","getPrecision","zs","intPow","times","mathfloor","maxOrMin","ltgt","guard","sum","wpr","rep","rounding","denominator","plus","divide","checkRoundingDigits","search","isHyperbolic","u","x2","minus","pi","getPi","halfPi","isNeg","divToInt","lte","isOdd","toStringBinary","checkInt32","MAX_DIGITS","convertBase","acos","asin","atan","clamp","config","decimalError","useDefaults","defaults","ps","EXP_LIMIT","DEFAULTS","crypto","getRandomValues","randomBytes","cryptoUnavailable","cos","div","Decimal1","toStringTag","tag","ln","max1","min1","mod","pow1","Uint32Array","random","sin","sum1","tan","trunc","isBinary","isHex","isOctal","P","clampedTo","cmp","comparedTo","xdL","ydL","yd","xs","ys","tinyPow","cos2x","cosine","toLessThanHalfPi","neg","m","t3","t3plusx","eq","decimalPlaces","dp","greaterThanOrEqualTo","gte","hyperbolicCosine","one","taylorSeries","cosh2_x","d8","hyperbolicSine","sinh2_x","d5","d16","d20","hyperbolicTangent","inverseHyperbolicCosine","inverseHyperbolicSine","inverseHyperbolicTangent","xsd","px","inf","num","isBase10","naturalLogarithm","xe","xLTy","getBase10Exponent","modulo","q","negated","carry","sin2_x","divisor","isFloat","parseDecimal","$f52d261803f76911$export$234de8d4231bfea3","on","$e8e526bd229e1e67$exports","EUCLID","toJSON","mathjs","fromJSON","json","isClass","root","logHypot","_a","_b","parser_exit","re","im","tokens","atan2","loh","tmp","xx","cosm1","cot","sec","csc","acot","asec","acsc","coth","csch","sech","res","noIM","oneMinus","onePlus","temp","acoth","acsch","asech","inverse","conjugate","places","equals","ret","toVector","isInfinite","E","$97e035131131ece3$exports","$0cd7d078db08447d$export$24a4be44fc8b6392","toPolar","phi","strRe","strIm","fromPolar","hasBase","compare","newFraction","gcd","factorize","factors","MAX_CYCLE_LEN","p1","p2","M","A","B","C","D","N","lcm","simplify","eps","thisABS","cont","divisible","toFraction","excludeWhole","whole","toLatex","toContinued","dec","cycLen","rem","cycleLen","cycOff","rem1","rem2","modpow","cycleStart","$54f1707d438e33c5$exports","$9aece42e60acc2b8$export$c317f082100fca89","$4ae48ed3cd73fb9f$export$72d485cc3ed6a97a","Matrix","storage","datatype","subset","replacement","resize","reshape","skipZeros","toArray","$3Iehw","$e6f58388700b211d$export$6080faceac22b73a","queue","del","oldIndex","hit","nuIndex","delete","$7210675dff3eaec7$export$fc10aeed3a532e2a","ref","hasher","POSITIVE_INFINITY","stringify","memoize1","cache","values","lru","hash","newVal","$7210675dff3eaec7$export$6c00fba23f8c91a7","count","$b5481984e53e8159$export$1a088ca8dd364cd1","_get","isScalar","_size","_getSubmatrix","_data","_datatype","_set","submatrix","sSize","iSize","_fit","_setSubmatrix","_resize","newSize","changed","preprocess","range","dimension","dataIndex","subIndex","createDenseMatrix","getDataType","indexI","sizeArray","size1","recurse","recurse1","recurse2","mark","_callee","recurse3","_ctx","delegateYield","_ctx1","rows","_iteratorNormalCompletion","_didIteratorError","_iteratorError","row","columns","_this","col","i2","diagonal","kSuper","kSub","_value","ms","swapRows","_swapRows","vi","$ca4d6f6792350b14$export$ce7eaaed37329a1b","$f71e68e2344f1207$var$n1","$f71e68e2344f1207$var$n2","$f71e68e2344f1207$export$59270f717756a93a","$f71e68e2344f1207$export$d6751d2a3b6da12a","$f71e68e2344f1207$export$4ad41ac849e391ec","$f71e68e2344f1207$export$339666dc881be46b","$f71e68e2344f1207$export$da5b80d388a295fb","$f71e68e2344f1207$export$95c2aecb85f70726","$f71e68e2344f1207$export$9505f0b39acd04c","$f71e68e2344f1207$export$a33b288b35672fe5","$f71e68e2344f1207$export$756d0c010cecc6c3","$f71e68e2344f1207$export$3a8d786b08b3a70c","$f71e68e2344f1207$export$b55f99ec1f4c5649","prod","$f71e68e2344f1207$export$4df0e8fcdd5c0927","$f71e68e2344f1207$export$e3f8d49574d29dff","$f71e68e2344f1207$export$f9bc93220cfa3c59","$f71e68e2344f1207$export$64b58c5b0372ae95","$f71e68e2344f1207$export$9f26f16bd796a7b3","inv","$f71e68e2344f1207$export$af3d9fe43be78285","$f71e68e2344f1207$export$c4094a156ed9ab35","$f71e68e2344f1207$export$8cb756a23a623229","lastx","lasty","$f71e68e2344f1207$export$3f512e7fd4999e01","$f71e68e2344f1207$export$a3992db8dd0fd9e6","$320f4ef33c0b34ab$var$n2","$320f4ef33c0b34ab$export$e7607930867bd49a","$320f4ef33c0b34ab$export$22a2b2a0351218e7","$320f4ef33c0b34ab$export$9aecb772cb5ad1c7","$320f4ef33c0b34ab$export$2260a44ec1c987dc","$320f4ef33c0b34ab$export$65c07a47901525ba","$320f4ef33c0b34ab$export$b6d96f775be90000","$320f4ef33c0b34ab$export$2a8d1e3dcede6e47","$07e9016e57ca5123$export$18c7bea995a110f","$07e9016e57ca5123$export$a4b4b4d4d776fe92","$07e9016e57ca5123$export$f1e1789686576879","$07e9016e57ca5123$export$324943737027944a","$f5c5a49d08e288fe$var$n2","$f5c5a49d08e288fe$export$5c3e9fce4e8f3d3a","$f5c5a49d08e288fe$export$cb9e31d07eec8012","$f5c5a49d08e288fe$export$17cc7dc3a74df3af","$f5c5a49d08e288fe$export$11dffb061e00e795","$b08c7f463dc55720$export$dbd0f18357df1ddd","half","$05cb04e2daea0570$export$da03a9f23c941fae","twoN","threeN","fourN","fiveN","$05cb04e2daea0570$export$4ef5d09c80bf8d89","$05cb04e2daea0570$export$c1392abb9fefd3b6","$05cb04e2daea0570$export$6854df5fcb691251","$05cb04e2daea0570$export$591d8f773e88a995","$05cb04e2daea0570$export$a9c1cdc6d03f0efc","$05cb04e2daea0570$export$e1cadc5b48a02cef","$cd611669375d53d2$var$n1","$cd611669375d53d2$export$84088556f7d2d0be","$cd611669375d53d2$export$ba80ccbf024897ef","$cd611669375d53d2$export$e2be1aa5d5a3f81","$cd611669375d53d2$export$e3b67a6e3df3fd81","$cd611669375d53d2$export$51cd224337b2c783","xInv","$cd611669375d53d2$export$5ec3930177455ade","$cd611669375d53d2$export$cf144300ea173362","$cd611669375d53d2$export$3a027485d3336d8d","$cd611669375d53d2$export$44a1f653c6513db8","$cd611669375d53d2$export$515b39f7fd07e09f","$cd611669375d53d2$export$925affe88b2512fc","$cd611669375d53d2$export$5a8409ad16e318b2","$cd611669375d53d2$export$143835b5c1db9790","$cd611669375d53d2$export$ee1efc70bd8a6d93","$cd611669375d53d2$export$b83345d70fe4a871","$cd611669375d53d2$export$89648c4ce0d79e70","$c3b90b3966c2c4d9$var$n1","$c3b90b3966c2c4d9$export$6dbd64961904ec9a","$c3b90b3966c2c4d9$export$5374bb854d0e41c8","$c3b90b3966c2c4d9$export$83fb4ed1cc9804a","$c3b90b3966c2c4d9$export$9fd08d8371c55110","$8000765060615580$var$name","$8000765060615580$export$ea90652d00dab06e","Unit","valueType","$fb1c7a6e8666c6b0$export$6f3989c6ecc04081","$8217516518937a6e$export$852c8261c9f393e0","$e6bd396150b009ae$export$f15f03c51630bb25","equalBase","$16736062e59afef7$var$name","$16736062e59afef7$export$c370bab664a0c9a2","compareUnits","$24075a8ae2f26d70$export$a783ce8f6a98b2e5","_ref2","_createFromArray","_values","_index","_ptr","equalScalar","zero","_getsubset","idx","kk","mvalues","mindex","mptr","pv","ptr","SparseMatrix","_setsubset","firstDimensionRange","secondDimensionRange","firstDataIndex","firstSubIndex","secondDataIndex","secondSubIndex","_getValueIndex","top","bottom","_insert","ins","k0","k1","_toArray","_createFromMatrix","createSparseMatrix","density","_remove","colIndex","rowIndex","r1","c1","_j","minRow","maxRow","minColumn","maxColumn","invoke","_k","_map","_k2","_i7","_forEachRow","kx","ky","vx","vy","$4fe45faf78d04212$export$763ee9f6477981ab","string","input","nonDecimalWithRadixMatch","nonDecimalNumberParts","radix","integerPart","fractionalPart","parts","$4fe45faf78d04212$var$makeNumberFromNonDecimalParts","wordSizeSuffixMatch","null","unit","valuelessUnit","$e18cd7e0d3ed1dda$export$1c955ee1b8a97877","twoPowSize","twoPowSizeSubOne","$8c83390287452478$export$de147ca8498e0312","numerator","$75b8a07620231cb3$var$name","$75b8a07620231cb3$export$f3cf8b510f9cb8ab","_create","$3843694d2c8d00b4$var$name","$3843694d2c8d00b4$export$939e1be6e134f392","$553c53fe774fd1d4$var$name","$553c53fe774fd1d4$export$bbebd809b9ccc50b","fixPrefix","$841626bb7f1c0561$export$b315efa10530691e","avalues","aindex","aptr","asize","adt","dt","cf","cvalues","cindex","cptr","$d10bb1bdb6c7848b$export$c966408e3ecf83ee","cdata","$e6a366fc7117ca98$export$4b07063314120f7c","adata","_iterate","level","av","bv","cv","$bf1d8e1f3ae7c2b6$export$727ab96f88a9e651","denseMatrix","sparseMatrix","bvalues","bindex","bptr","bsize","bdt","$acf87cbb695e53f8$export$5295edae9a41ff00","$d54c061dcde9c067$export$bd1609c374d6d636","bdata","csize","$bf0ae0ad0fc972d8$export$16b92d4ea17760ac","matAlgo13xDD","matAlgo14xDs","matrixSignatures","elop","SD","DS","SS","scalar","Ds","Ss","sS","$178caf4ad7b13045$export$6325e83173a86892","$ff1b825071079ac9$export$a0ee15a3591ad1a","xa","xb","wa","wb","wai","wbi","vc","$d89f36221f440d10$export$37dc64d7e8361b32","multiply","$7b08263ae5bbb606$var$name","$7b08263ae5bbb606$export$86d08fd318fa07c8","_validateMatrixDimensions","size2","_multiplyVectorDenseMatrix","alength","bcolumns","af","addScalar","mf","multiplyScalar","matAlgo11xS0s","_multiplyMatrixVector","arows","acolumns","brows","ib","vbi","ka0","ka1","ka","ia","ic","_multiplyMatrixMatrix","jb","kb0","kb1","cij","kb","vbij","p0","selfMM","xsize","ysize","_multiplyVectorVector","_multiplyVectorMatrix","rest","$6053ec6c541c544b$var$name","$6053ec6c541c544b$export$cd7a6c131b18ab16","unaryMinus","matAlgo01xDSid","matAlgo03xDSf","matAlgo05xSfSf","matAlgo10xSids","matAlgo12xSfs","matrixAlgorithmSuite","$f681a6b1a7b82816$var$name","$f681a6b1a7b82816$export$af5efe8ad97f01a2","$7ac5c82b8651a245$export$f0829713dc162a8","$7ac5c82b8651a245$export$9978fd42ef220ba0","$7ac5c82b8651a245$export$b81416cb7ecca475","$3fc140829f584023$export$f27c2c74ddc37d80","isArgumentsError","$8229d78fe8e86988$var$name","$8229d78fe8e86988$export$9151c23a59ce3fb6","$b608debeb36d1de9$export$e3cf2d123164e554","_number","bignumber","validInputTypes","validOutputTypes","outputType","check","inputType","$71798151bc273df4$var$name","$71798151bc273df4$export$399593177816ff82","numeric","divideInto","$21ae0137eec974c2$var$name","$9cd6a96cc095a4ef$var$name","$d42fbea3b0ff73a3$exports","enumerable","configurable","writable","$c8931402ddc41ca9$var$hasher","$c8931402ddc41ca9$export$d0a8190d955e3c5b","$5704677b4b97e5f2$export$3dc59ff00984d687","_validateDim","xLen","yLen","xSize","ySize","conj","aIsColumn","bIsColumn","_c","_c2","_c3","xindex","xvalues","yindex","yvalues","I","J","$b009b7ce74ac1cfc$export$93f810683c54b005","matrix1","subtract","divideScalar","any","cols","rowIndices","_","k_","piv","piv_","i_","det","_det","$591ab6e0f35a2050$export$2a122d28e37477a2","nMinusk","answer","nextdivisor","lastdivisor","nextnumerator","$dTPtt","pool","math","nodecrypto","seedrandom","shortseed","mixkey","flatten","entropy","tostring","autoseed","arc4","ARC4","prng1","g","chunks","startdenom","significance","width","overflow","S","pass","is_math_call","rngname","keylen","j1","mask","smear","stringseed","Uint8Array","msCrypto","browser","navigator","plugins","screen","fromCharCode","depth","typ","$88a6f96625cd1a0e$exports","ex","$aop76","$c3Cey","$96wee","$dvRHE","$fSx29","now","$d8fa579334b0555d$var$numberFactory","$7df3100df17fc2ff$export$d97aa349ed20696","$7df3100df17fc2ff$export$50ceb3fb9926e63e","$7df3100df17fc2ff$export$b336c2702c498be5","$7df3100df17fc2ff$export$5b12bf1653c0dd85","$7df3100df17fc2ff$export$97f0d27b48f120e8","$7df3100df17fc2ff$export$519f616c41a1c711","$7df3100df17fc2ff$export$2b7b095c4f443355","$7df3100df17fc2ff$export$8576f72eb7f14a7e","$7df3100df17fc2ff$export$fb254c661fe9c0db","$7df3100df17fc2ff$export$943761f5c9c3f156","$7df3100df17fc2ff$export$c46ec7d82fb1f602","$7df3100df17fc2ff$export$c697bed75648cdb7","$7df3100df17fc2ff$export$98e628dec113755e","$7df3100df17fc2ff$export$de9b2b7556879848","$7df3100df17fc2ff$export$6cd304851a69e08","$7df3100df17fc2ff$export$7f34ce79760854f7","$7df3100df17fc2ff$export$9bdad1ae37d738e0","$7df3100df17fc2ff$export$b7a508fa8dae59fc","$7df3100df17fc2ff$export$346677f925de839c","$7df3100df17fc2ff$export$4e2d2ead65e5f7e3","$7df3100df17fc2ff$export$67275f837d70084d","$7df3100df17fc2ff$export$94132a0e348806d4","$7df3100df17fc2ff$export$2060d2db72cce88f","$7df3100df17fc2ff$export$d063d65fed97e7fa","$1057b90e5135a7e6$export$283c7b7b2d0a1841","idNodeCount","idEdgeCount","outputContainer","document","getElementById","nodeIndex","$1057b90e5135a7e6$export$aea64bc1b6f8f415","$2hmjV","$kVa2A","$g00W3","cyOptions","container","$1057b90e5135a7e6$export$f5178b693946e751","modeName","textKey","icon","$efzB6","iconClear","modeObj","$4Jbmd","default","iconExport","$6tNEv","iconImport","$brS0K","iconLoad","$c1uEy","iconPointer","$bn6f8","iconNode","$eVhA1","iconEdge","$g3IaC","$1057b90e5135a7e6$export$546aa31356d3f063","iconGirth","ModeGirth","$fvlsR","invariants","girth","path","ModeDegSequence","style","degree","ModeComponents","comps","components","clearInterval","viewInterval","setInterval","_this1","ModeCircuitRank","cycles","circuitRank","ModeDiameter","diameter","ModeDetAdjacency","utils","adjacencyMatrix","indexing","ModeAdjacencyMatrix","$7920aa1a48d672be$var$arrayToHTMLTable","_this2","$kBTuX","use","$b8MII","i18nextOptions","$7091995d75c15106$var$localize","$22twO","window","d3","$48EYa","$b1dcaf659c9d437c$exports","workerUrl","origin","isESM","location","URL","createObjectURL","Blob","$1b8be87fc693785b$var$url","$cP1aT","getBundleURL","$1b8be87fc693785b$exports","getOrigin","switchSecondaryMode","newMode","secondaryMode","deactivate","activate","updateInfo","infoboxItems","select","selectAll","newItems","enter","append","attr","classed","iconInfo","ev","stopPropagation","currentTarget","Element","modeNull","merge","html","infobox","findIso","Worker","worker","postMessage","onmessage","console","primaryMode","langList","changeLanguage","isoCode","then","catch","reason","error","text","endonym","buttons"],"version":3,"file":"index.33763f05.js.map"}