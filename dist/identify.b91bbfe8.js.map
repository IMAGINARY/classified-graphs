{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/runtime-39dd586ad1689f3a.js","src/ts/main-identify.ts","src/ts/modes/ModeLoadRandom.ts","<<jsx-config-pragma.js>>","src/ts/modes/ModeIsoCheck.ts","node_modules/@parcel/runtime-js/lib/helpers/get-worker-url.js","node_modules/@parcel/runtime-js/lib/runtime-a76bfb3e2d973609.js"],"sourcesContent":["require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"eSxpj\\\":\\\"identify.b91bbfe8.js\\\",\\\"7xBTE\\\":\\\"sgiso_worker.b7491b5b.js\\\",\\\"hBKZF\\\":\\\"index.4f9ea6eb.js\\\"}\"));","// import assert from 'assert';\nimport cytoscape from 'cytoscape';\nimport ready from 'document-ready';\nimport * as d3 from 'd3-selection';\nimport i18next from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport locI18next from 'loc-i18next';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport './side-effects';\n\nimport { cyOptions, i18nextOptions, langList } from './constants';\n\nimport { Mode, Parameters } from './modes/modes';\n\n// import { parameters, toolbarModes, infoboxModes } from './modesList';\nimport ModeNull from './modes/ModeNull';\nimport ModeNode from './modes/ModeNode';\nimport ModeEdge from './modes/ModeEdge';\n// import ModeDijkstra from './modes/ModeDijkstra';\n// import ModeGirth from './modes/ModeGirth';\n// import ModeNumNodes from './modes/ModeNumNodes';\n// import ModeNumEdges from './modes/ModeNumEdges'; // ModeNumEdges -> ES Module\n// import ModeDegSequence from './modes/ModeDegSequence';\n// import ModeComponents from './modes/ModeComponents';\n// import ModeCircuitRank from './modes/ModeCircuitRank';\n// import ModeDiameter from './modes/ModeDiameter';\nimport ModeExport from './modes/ModeExport';\nimport ModeImport from './modes/ModeImport';\nimport ModeLoad from './modes/ModeLoad';\nimport ModeLoadRandom from './modes/ModeLoadRandom';\n// import ModeLayout from './modes/ModeLayout';\nimport ModeClear from './modes/ModeClear';\n// import ModeDetAdjacency from './modes/ModeDetAdjacency';\n// import ModeAdjacencyMatrix from './modes/ModeAdjacencyMatrix';\n\nimport * as assets from './assets';\nimport ModeIsoCheck from './modes/ModeIsoCheck';\n\nconst cy1 = cytoscape({\n  ...cloneDeep(cyOptions),\n  ...{ container: document.getElementById('cy1') },\n});\n\nconst cy2 = cytoscape({\n  ...cloneDeep(cyOptions),\n  ...{ container: document.getElementById('cy2') },\n});\n\nconst parameters2: Parameters = {\n  idNodeCount: 1,\n  idEdgeCount: 1,\n  outputContainer: document.getElementById('output') as HTMLElement,\n  nodeIndex: [],\n};\n\nconst parameters1: Parameters = {\n  idNodeCount: 1,\n  idEdgeCount: 1,\n  outputContainer: document.getElementById('output') as HTMLElement,\n  nodeIndex: [],\n  isoTarget: cy2,\n  isoTargetParams: parameters2,\n};\n\ntype ModeConfig = {\n  modeName: string;\n  textKey: string;\n  icon?: string;\n  modeObj: Mode;\n};\n\nconst toolbarModes: ModeConfig[] = [\n  {\n    modeName: 'modeClear',\n    textKey: 'Clear',\n    icon: assets.iconClear,\n    modeObj: new ModeClear(cy1, parameters1),\n  },\n  {\n    modeName: 'modeExport',\n    textKey: 'Export',\n    icon: assets.iconExport,\n    modeObj: new ModeExport(cy1, parameters1),\n  },\n  {\n    modeName: 'modeImport',\n    textKey: 'Import',\n    icon: assets.iconImport,\n    modeObj: new ModeImport(cy1, parameters1),\n  },\n  {\n    modeName: 'modeLoad',\n    textKey: 'Load',\n    icon: assets.iconLoad,\n    modeObj: new ModeLoad(cy1, parameters1),\n  },\n  {\n    modeName: 'modeNull',\n    textKey: 'Pointer',\n    icon: assets.iconPointer,\n    modeObj: new ModeNull(cy1, parameters1),\n  },\n  {\n    modeName: 'modeNode',\n    textKey: 'Nodes',\n    icon: assets.iconNode,\n    modeObj: new ModeNode(cy1, parameters1),\n  },\n  {\n    modeName: 'modeEdge',\n    textKey: 'Edges',\n    icon: assets.iconEdge,\n    modeObj: new ModeEdge(cy1, parameters1),\n  },\n  {\n    modeName: 'modeLoadRandom',\n    textKey: 'Target',\n    icon: assets.iconQuestion,\n    modeObj: new ModeLoadRandom(cy2, parameters2),\n  },\n  {\n    modeName: 'modeIsoCheck',\n    textKey: 'Check',\n    icon: assets.iconCheck,\n    modeObj: new ModeIsoCheck(cy1, parameters1),\n  },\n  // {\n  //   modeName: 'modeClear',\n  //   textKey: 'Clear',\n  //   icon: assets.iconClear,\n  //   modeObj: new ModeClear(cy2, parameters2),\n  // },\n  // {\n  //   modeName: 'modeExport',\n  //   textKey: 'Export',\n  //   icon: assets.iconExport,\n  //   modeObj: new ModeExport(cy2, parameters2),\n  // },\n  // {\n  //   modeName: 'modeImport',\n  //   textKey: 'Import',\n  //   icon: assets.iconImport,\n  //   modeObj: new ModeImport(cy2, parameters2),\n  // },\n  // // {\n  // //   modeName: 'modeLoad',\n  // //   textKey: 'Load',\n  // //   icon: assets.iconLoad,\n  // //   modeObj: new ModeLoad(cy2, parameters2),\n  // // },\n  // {\n  //   modeName: 'modeNull',\n  //   textKey: 'Pointer',\n  //   icon: assets.iconPointer,\n  //   modeObj: new ModeNull(cy2, parameters2),\n  // },\n  // {\n  //   modeName: 'modeNode',\n  //   textKey: 'Nodes',\n  //   icon: assets.iconNode,\n  //   modeObj: new ModeNode(cy2, parameters2),\n  // },\n  // {\n  //   modeName: 'modeEdge',\n  //   textKey: 'Edges',\n  //   icon: assets.iconEdge,\n  //   modeObj: new ModeEdge(cy2, parameters2),\n  // },\n];\n\n// const infoboxModes: ModeConfig[] = [\n//   {\n//     modeName: 'modeNumNodes',\n//     textKey: 'Order',\n//     modeObj: new ModeNumNodes(cy, parameters),\n//   },\n//   {\n//     modeName: 'modeNumEdges',\n//     textKey: 'Size',\n//     modeObj: new ModeNumEdges(cy, parameters),\n//   },\n//   {\n//     modeName: 'modeGirth',\n//     textKey: 'Girth',\n//     modeObj: new ModeGirth(cy, parameters),\n//   },\n//   {\n//     modeName: 'modeDegSequence',\n//     textKey: 'Degree_sequence',\n//     modeObj: new ModeDegSequence(cy, parameters),\n//   },\n//   {\n//     modeName: 'modeCompponents',\n//     textKey: 'Connected_components',\n//     modeObj: new ModeComponents(cy, parameters),\n//   },\n//   {\n//     modeName: 'modeCircuitRank',\n//     textKey: 'Circuit_rank',\n//     modeObj: new ModeCircuitRank(cy, parameters),\n//   },\n//   {\n//     modeName: 'modeDiameter',\n//     textKey: 'Diameter',\n//     modeObj: new ModeDiameter(cy, parameters),\n//   },\n//   {\n//     modeName: 'modeDetAdjacency',\n//     textKey: 'Adjacency_det',\n//     modeObj: new ModeDetAdjacency(cy, parameters),\n//   },\n//   {\n//     modeName: 'modeAdjacencyMatrix',\n//     textKey: 'Adjacency_matrix',\n//     modeObj: new ModeAdjacencyMatrix(cy, parameters),\n//   },\n// ];\n\n// eslint-disable-next-line no-void\nvoid i18next.use(LanguageDetector).init(i18nextOptions);\nconst localize = locI18next.init(i18next);\n\n/**\n * Specify types of global variables that are not yet defined on 'window'.\n * Technically, this declaration is not correct, because the variables are\n * only defined in main, but not before it is executed. The correct way would be\n * ```\n * declare global {\n *   interface Window {\n *     cy: cytoscape.Core | undefined;\n *     d3: typeof d3 | undefined;\n *   }\n * }\n * ```\n * But then you would need to check for 'undefined' everywhere in your code\n * where the global variables are used, which is quite cumbersome for debugging.\n *\n * A cleaner way would to do it would be to define a method on window that returns\n * a promise that resolves with cy after main is executed.\n * Similar to navigator.requestMIDIAccess().\n */\ndeclare global {\n  interface Window {\n    cy1: cytoscape.Core;\n    cy2: cytoscape.Core;\n    parameters1: Parameters;\n    parameters2: Parameters;\n    d3: typeof d3;\n    findIso: (a: void) => void;\n  }\n}\nwindow.d3 = d3;\nwindow.parameters1 = parameters1;\nwindow.parameters2 = parameters2;\n\nfunction main() {\n  // After this, window.cy is shadowing the function-local cy.\n  // This is because the globalThis pointer refers to 'window' in the browser environment.\n  // Both have no type assigned on the window object.\n  // Same for the global vs. local d3 object.\n  window.cy1 = cy1;\n  window.cy2 = cy2;\n\n  // d3.select('#output').html(i18next.t('Connected_components')); // test\n\n  const modeNull1 = new ModeNull(cy1, parameters1);\n  let primaryMode1: Mode = modeNull1;\n  // let secondaryMode: Mode = infoboxModes[0].modeObj;\n\n  primaryMode1.activate();\n  // secondaryMode.activate();\n\n  function switchPrimaryMode1(newMode: Mode) {\n    primaryMode1.deactivate();\n    primaryMode1 = newMode;\n    primaryMode1.activate();\n  }\n\n  // function switchSecondaryMode(newMode: Mode) {\n  //   secondaryMode.deactivate();\n  //   secondaryMode = newMode;\n  //   secondaryMode.activate();\n  // }\n\n  // Make Language Selector\n  d3.select('#langSelector')\n    .select('.dropdown-menu')\n    .selectAll('li')\n    .data(langList)\n    .enter()\n    .append('li')\n    .append('a')\n    .classed('dropdown-item', true)\n    .attr('href', '#')\n    .on('click', (ev, d) => {\n      i18next\n        .changeLanguage(d.isoCode)\n        .then(() => localize('.translate'))\n        .catch((reason) => {\n          // TODO: Handle the error properly instead of ignoring it.\n          // eslint-disable-next-line no-console\n          console.error(`Changing to language ${d.isoCode} failed.`, reason);\n        });\n    })\n    .text((d) => d.endonym);\n\n  // Make toolbar buttons\n  const buttons = d3\n    .select('#toolbar')\n    .selectAll('button')\n    .data(toolbarModes)\n    .enter()\n    .append('button')\n    .attr('id', (d) => `btn-${d.modeName}`);\n\n  buttons\n    .append('img')\n    .attr('src', (d) => (d.icon ? d.icon : assets.iconDijkstra))\n    .classed('toolbar-button', true);\n\n  d3.select('#btn-modeLayout')\n    .append('select')\n    .attr('id', 'selectLayout')\n    .selectAll('option')\n    .data([\n      { value: 'circle', textKey: 'Circle' },\n      { value: 'random', textKey: 'Random' },\n    ])\n    .enter()\n    .append('option')\n    .attr('value', (d) => d.value)\n    // .classed('translate', true)\n    // .attr('data-i18n', (d) => d.textKey);\n    .html((d) => d.textKey);\n\n  buttons\n    .append('div')\n    .classed('translate', true)\n    .attr('data-i18n', (d) => d.textKey);\n  // .html((d) => i18next.t(d.textKey));\n\n  buttons.on('click', (ev, d) => {\n    switchPrimaryMode1(d.modeObj);\n  });\n\n  // Make Load modal\n  d3.select('#btn-modeLoad')\n    .attr('data-bs-toggle', 'modal')\n    .attr('data-bs-target', '#exampleModal');\n\n  // Make infobox items\n  // function updateInfo() {\n  //   const infoboxItems = d3\n  //     .select('#infobox')\n  //     .selectAll<HTMLDivElement, unknown>('div.infoItem')\n  //     .data(infoboxModes);\n\n  //   const newItems = infoboxItems\n  //     .enter()\n  //     .append('div')\n  //     .attr('id', (d) => `infoItem-${d.modeName}`)\n  //     .classed('infoItem', true);\n\n  //   newItems // Info icon\n  //     .append('img')\n  //     .attr('src', assets.iconInfo)\n  //     .attr('data-bs-toggle', 'collapse')\n  //     .attr('data-bs-target', (d) => `#infoItem-text-${d.modeName}`)\n  //     .on('click', (ev: Event) => {\n  //       ev.stopPropagation();\n  //     });\n\n  //   newItems.append('div').classed('outputText', true); // container for text\n\n  //   newItems // Tip text\n  //     .append('div')\n  //     .attr('id', (d) => `infoItem-text-${d.modeName}`)\n  //     .attr('data-bs-parent', '#infobox')\n  //     .attr('data-bs-toggle', 'collapse')\n  //     .classed('tipText', true)\n  //     .classed('collapse', true)\n  //     .classed('translate', true)\n  //     .attr('data-i18n', (d) => `[html]${d.textKey}_Tip`);\n  //   // .html((d) => i18next.t(`${d.textKey}_Tip`));\n\n  //   newItems.on('click', (ev: MouseEvent, d) => {\n  //     const target = ev.currentTarget;\n  //     if (target instanceof Element) {\n  //       if (d.modeObj === secondaryMode) {\n  //         switchSecondaryMode(modeNull);\n  //         d3.select(target).classed('infoItemActive', false);\n  //       } else {\n  //         switchSecondaryMode(d.modeObj);\n  //         d3.select('.infoItemActive').classed('infoItemActive', false);\n  //         d3.select(target).classed('infoItemActive', true);\n  //       }\n  //     }\n  //   });\n\n  //   // update selection\n  //   infoboxItems\n  //     .merge(newItems)\n  //     .select('.outputText')\n  //     .html(\n  //       (d) =>\n  //         `<span class=\"translate\" data-i18n=\"[html]${d.textKey}\">\n  //         ${i18next.t(d.textKey)}\n  //         </span>:\n  //         ${d.modeObj.infobox()}`,\n  //     );\n\n  //   // if (!d3.select('.infoItemActive').empty()) {\n  //   //   d3.select('.infoItemActive').datum().modeObj.render();\n  //   if (secondaryMode !== modeNull) {\n  //     secondaryMode.render();\n  //   }\n  // }\n\n  // window.infoboxModes = infoboxModes;\n\n  // cy1.on('cm-graph-updated', updateInfo);\n  // cy2.on('cm-graph-updated', updateInfo);\n\n  // updateInfo();\n  // d3.select('.infoItem').classed('infoItemActive', true);\n\n  // //Other test functions\n  // function showGraphExport() {\n  //   const json = cy.json();\n  //   const jsonString = JSON.stringify(json, null, 4);\n  //   d3.select('#outputText').text(jsonString);\n  // }\n  // d3.select('#showJSON').on('click', showGraphExport);\n\n  localize('.translate');\n}\n\nready(main);\n","/* eslint-disable class-methods-use-this */\n// import * as d3 from 'd3-selection';\nimport { Core } from 'cytoscape';\nimport { Mode, Parameters } from './modes';\nimport graphGalleryList from '../../graph-gallery/graphs-list.json';\nimport * as agr from '../../graph-gallery/graphs-assets';\n\nexport default class ModeLoadRandom implements Mode {\n  cy;\n\n  parameters;\n\n  loadFile: (filename: string) => void;\n\n  constructor(cy: Core, parameters: Parameters) {\n    this.cy = cy;\n    this.parameters = parameters;\n\n    this.loadFile = (grId) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      fetch(agr[grId as keyof typeof agr])\n        .then((response) => response.json())\n        .then((data) => {\n          this.cy.json(data as object);\n\n          this.cy.layout({ name: 'random' }).run();\n          this.cy.fit(undefined, 30); // zoom and pan to fill the viewport\n          cy.nodes().positions((n) => n.renderedPosition()); // fix the rendered positions as model positions\n          this.cy.fit(undefined, 30); // pan to center again (zoom should be ~1)\n\n          this.parameters.nodeIndex = this.cy.nodes().map((e) => e.id());\n          this.cy.emit('cm-graph-updated');\n        });\n    };\n  }\n\n  activate = () => {\n    const numGraphs = graphGalleryList.length;\n    const idx = Math.floor(Math.random() * numGraphs);\n    this.loadFile(graphGalleryList[idx].file);\n    // eslint-disable-next-line no-console\n    console.log(`Loaded ${graphGalleryList[idx].name}`);\n  };\n\n  render() {}\n\n  infobox() {\n    return '';\n  }\n\n  deactivate = () => {};\n}\n",null,"/* eslint-disable class-methods-use-this */\n// import * as d3 from 'd3-selection';\nimport { Core } from 'cytoscape';\nimport { Mode, Parameters } from './modes';\n\nexport default class ModeIsoCheck implements Mode {\n  cy;\n\n  parameters;\n\n  findIsomorphisms: () => void;\n\n  constructor(cy: Core, parameters: Parameters) {\n    this.cy = cy;\n    this.parameters = parameters;\n\n    this.findIsomorphisms = () => {\n      if (\n        window.Worker &&\n        this.parameters.isoTarget &&\n        this.parameters.isoTargetParams\n      ) {\n        const worker = new Worker(\n          new URL('./sgiso_worker.ts', import.meta.url),\n          {\n            type: 'module',\n          },\n        );\n        const cy1 = this.cy;\n        const cy2 = this.parameters.isoTarget;\n        const parameters1 = this.parameters;\n        const parameters2 = this.parameters.isoTargetParams;\n\n        const A = cy1.elements().utils().adjacencyMatrix();\n        const B = cy2.elements().utils().adjacencyMatrix();\n\n        worker.postMessage([B, A]);\n\n        worker.onmessage = (e) => {\n          // console.log(e.data);\n          if ((e.data as number[][][]).length > 0) {\n            const morphism = (e.data as number[][][])[0];\n            cy1\n              .layout({\n                name: 'preset',\n                animate: true,\n                animationDuration: 2000,\n                positions: (cy1node: string) => {\n                  const cy1nodeId = (\n                    cy1node as unknown as cytoscape.NodeSingular\n                  ).id();\n                  const idx1 = parameters1.nodeIndex.indexOf(cy1nodeId);\n                  const idx2 = morphism[idx1].indexOf(1);\n                  const cy2nodeId = parameters2.nodeIndex[idx2];\n                  const finalpos = cy2.$(`#${cy2nodeId}`).position();\n                  // eslint-disable-next-line no-console\n                  console.log(cy1nodeId, idx1, idx2, cy2nodeId);\n                  return finalpos;\n                },\n              })\n              .run();\n            this.parameters.outputContainer.textContent = 'Isomorphism found!';\n          } else {\n            this.parameters.outputContainer.textContent =\n              'Isomorphism NOT found!';\n          }\n        };\n      } else {\n        // eslint-disable-next-line no-console\n        console.log(\"Your browser doesn't support web workers.\");\n      }\n    };\n\n    window.findIso = this.findIsomorphisms;\n  }\n\n  activate = () => {\n    this.findIsomorphisms();\n  };\n\n  render() {}\n\n  infobox() {\n    return '';\n  }\n\n  deactivate = () => {\n    this.parameters.outputContainer.textContent = '';\n  };\n}\n","\"use strict\";\n\nmodule.exports = function (workerUrl, origin, isESM) {\n  if (origin === self.location.origin) {\n    // If the worker bundle's url is on the same origin as the document,\n    // use the worker bundle's own url.\n    return workerUrl;\n  } else {\n    // Otherwise, create a blob URL which loads the worker bundle with `importScripts`.\n    var source = isESM ? 'import ' + JSON.stringify(workerUrl) + ';' : 'importScripts(' + JSON.stringify(workerUrl) + ');';\n    return URL.createObjectURL(new Blob([source], {\n      type: 'application/javascript'\n    }));\n  }\n};","let workerURL = require('./helpers/get-worker-url');\nlet bundleURL = require('./helpers/bundle-url');\nlet url = bundleURL.getBundleURL('eSxpj') + require('./helpers/bundle-manifest').resolve(\"7xBTE\");module.exports = workerURL(url, bundleURL.getOrigin(url), false);"],"names":["parcelRequire","register","JSON","parse","$22BvR","$j36hr","$9c199afd2e21d6fc$export$2e2bcd8739ae039","ModeLoadRandom","cy","parameters","$parcel$interopDefault","$fvlsR","this","numGraphs","$9L71O","length","idx","Math","floor","random","_this","loadFile","file","console","log","concat","name","grId","fetch","$2D7Sc","then","response","json","data","_this1","layout","run","fit","undefined","nodes","positions","n","renderedPosition","nodeIndex","map","e","id","emit","key","$b1dcaf659c9d437c$exports","workerUrl","origin","isESM","self","location","source","stringify","URL","createObjectURL","Blob","type","$60ac240f7279c6f4$var$url","$cP1aT","getBundleURL","resolve","$60ac240f7279c6f4$exports","getOrigin","$e35e271fd9a451b8$export$2e2bcd8739ae039","ModeIsoCheck","findIsomorphisms","outputContainer","textContent","window","Worker","isoTarget","isoTargetParams","worker","cy1","cy2","parameters1","parameters2","A","elements","utils","adjacencyMatrix","B","postMessage","onmessage","morphism","animate","animationDuration","cy1node","cy1nodeId","idx1","indexOf","idx2","cy2nodeId","finalpos","$","position","findIso","$57f07d06aad85111$var$cy1","$2hmjV","$kVa2A","$g00W3","cyOptions","container","document","getElementById","$57f07d06aad85111$var$cy2","$57f07d06aad85111$var$parameters2","idNodeCount","idEdgeCount","$57f07d06aad85111$var$parameters1","$57f07d06aad85111$var$toolbarModes","modeName","textKey","icon","$efzB6","iconClear","modeObj","$4Jbmd","default","iconExport","$6tNEv","iconImport","$brS0K","iconLoad","$c1uEy","iconPointer","$bn6f8","iconNode","$eVhA1","iconEdge","$g3IaC","iconQuestion","iconCheck","$kBTuX","use","$b8MII","init","i18nextOptions","$57f07d06aad85111$var$localize","$22twO","d3","$48EYa","$lgcSj","primaryMode1","activate","select","selectAll","langList","enter","append","classed","attr","on","ev","d","changeLanguage","isoCode","catch","reason","error","text","endonym","buttons","iconDijkstra","value","html","newMode","deactivate"],"version":3,"file":"identify.b91bbfe8.js.map"}