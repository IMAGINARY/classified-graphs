{"mappings":"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AS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEfA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEfA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEfA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEfA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEfA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEfA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEfA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEfA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEfA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEfA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEfA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEfA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEfA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAErBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAErBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAErBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAErBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAErBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAErBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAErBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAErBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAErBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAExBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAExBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAExBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAExBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAExBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAExBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAExBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAExBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAExBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAGxB,MAAMC,EAAa,CACjBhJ,KAAM,OACNwG,YAAa,CAAEC,GAAI,EAAGC,GAAI,EAAGC,GAAI,IAAKC,GAAI,M,IA0B5CqC,EAvBAjL,iBACE,MAAM+I,EAAY,GACZC,EAAc,GAEpB,IAAK,IAAIrD,EAAI,EAAGA,EAAIoF,EAASnG,OAAQe,GAAK,EAAG,CAC3C,MACMzF,EAAK8G,EADD+D,EAASpF,IAGbvF,EAAK,CACT6I,OAAQ,UACRC,QAAS,eAAevD,UACxBwD,QAAS,gBAAgBxD,UACzByD,QAAS,eAAezD,UACxBhE,KAAM,KAAKgE,IACX0D,WAAY/B,EAAkBpH,IAGhC6I,EAAUO,KAAKlJ,GACf4I,EAAYM,KAAKrJ,EAAaC,EAAI8K,EAAY5K,G,CAEhD,OAAO2C,QAAQwG,WAAWP,GAAanI,MAAK,IAAMkI,G,ECzhBpDmC,QAAQC,gBAAgB,GAExBpI,QAAQC,IAAI,CACV6F,EAAqB,GACrBkB,IACAe,IACAG,MAECpK,MAAMuK,IACL,MAAMrC,EAAYqC,EAAIC,OACtB,OAAOtI,QAAQC,IAAI,CAACC,EAAa8F,GAAY7F,EAAe6F,IAAY,IAEzElI,MAAK,KACJQ,QAAQC,IAAI,yBACZ4J,QAAQI,MAAM,IAEf/J,OAAOC,IACNH,QAAQI,MAAMD,EAAI","sources":["src/ts/graph-gallery-scripts/registration-tools.ts","src/ts/invariants/girth.ts","src/ts/invariants/circuitRank.ts","src/ts/invariants/diameter.ts","src/ts/utils/adjacency-matrix.ts","src/ts/graph-gallery-scripts/generating-tools.ts","src/ts/graph-gallery-scripts/make-complete-graphs.ts","src/ts/graph-gallery-scripts/make-trivalent-graphs.ts","src/ts/graph-gallery-scripts/make-more-graphs.ts","src/ts/graph-gallery-scripts/make-more-graphs-2.ts","src/ts/graph-gallery-scripts/generate-graphs.ts"],"sourcesContent":["/* eslint-disable */\n/* eslint-disable no-console */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport cytosnap from 'cytosnap';\nimport * as fs from 'fs/promises';\n// import { GraphRegister } from './register-graphs';\n\ntype GraphRegister = {\n  family: string;\n  name_en: string;\n  name_fr: string;\n  name_de: string;\n  file: string;\n  invariants: {\n    numNodes: number;\n    numEdges: number;\n    girth: number | null; // json does not support Infinity\n    degSequence: number[];\n    components: number;\n    circuitRank: number;\n    diameter: number | null; // json does not support Infinity\n    detAdjacency: number | undefined;\n  };\n};\n\nconst snap = cytosnap();\n\n// list of layout extensions to use\n// NB you must `npm install` these yourself for your project\n// cytosnap.use([ 'cytoscape-dagre', 'cytoscape-cose-bilkent' ]);\n\nasync function applyLayout(\n  cy: cytoscape.Core,\n  layout: cytoscape.LayoutOptions,\n): Promise<cytoscape.EventObject> {\n  const lay = cy.layout(layout);\n  const prom = lay.promiseOn('layoutstop');\n  lay.run();\n  return prom;\n}\n\nasync function makeFile(cy: cytoscape.Core, filename: string): Promise<void> {\n  const json = cy.json();\n  const jsonString = JSON.stringify(json, null, 4);\n\n  return fs\n    .writeFile(filename, jsonString)\n    .then(() => {\n      console.log(`Saved file ${filename}`);\n    })\n    .catch((err) => {\n      console.error(err);\n    });\n}\n\nasync function makeThumb(cy: cytoscape.Core, filename: string): Promise<void> {\n  return snap\n    .start()\n    .then(() =>\n      snap.shot({\n        elements: (cy.json() as cytoscape.Core).elements,\n        layout: { name: 'preset' },\n        style: [\n          // http://js.cytoscape.org/#style\n          {\n            selector: 'node',\n            style: {\n              'background-color': 'red',\n            },\n          },\n          {\n            selector: 'edge',\n            style: {\n              'line-color': 'red',\n              'curve-style': 'bezier',\n            },\n          },\n        ],\n        resolvesTo: 'base64uri',\n        format: 'png',\n        width: 640,\n        height: 480,\n        background: 'transparent',\n      }),\n    )\n    .then(async (img: string) => {\n      // https://stackoverflow.com/questions/43487543/writing-binary-data-using-node-js-fs-writefile-to-create-an-image-file\n      const data = img.replace(/^data:image\\/\\w+;base64,/, '');\n      const buf = Buffer.from(data, 'base64');\n      return fs\n        .writeFile(filename, buf)\n        .then(() => {\n          console.log('Saved thumbnail ' + filename);\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n    });\n}\n\nasync function processGraph(\n  cy: cytoscape.Core,\n  layoutOpts: cytoscape.LayoutOptions,\n  id: GraphRegister,\n): Promise<void | GraphRegister> {\n  const layouted = applyLayout(cy, layoutOpts); // async, returns promise\n\n  const fileMade = layouted\n    .then(() => makeFile(cy, `./src/graph-gallery/data/${id.file}.data`))\n    .catch((err) => {\n      console.error(err);\n    });\n\n  const thumbMade = layouted\n    .then(() => makeThumb(cy, `./src/graph-gallery/data/${id.file}.png`))\n    .catch((err) => {\n      console.error(err);\n    });\n\n  // if makeFile and makeThumb are successful, the promise resolves the graph id.\n  return Promise.all([fileMade, thumbMade])\n    .then(() => id)\n    .catch((err) => {\n      console.error(err);\n      console.log('The following graph could not be created:');\n      console.log(id);\n    });\n}\n\n/* Register graphs in the graphs-list.json */\n\nasync function registerList(data: GraphRegister[]): Promise<void> {\n  const filename = 'src/graph-gallery/graphs-list.json';\n  return fs.writeFile(filename, JSON.stringify(data));\n}\n\nasync function registerAssets(data: GraphRegister[]): Promise<void> {\n  const filename = 'src/graph-gallery/graphs-assets.ts';\n  const text = data.map((d) =>\n    `export const ${d.file} = new URL('../graph-gallery/data/${d.file}.data', import.meta.url).href;`.concat(\n      `export const ${d.file}_Icon = new URL('../graph-gallery/data/${d.file}.png', import.meta.url).href;`,\n    ),\n  );\n  return fs.writeFile(filename, text);\n}\n\nexport { GraphRegister, processGraph, registerList, registerAssets };\n\n// NOTE\n// The extension \".data\" is to avoid problems with Parcel bundler. If the extension is .json,\n// then parcel does not import the dependency correctly.\n","import cytoscape, {\n  EdgeCollection,\n  Collection,\n  CollectionReturnValue,\n} from 'cytoscape';\n\n// Girth of a graph\n//\n// Definition:\n// The girth of an undirected graph is the length of a shortest cycle contained in the graph.\n// If there are no cycles in the graph, the girth is defined to be infinity by convention.\n//\n// Algorithm:\n// 1. Compute a spanning tree (use kruskal() method).\n// 2. The complement of the spanning tree is the set of back-edges.\n//    Each back-edge is on a cycle (“closing it”).\n// 3. For each back-edge: remove it from the graph and find the shortest distance\n//    between its endpoints.\n//    Use aStar() method.\n//    We can avoid removing the edge by assigning it an infinite weight.\n// 4. The cycle length is this distance + 1\n// 5. Find the min cycle length\n\ntype GirthReturnValue = {\n  path: CollectionReturnValue;\n  value: number;\n};\n\nfunction girth(collection: Collection): GirthReturnValue {\n  const spanningTree = collection.kruskal(() => 1);\n  const backEdges = spanningTree.absoluteComplement().edges();\n\n  const cycles = backEdges.map((backEdge) => {\n    const edgeWeights = (e: EdgeCollection): number =>\n      backEdge === e ? Number.POSITIVE_INFINITY : 1;\n\n    const aS = collection.aStar({\n      root: backEdge.source(),\n      goal: backEdge.target(),\n      weight: edgeWeights,\n    });\n\n    return aS.path.union(backEdge);\n  });\n\n  const noCycle = {\n    cycle: cytoscape().collection(),\n    length: Number.POSITIVE_INFINITY,\n  };\n\n  const minCycle = cycles\n    .map((cycle) => ({ cycle, length: cycle.edges().size() }))\n    .reduce((acc, cycle) => (acc.length < cycle.length ? acc : cycle), noCycle);\n\n  return { path: minCycle.cycle, value: minCycle.length };\n}\n\nexport default girth;\n","import { Collection, CollectionReturnValue } from 'cytoscape';\n\n// Circuit Rank of a graph\n//\n// Definition:\n// The circuit rank of an undirected graph is the number of independent cycles contained in the graph.\n// Also known as the 1st Betti number (the 0th Betti number is the number of connected components, and\n// all the n-th Betti numbers for n>1 are zero since a graph is one-dimensional space).\n//\n// Compare with Girth algorithm\n//\n// Algorithm:\n// 1. Compute a spanning tree (use kruskal() method).\n// 2. The complement of the spanning tree is the set of back-edges.\n//    Each back-edge is on a cycle (“closing it”).\n// 3. For each back-edge: find a path in the spanning tree\n//    joining its endpoints (use aStar() method).\n//    Add the back-edge, making thus a cycle.\n// 4. List all the cycles\n\nfunction circuitRank(collection: Collection): CollectionReturnValue[] {\n  const spanningTree = collection.kruskal(() => 1);\n\n  const backEdges = spanningTree.absoluteComplement().edges();\n\n  const cycles = backEdges.map((backEdge) => {\n    const aS = spanningTree.aStar({\n      root: backEdge.source(),\n      goal: backEdge.target(),\n    });\n\n    return aS.path.union(backEdge);\n  });\n\n  return cycles;\n}\n\nexport default circuitRank;\n","import cytoscape, { Collection, CollectionReturnValue } from 'cytoscape';\n\n// Diameter of a graph\n//\n// Definition:\n// The diameter of a graph is the longest distance between two vertices.\n//\n// Algorithm:\n// 1. Compute the distance between any pair of vertices (use floydWarshall() method)\n// 2. Find the maximum\n//\n// TO DO: use a better (non-factorial) algorithm\n\ntype DiameterReturnValue = {\n  path: CollectionReturnValue;\n  value: number;\n};\n\nfunction diameter(collection: Collection): DiameterReturnValue {\n  const fW = collection.floydWarshall({ weight: () => 1 });\n  const nodes = collection.nodes();\n  const N = nodes.length;\n\n  let path = cytoscape().collection();\n  let distance = -Infinity;\n\n  for (let i = 0; i < N; i += 1) {\n    for (let j = i; j < N; j += 1) {\n      if (fW.distance(nodes[i], nodes[j]) > distance) {\n        distance = fW.distance(nodes[i], nodes[j]);\n        path = fW.path(nodes[i], nodes[j]).union([nodes[i], nodes[j]]);\n        // we add the two endpoints in case there is no path between them.\n      }\n    }\n  }\n\n  return { path, value: distance };\n}\n\nexport default diameter;\n","import { NodeSingular, Collection } from 'cytoscape';\n\n/* NodeIndexer is a function that assigns an integer index value to each Node */\n\nexport type NodeIndexer = (n: NodeSingular) => number;\n\nexport function defaultNodeIndexer(collection: Collection): NodeIndexer {\n  const nodes = collection.nodes();\n  const map = new Map<string, number>(nodes.map((n, i) => [n.id(), i]));\n  return (n) => {\n    const idx = map.get(n.id());\n    if (typeof idx === 'undefined')\n      throw new RangeError(`Unknown node: ${n.json()}`);\n    return idx;\n  };\n}\n\n/* Adjacency matrix\nThe entry m[i][j] is the number of edges that go from node[i] to node[j].\n\nFor undirected graphs (default), this means that the matrix is symmetric. \nIf the option directed=true is specified, then each edge is counted only \nonce, for its source and target.\nIn the case of a loop of an undirected graph, the corresponding diagonal \nentry is increased by 2 (because the edge can be followed in the two \nsenses).\n\nIf the adjacencyMatrix is called for a collection with m nodes, which is \nsmaller than the entire graph of order n, then two options are possible: \nIf subgraph=false (default), then the collection is treated as a graph, \nand an mxm matrix is returned.\nIf subgraph=true, then an nxn matrix is returned, but only the edges of\nthe collection are counted, making all the rest of the rows/columns zero \n(like disconnected vertices).\n\nWeight of edges is not taken into account.\n*/\n\nfunction adjacencyMatrix(\n  collection: Collection,\n  options: {\n    indexing?: NodeIndexer;\n    directed?: boolean;\n    subgraph?: boolean;\n  } = {},\n): number[][] {\n  const indexOf = options.indexing ?? defaultNodeIndexer(collection);\n  const directed = options.directed ?? false;\n  const subgraph = options.subgraph ?? false;\n\n  const nodes = collection.nodes();\n  const parentCy = nodes[0].cy();\n\n  const numNodes = subgraph ? parentCy.nodes().size() : nodes.size();\n\n  const m = new Array(numNodes)\n    .fill(null)\n    .map(() => new Array<number>(numNodes).fill(0));\n\n  collection.edges().forEach((e) => {\n    const source = e.source();\n    const target = e.target();\n\n    if (source.isNode() && target.isNode()) {\n      const i = indexOf(e.source());\n      const j = indexOf(e.target());\n      m[i][j] += 1;\n      if (!directed) {\n        m[j][i] += 1;\n      }\n    }\n  });\n\n  return m;\n}\n\nexport default adjacencyMatrix;\n","import cytoscape from 'cytoscape';\nimport { det } from 'mathjs';\nimport girth from '../invariants/girth';\nimport circuitRank from '../invariants/circuitRank';\nimport diameter from '../invariants/diameter';\nimport adjacencyMatrix from '../utils/adjacency-matrix';\n\n/* Can't load extensions in headless mode (no window object) ?? */\n// import invariants from '../cytoscape-extensions/invariants';\n// import utils from '../cytoscape-extensions/utils';\n\n// cytoscape.use(invariants);\n// cytoscape.use(utils);\n\nfunction graphFromAdjacencyMatrix(M: number[][]): cytoscape.Core {\n  const cy = cytoscape();\n\n  const N = M.length; // we assume square symmetric matrix,\n\n  // add vertices\n  for (let i = 0; i < N; i += 1) {\n    cy.add({ group: 'nodes', data: { id: `N-${i}` } });\n  }\n\n  // add edges\n  for (let i = 0; i < N; i += 1) {\n    for (let j = i; j < N; j += 1) {\n      // add the correct amount of edges\n      for (let l = 0; l < M[i][j]; l += 1) {\n        cy.add({\n          group: 'edges',\n          data: {\n            source: cy.nodes()[i].id(),\n            target: cy.nodes()[j].id(),\n            id: `E-${i}-${j}-${l}`,\n          },\n        });\n      }\n    }\n  }\n  return cy;\n}\n\nfunction computeInvariants(cy: cytoscape.Core) {\n  const dSeq = cy\n    .elements()\n    .nodes()\n    .map((n) => n.degree(true))\n    .sort((a, b) => b - a);\n\n  let d;\n  if (cy.nodes().size() > 0) {\n    const A = adjacencyMatrix(cy.elements());\n    d = det(A);\n  }\n\n  return {\n    numNodes: cy.elements().nodes().size(),\n    numEdges: cy.elements().edges().size(),\n    girth: girth(cy.elements()).value,\n    degSequence: dSeq,\n    components: cy.elements().components().length,\n    circuitRank: circuitRank(cy.elements()).length,\n    diameter: diameter(cy.elements()).value,\n    detAdjacency: d,\n  };\n}\n\nexport { graphFromAdjacencyMatrix, computeInvariants };\n","/* eslint-disable no-console */\n\nimport cytoscape from 'cytoscape';\nimport { computeInvariants } from './generating-tools';\nimport { GraphRegister, processGraph } from './registration-tools';\n\nconsole.log('Creating files for Complete graphs');\n\n/* Define the function that creates a graph, for any given parameter(s) */\nfunction makeGraph(N: number): cytoscape.Core {\n  const cy = cytoscape();\n\n  for (let i = 0; i < N; i += 1) {\n    cy.add({ group: 'nodes', data: { id: `N-${i}` } });\n    for (let j = 0; j < i; j += 1) {\n      cy.add({\n        group: 'edges',\n        data: {\n          source: cy.nodes()[j].id(),\n          target: cy.nodes()[i].id(),\n          id: `E-${j}-${i}`,\n        },\n      });\n    }\n  }\n  // cy.layout({ name: 'circle', radius: 200 }).run();\n  // cy.zoom(1);\n  // cy.panBy({ x: 600, y: 500 });\n\n  return cy;\n}\n\nconst layoutOpts = {\n  name: 'circle',\n  boundingBox: { x1: 0, y1: 0, x2: 300, y2: 300 },\n};\n\n/* Create a list of graphs */\nasync function createCompleteGraphs(\n  maxN: number,\n): Promise<GraphRegister[] | void> {\n  const graphList = [] as GraphRegister[];\n  const promiseList = [] as Promise<GraphRegister | void>[];\n\n  for (let i = 2; i <= maxN; i += 1) {\n    const cy = makeGraph(i);\n    const id = {\n      family: 'Complete',\n      name_en: `Complete of order ${i}`,\n      name_fr: `Complet d'ordre ${i}`,\n      name_de: `Vollständiger der Ordnung ${i}`,\n      file: `complete_${i}`,\n      invariants: computeInvariants(cy),\n    };\n\n    graphList.push(id);\n    promiseList.push(processGraph(cy, layoutOpts, id));\n  }\n\n  return Promise.allSettled(promiseList).then(() => graphList);\n  // promise resolves to the list of graphs\n}\n\nexport default createCompleteGraphs;\n","/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-console */\n\nimport cytoscape from 'cytoscape';\nimport { computeInvariants } from './generating-tools';\nimport { GraphRegister, processGraph } from './registration-tools';\n\nconsole.log('Creating files for trivalent graphs');\n\nconst matrices = [\n  '2  1 1 1',\n  '2  0 3 0',\n  '4  1 0 0 1 1 0 1 1 1 0',\n  '4  0 0 1 2 1 0 1 1 0 0',\n  '4  0 0 2 1 1 0 1 0 1 0',\n  '4  0 0 2 1 0 1 2 0 0 0',\n  '4  0 1 1 1 0 1 1 0 1 0',\n  '6  0 0 0 0 2 1 1 0 0 1 0 1 0 0 1 1 0 1 0 0 0',\n  '6  1 0 0 0 1 0 1 0 0 1 0 1 0 0 1 1 0 1 0 1 0',\n  '6  0 0 0 1 1 1 0 0 0 2 1 1 0 0 1 1 0 0 0 0 0',\n  '6  0 0 0 2 1 0 0 0 0 2 1 1 0 0 1 0 0 1 0 0 0',\n  '6  0 0 0 1 1 1 1 0 0 1 0 1 0 0 1 1 0 0 0 1 0',\n  '6  0 0 0 1 0 2 0 0 0 2 1 1 0 1 0 1 0 0 0 0 0',\n  '6  0 0 0 2 0 1 0 0 0 2 1 1 0 1 0 0 0 1 0 0 0',\n  '6  0 0 0 2 0 1 1 0 0 1 0 1 0 1 0 0 0 1 0 1 0',\n  '6  0 0 0 2 1 0 0 0 1 0 2 0 0 2 1 0 0 0 0 0 0',\n  '6  0 0 0 1 1 1 0 0 2 0 1 0 0 2 1 0 0 0 0 0 0',\n  '6  0 0 0 1 1 1 1 0 1 0 0 0 0 2 1 0 0 1 0 0 0',\n  '6  0 0 0 1 1 1 1 0 1 0 0 1 0 1 0 0 0 1 0 1 0',\n  '6  0 0 0 1 1 1 0 0 1 1 1 1 0 1 0 0 0 1 0 0 0',\n  '6  0 0 0 1 1 1 0 0 1 1 1 0 1 1 1 0 0 0 0 0 0',\n  '6  0 0 1 0 1 1 0 0 2 0 1 0 0 2 0 0 0 1 0 0 0',\n  '6  0 0 1 1 0 1 0 0 1 1 1 0 0 2 0 0 0 1 0 0 0',\n  '6  0 0 1 1 1 0 0 0 1 1 1 0 0 1 1 0 0 1 0 0 0',\n  '8  0 0 0 0 0 2 1 0 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 1 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 0 0 1 2 0 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 0 1 1 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 0 2 0 1 1 0 0 0 1 0 0 0 0 0 0 2 1 1 0 0 1 0 1 0 0 1 0 0 0 0 0 0',\n  '8  1 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 2 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0',\n  '8  1 0 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 1 0 0 1 0 0 1 0 1 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 1 0 0 0 1 0 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0',\n  '8  0 0 0 0 2 0 1 0 0 0 0 0 2 1 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 0 2 0 1 0 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 0 2 1 0 0 0 0 0 2 1 1 0 0 0 1 1 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 2 1 0 0 0 0 0 0 2 1 0 0 0 0 0 2 1 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 0 2 1 0 1 0 0 0 1 0 1 0 0 0 1 1 0 0 0 0 0 0 0 1 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 0 2 0 1 0 0 0 0 2 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 2 1 0 0 0 0 0 0 2 0 1 0 0 0 0 2 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 0 1 1 0 0 0 1 0 0 0 0 0 0 2 1 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 0 0 1 0',\n  '8  0 0 0 0 2 1 0 0 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 0 0 1 0',\n  '8  0 0 0 0 1 1 0 1 1 0 0 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 1 0 1 0',\n  '8  0 0 0 0 1 0 0 2 0 0 0 0 1 2 0 0 0 0 2 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 2 0 0 1 0 0 0 0 1 2 0 0 0 0 2 0 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 2 0 0 1 0 0 0 0 1 2 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 0 0 0 2 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0',\n  '8  0 0 0 0 1 0 1 1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 1 1 0 0 1 0 0 0',\n  '8  0 0 0 0 1 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 2 0 0 0 0 0 0 1 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 0 0 0 1 1 1 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 1 2 0 0 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 0 0 1 0',\n  '8  0 0 0 0 1 2 0 0 0 0 0 1 0 2 0 0 0 0 1 1 1 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 2 1 0 0 0 0 0 1 0 2 0 0 0 0 2 0 1 0 0 0 1 2 0 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 0 0 0 2 0 1 0 0 0 2 1 0 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 1 0 2 0 0 0 0 2 0 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 1 0 0 1 0 0 0 0 0 2 1 0 0 0 0 0 0 1 0 0 0',\n  '8  0 0 0 0 2 1 0 0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 2 1 0 0 0 0 0 0 1 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 1 0 2 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0 1 0',\n  '8  0 0 0 0 1 2 0 0 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 2 0 1 0 0 0 0 1 1 1 0 0 2 0 1 0 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 1 0 1 1 0 0 0 2 1 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 2 0 1 0 0 0 0 1 1 1 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0',\n  '8  0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 0 1 1 1 1 0 1 0 0 0 0 1 0 0 0 1 0 0 0',\n  '8  1 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 1 1 0 0 1 1 1 0 0 1 0 0 0 1 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 0 0 0 1 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 1 0 0 0 0 1 1 0 1 0 0 1 0 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 1 0 0 1 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0',\n  '8  0 0 0 2 0 0 1 0 0 0 0 1 0 1 1 0 0 0 1 1 1 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0',\n  '8  0 0 0 2 0 0 1 0 0 0 0 2 0 1 0 0 0 0 2 1 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 2 0 0 1 0 0 0 0 2 0 1 0 0 0 0 2 0 1 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 0 0 0',\n  '8  0 0 0 1 0 2 0 0 0 0 0 1 0 1 1 0 0 0 1 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 1 0 2 0 0 0 0 0 2 0 1 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0',\n  '8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 0 0 0 2 1 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 0 0 0 0 2 1 0 0 2 0 0 1 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 0 1 0 0 0 2 0 1 0 0 0 0 0 2 1 0 0 2 0 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 1 0 0 0 2 0 0 1 0 0 0 0 0 0 0 1 0',\n  '8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 0 1 0 0 2 0 0 0 0 2 0 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 1 0 0 0 2 0 0 0 0 1 1 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 1 0 0 0 0 1 1 0 1 1 0 0 1 0 0 0 0 0 1 1 0 0 1 1 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 1 0 1 0 0 1 1 0 0 0 0 0 0',\n  '8  0 0 0 1 1 0 0 1 0 0 0 1 1 0 1 0 0 0 2 1 0 0 0 0 2 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 1 1 0 0 1 0 0 0 1 2 0 0 0 0 0 1 1 1 0 0 0 2 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 1 1 0 1 0 0 0 0 1 1 0 1 0 0 0 2 1 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 1 1 0 1 0 0 0 0 1 2 0 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1 2 0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 2 0 0 1 0 0 0 0 1 1 1 0 0 0 1 1 0 1 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 1 0 1 0 1 0 0 0 1 1 1 0 0 0 1 0 1 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0',\n  '8  0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1 1 0 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 0 0 1 0 1 1 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0',\n  '8  0 0 0 1 1 0 0 1 0 0 0 0 1 1 1 0 0 0 1 2 0 0 2 0 0 0 0 0 0 0 0 0 1 0 0 0',\n];\n\nfunction graphFromUpperTriangular(M: string): cytoscape.Core {\n  const cy = cytoscape();\n\n  const g = (Number(M.split('  ')[0]) + 2) / 2;\n  // const N = 2 * g - 2;\n  const upper = M.split('  ')[1].split(' ').map(Number);\n\n  // to index the upper triangular matrix easily\n  let k = 0;\n\n  // first add all vertices\n  for (let i = 0; i < 2 * g - 2; i += 1) {\n    cy.add({ group: 'nodes', data: { id: `N-${i}` } });\n  }\n\n  // then the edges\n  for (let i = 0; i < 2 * g - 2; i += 1) {\n    for (let j = i; j < 2 * g - 2; j += 1) {\n      // add the correct amount of edges\n      for (let l = 0; l < upper[k]; l += 1) {\n        cy.add({\n          group: 'edges',\n          data: {\n            source: cy.nodes()[i].id(),\n            target: cy.nodes()[j].id(),\n            id: `E-${i}-${j}-${l}`,\n          },\n        });\n      }\n\n      // increment counter for upper triangular matrix indexing\n      k += 1;\n    }\n  }\n\n  return cy;\n}\n\nconst layoutOpts = {\n  name: 'cose',\n  boundingBox: { x1: 0, y1: 0, x2: 300, y2: 300 },\n};\n\n/* Create a list of graphs */\nasync function createTrivalentGraphs(): Promise<GraphRegister[] | void> {\n  const graphList = [] as GraphRegister[];\n  const promiseList = [] as Promise<GraphRegister | void>[];\n\n  let i = 0;\n  let previousGenus = 1;\n\n  for (const M of matrices) {\n    const g = (Number(M.split('  ')[0]) + 2) / 2;\n\n    // reset the counter if necessary\n    if (g !== previousGenus) i = 0;\n    previousGenus = g;\n\n    const cy = graphFromUpperTriangular(M); // sync\n\n    const id = {\n      family: 'Trivalent',\n      name_en: `Trivalent ${g}<sub>${i}</sub>`,\n      name_fr: `Graphe cubique ${g}<sub>${i}</sub>`,\n      name_de: `Kubischer Graph ${g}<sub>${i}</sub>`,\n      file: `trivalent_${g}_${i}`,\n      invariants: computeInvariants(cy),\n    };\n\n    graphList.push(id);\n    promiseList.push(processGraph(cy, layoutOpts, id));\n    i += 1;\n  }\n\n  return Promise.allSettled(promiseList).then(() => graphList);\n  // promise resolves to the list of graphs\n}\n\nexport default createTrivalentGraphs;\n","/* eslint-disable no-console */\nimport cytoscape from 'cytoscape';\nimport { GraphRegister, processGraph } from './registration-tools';\nimport {\n  computeInvariants,\n  graphFromAdjacencyMatrix,\n} from './generating-tools';\n\nconsole.log('Creating files for More graphs');\n\nconst graphs = [] as {\n  cy: cytoscape.Core;\n  layout: cytoscape.LayoutOptions;\n  id: GraphRegister;\n}[];\n\n/* \nKönigsberg graph\nhttps://en.wikipedia.org/wiki/Seven_Bridges_of_K%C3%B6nigsberg\n*/\n{\n  const cy = graphFromAdjacencyMatrix([\n    [0, 1, 0, 2],\n    [1, 0, 1, 1],\n    [0, 1, 0, 2],\n    [2, 1, 2, 0],\n  ]);\n\n  const layout = {\n    name: 'circle',\n    boundingBox: { x1: 0, y1: 0, x2: 300, y2: 300 },\n  };\n\n  const id = {\n    family: 'Special',\n    name_en: `Königsberg`,\n    name_fr: `Königsberg`,\n    name_de: `Königsberg`,\n    file: `konigsberg`,\n    invariants: computeInvariants(cy),\n  };\n\n  graphs.push({ cy, layout, id });\n}\n\n/*\nPlatonic solids: Cube\nhttps://en.wikipedia.org/wiki/File:3-cube_column_graph.svg\n*/\n{\n  const cy = graphFromAdjacencyMatrix([\n    [0, 1, 1, 0, 1, 0, 0, 0],\n    [1, 0, 0, 1, 0, 1, 0, 0],\n    [1, 0, 0, 1, 0, 0, 1, 0],\n    [0, 1, 1, 0, 0, 0, 0, 1],\n    [1, 0, 0, 0, 0, 1, 1, 0],\n    [0, 1, 0, 0, 1, 0, 0, 1],\n    [0, 0, 1, 0, 1, 0, 0, 1],\n    [0, 0, 0, 1, 0, 1, 1, 0],\n  ]);\n\n  const layout = {\n    name: 'cose',\n    boundingBox: { x1: 0, y1: 0, x2: 300, y2: 300 },\n  };\n\n  const id = {\n    family: 'Platonic',\n    name_en: `Cube`,\n    name_fr: `Cube`,\n    name_de: `Würfel`,\n    file: `cube`,\n    invariants: computeInvariants(cy),\n  };\n\n  graphs.push({ cy, layout, id });\n}\n\n/*\nPlatonic solids: Octahedral\n// https://en.wikipedia.org/wiki/File:Octahedral_graph.circo.svg\n*/\n\n{\n  const cy = graphFromAdjacencyMatrix([\n    [0, 1, 1, 0, 1, 1],\n    [1, 0, 1, 1, 0, 1],\n    [1, 1, 0, 1, 1, 0],\n    [0, 1, 1, 0, 1, 1],\n    [1, 0, 1, 1, 0, 1],\n    [1, 1, 0, 1, 1, 0],\n  ]);\n\n  const layout = {\n    name: 'circle',\n    boundingBox: { x1: 0, y1: 0, x2: 300, y2: 300 },\n  };\n\n  const id = {\n    family: 'Platonic',\n    name_en: `Octahedron`,\n    name_fr: `Octaèdre`,\n    name_de: `Oktaeder`,\n    file: `octahedron`,\n    invariants: computeInvariants(cy),\n  };\n\n  graphs.push({ cy, layout, id });\n}\n\n// https://en.wikipedia.org/wiki/File:Dodecahedral_graph.neato.svg\n// https://en.wikipedia.org/wiki/File:Icosahedron_graph.svg\n// Petersen graph\n// https://en.wikipedia.org/wiki/Petersen_graph\n// Three utilities graph\n// https://en.wikipedia.org/wiki/Three_utilities_problem\n// already there! = 4_13\n// Chvatal graph\n// https://en.wikipedia.org/wiki/Chv%C3%A1tal_graph\n// Bidiakis cube\n// https://en.wikipedia.org/wiki/Bidiakis_cube\n\n/* \nMoser spindle\nhttps://en.wikipedia.org/wiki/Moser_spindle\n*/\n{\n  const cy = graphFromAdjacencyMatrix([\n    [0, 1, 1, 1, 1, 0, 0],\n    [1, 0, 0, 1, 0, 1, 0],\n    [1, 0, 0, 0, 1, 0, 1],\n    [1, 1, 0, 0, 0, 1, 0],\n    [1, 0, 1, 0, 0, 0, 1],\n    [0, 1, 0, 1, 0, 0, 1],\n    [0, 0, 1, 0, 1, 1, 0],\n  ]);\n\n  cy.nodes().positions((ele, i) => {\n    const h = 250; // height;\n    const alpha = 45 * (Math.PI / 180);\n    const beta = 20 * (Math.PI / 180);\n\n    const d = h / (2 * Math.cos(alpha) * Math.cos(beta)); // arm length\n\n    switch (i + 1) {\n      case 1:\n        return { x: 150, y: 10 };\n      case 2:\n        return {\n          x: 150 - d * Math.sin(alpha + beta),\n          y: 10 + d * Math.cos(alpha + beta),\n        };\n      case 3:\n        return {\n          x: 150 + d * Math.sin(alpha + beta),\n          y: 10 + d * Math.cos(alpha + beta),\n        };\n      case 4:\n        return {\n          x: 150 - d * Math.sin(alpha - beta),\n          y: 10 + d * Math.cos(alpha - beta),\n        };\n      case 5:\n        return {\n          x: 150 + d * Math.sin(alpha - beta),\n          y: 10 + d * Math.cos(alpha - beta),\n        };\n      case 6:\n        return { x: 150 - h * Math.tan(alpha), y: 10 + h };\n      case 7:\n        return { x: 150 + h * Math.tan(alpha), y: 10 + h };\n      default:\n        return { x: 0, y: 0 };\n    }\n  });\n\n  const layout = {\n    name: 'preset',\n    boundingBox: { x1: 0, y1: 0, x2: 300, y2: 300 },\n  };\n\n  const id = {\n    family: 'Other',\n    name_en: `Moser spindle`,\n    name_fr: `Graphe de Moser`,\n    name_de: `Moser-Spindel`,\n    file: `moser_spindle`,\n    invariants: computeInvariants(cy),\n  };\n\n  graphs.push({ cy, layout, id });\n}\n\nasync function createMoreGraphs(): Promise<GraphRegister[] | void> {\n  const graphList = graphs.map((d) => d.id);\n  const promiseList = graphs.map((d) => processGraph(d.cy, d.layout, d.id));\n  return Promise.allSettled(promiseList).then(() => graphList);\n}\n\nexport default createMoreGraphs;\n","/* eslint-disable no-console */\nimport { GraphRegister, processGraph } from './registration-tools';\nimport {\n  computeInvariants,\n  graphFromAdjacencyMatrix,\n} from './generating-tools';\n\nconsole.log('Creating files for More graphs 2');\n\nconst matrices = [] as number[][][];\nmatrices[0] = [\n  [0, 1, 0],\n  [1, 0, 0],\n  [0, 0, 0],\n];\nmatrices[1] = [\n  [0, 0, 1],\n  [0, 0, 1],\n  [1, 1, 0],\n];\nmatrices[2] = [\n  [0, 1, 1],\n  [1, 0, 1],\n  [1, 1, 0],\n];\nmatrices[3] = [\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n];\nmatrices[4] = [\n  [0, 0, 1, 1],\n  [0, 0, 1, 0],\n  [1, 1, 0, 0],\n  [1, 0, 0, 0],\n];\nmatrices[5] = [\n  [0, 1, 1, 0],\n  [1, 0, 0, 1],\n  [1, 0, 0, 1],\n  [0, 1, 1, 0],\n];\nmatrices[6] = [\n  [0, 1, 0, 0],\n  [1, 0, 0, 0],\n  [0, 0, 0, 1],\n  [0, 0, 1, 0],\n];\nmatrices[7] = [\n  [0, 1, 1, 0],\n  [1, 0, 0, 0],\n  [1, 0, 0, 0],\n  [0, 0, 0, 0],\n];\nmatrices[8] = [\n  [0, 1, 1, 0],\n  [1, 0, 1, 1],\n  [1, 1, 0, 1],\n  [0, 1, 1, 0],\n];\nmatrices[9] = [\n  [0, 0, 1, 1, 1],\n  [0, 0, 0, 1, 1],\n  [1, 0, 0, 1, 1],\n  [1, 1, 1, 0, 0],\n  [1, 1, 1, 0, 0],\n];\nmatrices[10] = [\n  [0, 1, 0, 0, 1],\n  [1, 0, 1, 1, 0],\n  [0, 1, 0, 1, 1],\n  [0, 1, 1, 0, 0],\n  [1, 0, 1, 0, 0],\n];\nmatrices[11] = [\n  [0, 1, 0, 1, 0],\n  [1, 0, 0, 0, 0],\n  [0, 0, 0, 1, 1],\n  [1, 0, 1, 0, 0],\n  [0, 0, 1, 0, 0],\n];\nmatrices[12] = [\n  [0, 1, 0, 1, 0],\n  [1, 0, 1, 1, 1],\n  [0, 1, 0, 1, 0],\n  [1, 1, 1, 0, 1],\n  [0, 1, 0, 1, 0],\n];\nmatrices[13] = [\n  [0, 1, 0, 0, 0],\n  [1, 0, 0, 0, 0],\n  [0, 0, 0, 1, 1],\n  [0, 0, 1, 0, 1],\n  [0, 0, 1, 1, 0],\n];\nmatrices[14] = [\n  [0, 1, 1, 1, 1],\n  [1, 0, 1, 0, 1],\n  [1, 1, 0, 0, 1],\n  [1, 0, 0, 0, 0],\n  [1, 1, 1, 0, 0],\n];\nmatrices[15] = [\n  [0, 0, 0, 1, 0],\n  [0, 0, 1, 1, 1],\n  [0, 1, 0, 1, 1],\n  [1, 1, 1, 0, 0],\n  [0, 1, 1, 0, 0],\n];\nmatrices[16] = [\n  [0, 0, 1, 1, 0],\n  [0, 0, 1, 0, 0],\n  [1, 1, 0, 1, 1],\n  [1, 0, 1, 0, 1],\n  [0, 0, 1, 1, 0],\n];\nmatrices[17] = [\n  [0, 1, 1, 1, 1],\n  [1, 0, 1, 1, 1],\n  [1, 1, 0, 1, 1],\n  [1, 1, 1, 0, 0],\n  [1, 1, 1, 0, 0],\n];\nmatrices[18] = [\n  [0, 1, 1, 1, 1],\n  [1, 0, 1, 1, 1],\n  [1, 1, 0, 0, 0],\n  [1, 1, 0, 0, 1],\n  [1, 1, 0, 1, 0],\n];\nmatrices[19] = [\n  [0, 1, 1, 1, 1],\n  [1, 0, 0, 0, 1],\n  [1, 0, 0, 1, 0],\n  [1, 0, 1, 0, 1],\n  [1, 1, 0, 1, 0],\n];\nmatrices[20] = [\n  [0, 0, 1, 0, 0],\n  [0, 0, 1, 1, 0],\n  [1, 1, 0, 1, 1],\n  [0, 1, 1, 0, 0],\n  [0, 0, 1, 0, 0],\n];\nmatrices[21] = [\n  [0, 0, 1, 1, 0],\n  [0, 0, 0, 0, 0],\n  [1, 0, 0, 1, 1],\n  [1, 0, 1, 0, 0],\n  [0, 0, 1, 0, 0],\n];\nmatrices[22] = [\n  [0, 0, 1, 1, 0],\n  [0, 0, 0, 1, 1],\n  [1, 0, 0, 0, 1],\n  [1, 1, 0, 0, 0],\n  [0, 1, 1, 0, 0],\n];\nmatrices[23] = [\n  [0, 0, 1, 0, 0, 0],\n  [0, 0, 1, 1, 0, 0],\n  [1, 1, 0, 1, 0, 0],\n  [0, 1, 1, 0, 1, 1],\n  [0, 0, 0, 1, 0, 0],\n  [0, 0, 0, 1, 0, 0],\n];\nmatrices[24] = [\n  [0, 1, 1, 0, 1, 1],\n  [1, 0, 0, 1, 0, 0],\n  [1, 0, 0, 1, 0, 1],\n  [0, 1, 1, 0, 1, 1],\n  [1, 0, 0, 1, 0, 0],\n  [1, 0, 1, 1, 0, 0],\n];\nmatrices[25] = [\n  [0, 1, 1, 1, 1, 1],\n  [1, 0, 1, 1, 0, 1],\n  [1, 1, 0, 1, 0, 0],\n  [1, 1, 1, 0, 1, 0],\n  [1, 0, 0, 1, 0, 1],\n  [1, 1, 0, 0, 1, 0],\n];\nmatrices[26] = [\n  [0, 1, 0, 1, 0, 1],\n  [1, 0, 0, 0, 1, 1],\n  [0, 0, 0, 1, 0, 1],\n  [1, 0, 1, 0, 1, 1],\n  [0, 1, 0, 1, 0, 1],\n  [1, 1, 1, 1, 1, 0],\n];\nmatrices[27] = [\n  [0, 0, 0, 0, 0, 1],\n  [0, 0, 0, 1, 1, 0],\n  [0, 0, 0, 1, 1, 0],\n  [0, 1, 1, 0, 0, 1],\n  [0, 1, 1, 0, 0, 1],\n  [1, 0, 0, 1, 1, 0],\n];\nmatrices[28] = [\n  [0, 1, 1, 1, 0, 0],\n  [1, 0, 1, 0, 0, 1],\n  [1, 1, 0, 1, 1, 0],\n  [1, 0, 1, 0, 1, 1],\n  [0, 0, 1, 1, 0, 1],\n  [0, 1, 0, 1, 1, 0],\n];\nmatrices[29] = [\n  [0, 1, 0, 0, 1, 0],\n  [1, 0, 0, 1, 1, 0],\n  [0, 0, 0, 0, 0, 1],\n  [0, 1, 0, 0, 0, 1],\n  [1, 1, 0, 0, 0, 0],\n  [0, 0, 1, 1, 0, 0],\n];\nmatrices[30] = [\n  [0, 1, 1, 1, 1, 1],\n  [1, 0, 0, 1, 1, 1],\n  [1, 0, 0, 0, 0, 1],\n  [1, 1, 0, 0, 0, 1],\n  [1, 1, 0, 0, 0, 1],\n  [1, 1, 1, 1, 1, 0],\n];\nmatrices[31] = [\n  [0, 0, 1, 1, 0, 0],\n  [0, 0, 1, 1, 0, 1],\n  [1, 1, 0, 1, 1, 0],\n  [1, 1, 1, 0, 0, 1],\n  [0, 0, 1, 0, 0, 1],\n  [0, 1, 0, 1, 1, 0],\n];\nmatrices[32] = [\n  [0, 0, 0, 1, 1, 1],\n  [0, 0, 1, 0, 1, 0],\n  [0, 1, 0, 0, 0, 0],\n  [1, 0, 0, 0, 1, 1],\n  [1, 1, 0, 1, 0, 0],\n  [1, 0, 0, 1, 0, 0],\n];\nmatrices[33] = [\n  [0, 1, 1, 1, 0, 1],\n  [1, 0, 1, 1, 0, 0],\n  [1, 1, 0, 0, 1, 1],\n  [1, 1, 0, 0, 0, 1],\n  [0, 0, 1, 0, 0, 1],\n  [1, 0, 1, 1, 1, 0],\n];\nmatrices[34] = [\n  [0, 0, 0, 1, 0, 0],\n  [0, 0, 1, 1, 1, 1],\n  [0, 1, 0, 0, 1, 0],\n  [1, 1, 0, 0, 1, 1],\n  [0, 1, 1, 1, 0, 0],\n  [0, 1, 0, 1, 0, 0],\n];\nmatrices[35] = [\n  [0, 0, 1, 0, 0, 1],\n  [0, 0, 1, 1, 0, 1],\n  [1, 1, 0, 1, 0, 1],\n  [0, 1, 1, 0, 1, 1],\n  [0, 0, 0, 1, 0, 0],\n  [1, 1, 1, 1, 0, 0],\n];\nmatrices[36] = [\n  [0, 1, 0, 0, 0, 1],\n  [1, 0, 0, 0, 1, 0],\n  [0, 0, 0, 1, 1, 0],\n  [0, 0, 1, 0, 1, 1],\n  [0, 1, 1, 1, 0, 1],\n  [1, 0, 0, 1, 1, 0],\n];\nmatrices[37] = [\n  [0, 1, 1, 0, 1, 0],\n  [1, 0, 0, 1, 0, 1],\n  [1, 0, 0, 0, 0, 1],\n  [0, 1, 0, 0, 1, 1],\n  [1, 0, 0, 1, 0, 0],\n  [0, 1, 1, 1, 0, 0],\n];\nmatrices[38] = [\n  [0, 0, 0, 1, 0, 0],\n  [0, 0, 1, 1, 0, 0],\n  [0, 1, 0, 0, 1, 1],\n  [1, 1, 0, 0, 0, 1],\n  [0, 0, 1, 0, 0, 0],\n  [0, 0, 1, 1, 0, 0],\n];\nmatrices[39] = [\n  [0, 1, 0, 1, 1, 1],\n  [1, 0, 0, 0, 0, 1],\n  [0, 0, 0, 0, 0, 0],\n  [1, 0, 0, 0, 0, 0],\n  [1, 0, 0, 0, 0, 1],\n  [1, 1, 0, 0, 1, 0],\n];\nmatrices[40] = [\n  [0, 1, 1, 1, 1, 1],\n  [1, 0, 1, 0, 0, 1],\n  [1, 1, 0, 1, 1, 1],\n  [1, 0, 1, 0, 1, 1],\n  [1, 0, 1, 1, 0, 1],\n  [1, 1, 1, 1, 1, 0],\n];\nmatrices[41] = [\n  [0, 1, 1, 0, 1, 0],\n  [1, 0, 1, 1, 0, 0],\n  [1, 1, 0, 1, 0, 0],\n  [0, 1, 1, 0, 1, 1],\n  [1, 0, 0, 1, 0, 0],\n  [0, 0, 0, 1, 0, 0],\n];\nmatrices[42] = [\n  [0, 1, 0, 1, 0, 1],\n  [1, 0, 0, 0, 0, 1],\n  [0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 1],\n  [0, 0, 0, 0, 0, 1],\n  [1, 1, 1, 1, 1, 0],\n];\nmatrices[43] = [\n  [0, 1, 0, 0, 1, 1],\n  [1, 0, 1, 1, 0, 1],\n  [0, 1, 0, 0, 1, 1],\n  [0, 1, 0, 0, 1, 1],\n  [1, 0, 1, 1, 0, 0],\n  [1, 1, 1, 1, 0, 0],\n];\nmatrices[44] = [\n  [0, 1, 1, 1, 0, 1],\n  [1, 0, 1, 0, 0, 1],\n  [1, 1, 0, 1, 1, 0],\n  [1, 0, 1, 0, 0, 1],\n  [0, 0, 1, 0, 0, 0],\n  [1, 1, 0, 1, 0, 0],\n];\nmatrices[45] = [\n  [0, 1, 1, 0, 0, 0],\n  [1, 0, 0, 1, 0, 0],\n  [1, 0, 0, 0, 0, 1],\n  [0, 1, 0, 0, 1, 1],\n  [0, 0, 0, 1, 0, 0],\n  [0, 0, 1, 1, 0, 0],\n];\nmatrices[46] = [\n  [0, 0, 1, 1, 0, 1, 1],\n  [0, 0, 1, 1, 1, 1, 0],\n  [1, 1, 0, 1, 0, 1, 1],\n  [1, 1, 1, 0, 1, 1, 0],\n  [0, 1, 0, 1, 0, 1, 1],\n  [1, 1, 1, 1, 1, 0, 1],\n  [1, 0, 1, 0, 1, 1, 0],\n];\nmatrices[47] = [\n  [0, 1, 0, 1, 0, 1, 1],\n  [1, 0, 1, 1, 1, 1, 1],\n  [0, 1, 0, 0, 1, 1, 1],\n  [1, 1, 0, 0, 0, 0, 1],\n  [0, 1, 1, 0, 0, 1, 1],\n  [1, 1, 1, 0, 1, 0, 1],\n  [1, 1, 1, 1, 1, 1, 0],\n];\nmatrices[48] = [\n  [0, 1, 1, 1, 1, 0, 0],\n  [1, 0, 0, 0, 0, 1, 0],\n  [1, 0, 0, 1, 1, 0, 0],\n  [1, 0, 1, 0, 0, 1, 1],\n  [1, 0, 1, 0, 0, 1, 1],\n  [0, 1, 0, 1, 1, 0, 1],\n  [0, 0, 0, 1, 1, 1, 0],\n];\nmatrices[49] = [\n  [0, 1, 1, 1, 1, 0, 0],\n  [1, 0, 1, 0, 1, 0, 1],\n  [1, 1, 0, 1, 1, 1, 1],\n  [1, 0, 1, 0, 1, 1, 1],\n  [1, 1, 1, 1, 0, 1, 1],\n  [0, 0, 1, 1, 1, 0, 1],\n  [0, 1, 1, 1, 1, 1, 0],\n];\nmatrices[50] = [\n  [0, 0, 1, 1, 1, 1, 0],\n  [0, 0, 1, 1, 0, 0, 0],\n  [1, 1, 0, 0, 1, 0, 0],\n  [1, 1, 0, 0, 1, 1, 1],\n  [1, 0, 1, 1, 0, 1, 1],\n  [1, 0, 0, 1, 1, 0, 1],\n  [0, 0, 0, 1, 1, 1, 0],\n];\nmatrices[51] = [\n  [0, 1, 1, 0, 1, 1, 1],\n  [1, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 1, 0, 1, 1],\n  [0, 0, 1, 0, 1, 1, 0],\n  [1, 0, 0, 1, 0, 1, 0],\n  [1, 0, 1, 1, 1, 0, 1],\n  [1, 1, 1, 0, 0, 1, 0],\n];\nmatrices[52] = [\n  [0, 0, 1, 0, 0, 0, 1],\n  [0, 0, 1, 0, 0, 1, 0],\n  [1, 1, 0, 0, 1, 0, 1],\n  [0, 0, 0, 0, 0, 1, 1],\n  [0, 0, 1, 0, 0, 1, 0],\n  [0, 1, 0, 1, 1, 0, 0],\n  [1, 0, 1, 1, 0, 0, 0],\n];\nmatrices[53] = [\n  [0, 1, 1, 1, 0, 1, 0],\n  [1, 0, 0, 1, 1, 1, 1],\n  [1, 0, 0, 0, 1, 1, 1],\n  [1, 1, 0, 0, 0, 1, 0],\n  [0, 1, 1, 0, 0, 1, 1],\n  [1, 1, 1, 1, 1, 0, 1],\n  [0, 1, 1, 0, 1, 1, 0],\n];\nmatrices[54] = [\n  [0, 1, 1, 1, 1, 0, 1],\n  [1, 0, 0, 1, 1, 1, 1],\n  [1, 0, 0, 0, 1, 0, 1],\n  [1, 1, 0, 0, 0, 0, 1],\n  [1, 1, 1, 0, 0, 0, 0],\n  [0, 1, 0, 0, 0, 0, 1],\n  [1, 1, 1, 1, 0, 1, 0],\n];\nmatrices[55] = [\n  [0, 0, 1, 0, 1, 0, 1, 0],\n  [0, 0, 0, 0, 0, 1, 1, 1],\n  [1, 0, 0, 1, 1, 1, 1, 0],\n  [0, 0, 1, 0, 1, 0, 1, 1],\n  [1, 0, 1, 1, 0, 1, 1, 1],\n  [0, 1, 1, 0, 1, 0, 1, 0],\n  [1, 1, 1, 1, 1, 1, 0, 1],\n  [0, 1, 0, 1, 1, 0, 1, 0],\n];\nmatrices[56] = [\n  [0, 1, 0, 1, 0, 1, 1, 1],\n  [1, 0, 1, 1, 1, 1, 1, 1],\n  [0, 1, 0, 0, 1, 1, 1, 1],\n  [1, 1, 0, 0, 0, 1, 1, 0],\n  [0, 1, 1, 0, 0, 1, 1, 1],\n  [1, 1, 1, 1, 1, 0, 1, 1],\n  [1, 1, 1, 1, 1, 1, 0, 1],\n  [1, 1, 1, 0, 1, 1, 1, 0],\n];\nmatrices[57] = [\n  [0, 0, 1, 0, 0, 0, 0, 1],\n  [0, 0, 1, 0, 0, 1, 1, 1],\n  [1, 1, 0, 0, 0, 1, 1, 1],\n  [0, 0, 0, 0, 1, 0, 1, 1],\n  [0, 0, 0, 1, 0, 1, 1, 0],\n  [0, 1, 1, 0, 1, 0, 1, 1],\n  [0, 1, 1, 1, 1, 1, 0, 1],\n  [1, 1, 1, 1, 0, 1, 1, 0],\n];\nmatrices[58] = [\n  [0, 1, 1, 0, 0, 1, 0, 0],\n  [1, 0, 1, 1, 1, 1, 1, 1],\n  [1, 1, 0, 0, 1, 1, 1, 0],\n  [0, 1, 0, 0, 1, 1, 1, 1],\n  [0, 1, 1, 1, 0, 0, 0, 1],\n  [1, 1, 1, 1, 0, 0, 0, 1],\n  [0, 1, 1, 1, 0, 0, 0, 1],\n  [0, 1, 0, 1, 1, 1, 1, 0],\n];\nmatrices[59] = [\n  [0, 1, 1, 1, 0, 0, 1, 1],\n  [1, 0, 0, 1, 0, 0, 1, 1],\n  [1, 0, 0, 0, 1, 1, 0, 1],\n  [1, 1, 0, 0, 1, 1, 1, 1],\n  [0, 0, 1, 1, 0, 1, 0, 1],\n  [0, 0, 1, 1, 1, 0, 1, 1],\n  [1, 1, 0, 1, 0, 1, 0, 1],\n  [1, 1, 1, 1, 1, 1, 1, 0],\n];\nmatrices[60] = [\n  [0, 1, 1, 1, 0, 0, 1, 1],\n  [1, 0, 1, 1, 0, 1, 1, 1],\n  [1, 1, 0, 1, 1, 0, 0, 0],\n  [1, 1, 1, 0, 1, 0, 1, 1],\n  [0, 0, 1, 1, 0, 1, 1, 0],\n  [0, 1, 0, 0, 1, 0, 0, 1],\n  [1, 1, 0, 1, 1, 0, 0, 0],\n  [1, 1, 0, 1, 0, 1, 0, 0],\n];\nmatrices[61] = [\n  [0, 0, 1, 1, 1, 1, 1, 1],\n  [0, 0, 1, 1, 0, 0, 1, 0],\n  [1, 1, 0, 1, 0, 0, 1, 1],\n  [1, 1, 1, 0, 1, 0, 1, 1],\n  [1, 0, 0, 1, 0, 1, 0, 1],\n  [1, 0, 0, 0, 1, 0, 1, 1],\n  [1, 1, 1, 1, 0, 1, 0, 1],\n  [1, 0, 1, 1, 1, 1, 1, 0],\n];\nmatrices[62] = [\n  [0, 1, 0, 1, 0, 1, 1, 0],\n  [1, 0, 1, 1, 1, 1, 1, 0],\n  [0, 1, 0, 1, 1, 1, 0, 1],\n  [1, 1, 1, 0, 0, 0, 0, 1],\n  [0, 1, 1, 0, 0, 1, 1, 1],\n  [1, 1, 1, 0, 1, 0, 0, 1],\n  [1, 1, 0, 0, 1, 0, 0, 1],\n  [0, 0, 1, 1, 1, 1, 1, 0],\n];\nmatrices[63] = [\n  [0, 1, 1, 0, 0, 0, 1, 0],\n  [1, 0, 0, 1, 1, 1, 1, 1],\n  [1, 0, 0, 1, 1, 0, 0, 0],\n  [0, 1, 1, 0, 1, 0, 0, 1],\n  [0, 1, 1, 1, 0, 0, 1, 1],\n  [0, 1, 0, 0, 0, 0, 1, 0],\n  [1, 1, 0, 0, 1, 1, 0, 0],\n  [0, 1, 0, 1, 1, 0, 0, 0],\n];\nmatrices[64] = [\n  [0, 1, 0, 1, 1, 0, 1, 1],\n  [1, 0, 1, 1, 0, 0, 1, 1],\n  [0, 1, 0, 1, 1, 1, 1, 1],\n  [1, 1, 1, 0, 1, 0, 1, 0],\n  [1, 0, 1, 1, 0, 0, 0, 1],\n  [0, 0, 1, 0, 0, 0, 1, 1],\n  [1, 1, 1, 1, 0, 1, 0, 1],\n  [1, 1, 1, 0, 1, 1, 1, 0],\n];\n\nconst layoutOpts = {\n  name: 'cose',\n  boundingBox: { x1: 0, y1: 0, x2: 300, y2: 300 },\n};\n\nasync function createMoreGraphs2(): Promise<GraphRegister[] | void> {\n  const graphList = [] as GraphRegister[];\n  const promiseList = [] as Promise<GraphRegister | void>[];\n\n  for (let i = 0; i < matrices.length; i += 1) {\n    const M = matrices[i];\n    const cy = graphFromAdjacencyMatrix(M); // sync\n\n    const id = {\n      family: 'Samples',\n      name_en: `Graph G<sub>${i}</sub>`,\n      name_fr: `Graphe G<sub>${i}</sub>`,\n      name_de: `Graph G<sub>${i}</sub>`,\n      file: `G_${i}`,\n      invariants: computeInvariants(cy),\n    };\n\n    graphList.push(id);\n    promiseList.push(processGraph(cy, layoutOpts, id));\n  }\n  return Promise.allSettled(promiseList).then(() => graphList);\n}\n\nexport default createMoreGraphs2;\n","/* eslint-disable no-console */\nimport {\n  GraphRegister,\n  registerList,\n  registerAssets,\n} from './registration-tools';\n\nimport createCompleteGraphs from './make-complete-graphs';\nimport createTrivalentGraphs from './make-trivalent-graphs';\nimport createMoreGraphs from './make-more-graphs';\nimport createMoreGraphs2 from './make-more-graphs-2';\n\nprocess.setMaxListeners(0);\n\nPromise.all([\n  createCompleteGraphs(8),\n  createTrivalentGraphs(),\n  createMoreGraphs(),\n  createMoreGraphs2(),\n])\n  .then((arr) => {\n    const graphList = arr.flat() as GraphRegister[];\n    return Promise.all([registerList(graphList), registerAssets(graphList)]);\n  })\n  .then(() => {\n    console.log('All graphs generated.');\n    process.exit();\n  })\n  .catch((err) => {\n    console.error(err);\n  });\n"],"names":["$ec90255e36f58e26$var$snap","$parcel$interopDefault","$dRSqW$cytosnap","async","$ec90255e36f58e26$export$e3ce2ee955a9e041","cy","layoutOpts","id","layouted","layout","lay","prom","promiseOn","run","$ec90255e36f58e26$var$applyLayout","fileMade","then","filename","json","jsonString","JSON","stringify","$dRSqW$fspromises","writeFile","console","log","catch","err","error","$ec90255e36f58e26$var$makeFile","file","thumbMade","start","shot","elements","name","style","selector","resolvesTo","format","width","height","background","img","data","replace","buf","Buffer","from","$ec90255e36f58e26$var$makeThumb","Promise","all","$ec90255e36f58e26$export$860a6656ca8b0d29","$ec90255e36f58e26$export$26023fe4d9193d0d","text","map","d","concat","$c65becad8c260f5b$export$2e2bcd8739ae039","collection","cycles","kruskal","absoluteComplement","edges","backEdge","aStar","root","source","goal","target","weight","e","Number","POSITIVE_INFINITY","path","union","noCycle","cycle","$dRSqW$cytoscape","length","minCycle","size","reduce","acc","value","$d7b1f0e2c65e2a64$export$2e2bcd8739ae039","spanningTree","$142f5274d4c546e3$export$2e2bcd8739ae039","fW","floydWarshall","nodes","N","distance","Infinity","i","j","$8fd97d0e40e5a234$export$2e2bcd8739ae039","options","indexOf","indexing","Map","n","idx","get","RangeError","$8fd97d0e40e5a234$export$13453081627eff1c","directed","subgraph","parentCy","numNodes","m","Array","fill","forEach","isNode","$2e1c1dc59c685f84$export$354623063f3eeda3","M","add","group","i1","l","$2e1c1dc59c685f84$export$6e59a0e795cac65e","dSeq","degree","sort","a","b","A","$dRSqW$mathjs","det","numEdges","girth","degSequence","components","circuitRank","diameter","detAdjacency","$8d01ee2c09b5d5b9$var$makeGraph","$8d01ee2c09b5d5b9$var$layoutOpts","boundingBox","x1","y1","x2","y2","$8d01ee2c09b5d5b9$export$2e2bcd8739ae039","maxN","graphList","promiseList","family","name_en","name_fr","name_de","invariants","push","allSettled","$6e9264229edefb21$var$matrices","$6e9264229edefb21$var$graphFromUpperTriangular","g","split","upper","k","$6e9264229edefb21$var$layoutOpts","$6e9264229edefb21$export$2e2bcd8739ae039","previousGenus","$84b8416ec0e4dcb9$var$graphs","positions","ele","h","alpha","Math","PI","beta","cos","x","y","sin","tan","$84b8416ec0e4dcb9$export$2e2bcd8739ae039","$20b435c115e5a871$var$matrices","$20b435c115e5a871$var$layoutOpts","$20b435c115e5a871$export$2e2bcd8739ae039","process","setMaxListeners","arr","flat","exit"],"version":3,"file":"generate-graphs.js.map","sourceRoot":"../"}