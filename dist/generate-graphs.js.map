{"mappings":"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","sources":["src/ts/graph-gallery-scripts/generating-tools.ts","src/ts/graph-gallery-scripts/register-graphs.ts","src/ts/graph-gallery-scripts/make-complete-graphs.ts","src/ts/graph-gallery-scripts/make-trivalent-graphs.ts"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable */\n\n// const cytosnap = require( 'cytosnap');\n\nimport * as fs from 'fs/promises';\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport cytosnap from 'cytosnap';\n\n// list of layout extensions to use\n// NB you must `npm install` these yourself for your project\n// cytosnap.use([ 'cytoscape-dagre', 'cytoscape-cose-bilkent' ]);\n\nconst snap = cytosnap();\n\nfunction makeThumb(cy: cytoscape.Core, filename: string) {\n  snap\n    .start()\n    .then(() =>\n      snap.shot({\n        elements: (cy.json() as cytoscape.Core).elements,\n        layout: { name: 'preset' },\n        style: [\n          // http://js.cytoscape.org/#style\n          {\n            selector: 'node',\n            style: {\n              'background-color': 'red',\n            },\n          },\n          {\n            selector: 'edge',\n            style: {\n              'line-color': 'red',\n              'curve-style': 'bezier',\n            },\n          },\n        ],\n        resolvesTo: 'base64uri',\n        format: 'png',\n        width: 640,\n        height: 480,\n        background: 'transparent',\n      }),\n    )\n    .then((img: string) => {\n      // https://stackoverflow.com/questions/43487543/writing-binary-data-using-node-js-fs-writefile-to-create-an-image-file\n      const data = img.replace(/^data:image\\/\\w+;base64,/, '');\n      const buf = Buffer.from(data, 'base64');\n      fs.writeFile(filename, buf)\n        .then(() => {\n          console.log('Saved thumbnail ' + filename);\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n    });\n}\n\nfunction applyLayout(cy: cytoscape.Core, layout: cytoscape.LayoutOptions) {\n  const lay = cy.layout(layout);\n  lay.run();\n  return lay.promiseOn('layoutstop');\n}\n\nexport { makeThumb, applyLayout };\n","/* eslint-disable no-console */\nimport { Core } from 'cytoscape';\nimport * as fs from 'fs';\n\ntype GraphRegister = {\n  family: string;\n  name: string;\n  file: string;\n};\n\nfunction makeFile(cy: Core, filename: string) {\n  const json = cy.json();\n  const jsonString = JSON.stringify(json, null, 4);\n\n  fs.writeFile(filename, jsonString, {}, (err) => {\n    if (err) throw err;\n    console.log(`Saved file ${filename}`);\n  });\n}\n\n/* Register graphs in the graphs-list.json */\n\nfunction registerList(data: GraphRegister[]) {\n  const filename = 'src/graph-gallery/graphs-list.json';\n  // check if file exist\n  if (!fs.existsSync(filename)) {\n    // create new file if not exist\n    fs.closeSync(fs.openSync(filename, 'w'));\n  }\n\n  // read file\n  const file = fs.readFileSync(filename);\n\n  // check if file is empty\n  if (file.length === 0) {\n    // add data to json file\n    fs.writeFileSync(filename, JSON.stringify(data));\n  } else {\n    // append data to json file\n    const json = JSON.parse(file.toString()) as GraphRegister[];\n    // add json element to json object\n    json.push(...data);\n    fs.writeFileSync(filename, JSON.stringify(json));\n  }\n}\n\nfunction registerAssets(data: GraphRegister[]) {\n  const filename = 'src/graph-gallery/graphs-assets.ts';\n\n  //   // check if file exist\n  //   if (!fs.existsSync(filename)) {\n  //     // create new file if not exist\n  //     fs.closeSync(fs.openSync(filename, 'w'));\n  //   }\n\n  //   // read file\n  //   const file = fs.readFileSync(filename);\n\n  //   if (file.length == 0) {\n  //     console.log('assets file empty');\n  //   }\n\n  const stream = fs.createWriteStream(filename, { flags: 'a' });\n\n  data.forEach((d) => {\n    stream.write(\n      `export const ${d.file} = new URL('../graph-gallery/${d.file}.data', import.meta.url).href;`,\n    );\n    stream.write(\n      `export const ${d.file}_Icon = new URL('../graph-gallery/${d.file}.png', import.meta.url).href;`,\n    );\n  });\n  stream.end();\n}\n\nfunction registerGraphs(data: GraphRegister[]) {\n  registerList(data);\n  registerAssets(data);\n}\n\nexport { GraphRegister, registerGraphs, makeFile };\n","/* eslint-disable no-console */\n// Run this file from the command line to generate the graph json files\n// $ node make-complete-graphs.ts\n\nimport cytoscape from 'cytoscape';\nimport { makeThumb, applyLayout } from './generating-tools';\nimport { GraphRegister, registerGraphs, makeFile } from './register-graphs';\n\nconsole.log('Creating files for Complete graphs');\nconsole.log('==================================');\n\n/* Define the function that creates a graph, for any given parameter(s) */\nfunction makeGraph(N: number) {\n  const cy = cytoscape();\n\n  for (let i = 0; i < N; i += 1) {\n    cy.add({ group: 'nodes', data: { id: `N-${i}` } });\n    for (let j = 0; j < i; j += 1) {\n      cy.add({\n        group: 'edges',\n        data: {\n          source: cy.nodes()[j].id(),\n          target: cy.nodes()[i].id(),\n          id: `E-${j}-${i}`,\n        },\n      });\n    }\n  }\n  // cy.layout({ name: 'circle', radius: 200 }).run();\n  // cy.zoom(1);\n  // cy.panBy({ x: 600, y: 500 });\n\n  return cy;\n}\n\nconst layoutOpts = {\n  name: 'cose',\n  boundingBox: { x1: 0, y1: 0, x2: 300, y2: 300 },\n};\n\nconst register = [] as GraphRegister[];\n\n/* Create a list of graphs */\nfor (let i = 2; i < 9; i += 1) {\n  const id = {\n    family: 'Complete',\n    name: `Complete of order ${i}`,\n    file: `complete_${i}`,\n  };\n\n  const cy = makeGraph(i);\n\n  const layouted = applyLayout(cy, layoutOpts); // async, returns promise\n\n  layouted\n    .then(() => makeFile(cy, `./src/graph-gallery/${id.file}.data`))\n    .catch((err) => {\n      console.error(err);\n    });\n\n  layouted\n    .then(() => makeThumb(cy, `./src/graph-gallery/${id.file}.png`))\n    .catch((err) => {\n      console.error(err);\n    });\n\n  register.push(id);\n}\n\n// register the graph registers\nregisterGraphs(register);\n\n// NOTE\n// The extension \".data\" is to avoid problems with Parcel bundler. If the extension is .json,\n// then parcel does not import the dependency correctly.\n","/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-console */\n\n// Run this file from the command line to generate the graph json files\n// $ node make-trivalent-graphs.ts\n\nimport cytoscape from 'cytoscape';\nimport { makeThumb, applyLayout } from './generating-tools';\nimport { GraphRegister, registerGraphs, makeFile } from './register-graphs';\n\nconst matrices = [\n  '2  1 1 1',\n  '2  0 3 0',\n  '4  1 0 0 1 1 0 1 1 1 0',\n  '4  0 0 1 2 1 0 1 1 0 0',\n  '4  0 0 2 1 1 0 1 0 1 0',\n  '4  0 0 2 1 0 1 2 0 0 0',\n  '4  0 1 1 1 0 1 1 0 1 0',\n  '6  0 0 0 0 2 1 1 0 0 1 0 1 0 0 1 1 0 1 0 0 0',\n  '6  1 0 0 0 1 0 1 0 0 1 0 1 0 0 1 1 0 1 0 1 0',\n  '6  0 0 0 1 1 1 0 0 0 2 1 1 0 0 1 1 0 0 0 0 0',\n  '6  0 0 0 2 1 0 0 0 0 2 1 1 0 0 1 0 0 1 0 0 0',\n  '6  0 0 0 1 1 1 1 0 0 1 0 1 0 0 1 1 0 0 0 1 0',\n  '6  0 0 0 1 0 2 0 0 0 2 1 1 0 1 0 1 0 0 0 0 0',\n  '6  0 0 0 2 0 1 0 0 0 2 1 1 0 1 0 0 0 1 0 0 0',\n  '6  0 0 0 2 0 1 1 0 0 1 0 1 0 1 0 0 0 1 0 1 0',\n  '6  0 0 0 2 1 0 0 0 1 0 2 0 0 2 1 0 0 0 0 0 0',\n  '6  0 0 0 1 1 1 0 0 2 0 1 0 0 2 1 0 0 0 0 0 0',\n  '6  0 0 0 1 1 1 1 0 1 0 0 0 0 2 1 0 0 1 0 0 0',\n  '6  0 0 0 1 1 1 1 0 1 0 0 1 0 1 0 0 0 1 0 1 0',\n  '6  0 0 0 1 1 1 0 0 1 1 1 1 0 1 0 0 0 1 0 0 0',\n  '6  0 0 0 1 1 1 0 0 1 1 1 0 1 1 1 0 0 0 0 0 0',\n  '6  0 0 1 0 1 1 0 0 2 0 1 0 0 2 0 0 0 1 0 0 0',\n  '6  0 0 1 1 0 1 0 0 1 1 1 0 0 2 0 0 0 1 0 0 0',\n  '6  0 0 1 1 1 0 0 0 1 1 1 0 0 1 1 0 0 1 0 0 0',\n  '8  0 0 0 0 0 2 1 0 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 1 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 0 0 1 2 0 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 0 1 1 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 0 2 0 1 1 0 0 0 1 0 0 0 0 0 0 2 1 1 0 0 1 0 1 0 0 1 0 0 0 0 0 0',\n  '8  1 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 2 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0',\n  '8  1 0 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 1 0 0 1 0 0 1 0 1 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 1 0 0 0 1 0 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0',\n  '8  0 0 0 0 2 0 1 0 0 0 0 0 2 1 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 0 2 0 1 0 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 0 2 1 0 0 0 0 0 2 1 1 0 0 0 1 1 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 2 1 0 0 0 0 0 0 2 1 0 0 0 0 0 2 1 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 0 2 1 0 1 0 0 0 1 0 1 0 0 0 1 1 0 0 0 0 0 0 0 1 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 0 2 0 1 0 0 0 0 2 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 2 1 0 0 0 0 0 0 2 0 1 0 0 0 0 2 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 0 1 1 0 0 0 1 0 0 0 0 0 0 2 1 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 0 0 1 0',\n  '8  0 0 0 0 2 1 0 0 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 0 0 1 0',\n  '8  0 0 0 0 1 1 0 1 1 0 0 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 1 0 1 0',\n  '8  0 0 0 0 1 0 0 2 0 0 0 0 1 2 0 0 0 0 2 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 2 0 0 1 0 0 0 0 1 2 0 0 0 0 2 0 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 2 0 0 1 0 0 0 0 1 2 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 0 0 0 2 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0',\n  '8  0 0 0 0 1 0 1 1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 1 1 0 0 1 0 0 0',\n  '8  0 0 0 0 1 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 2 0 0 0 0 0 0 1 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 0 0 0 1 1 1 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 1 2 0 0 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 0 0 1 0',\n  '8  0 0 0 0 1 2 0 0 0 0 0 1 0 2 0 0 0 0 1 1 1 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 2 1 0 0 0 0 0 1 0 2 0 0 0 0 2 0 1 0 0 0 1 2 0 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 0 0 0 2 0 1 0 0 0 2 1 0 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 1 0 2 0 0 0 0 2 0 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 1 0 0 1 0 0 0 0 0 2 1 0 0 0 0 0 0 1 0 0 0',\n  '8  0 0 0 0 2 1 0 0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 2 1 0 0 0 0 0 0 1 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 1 0 2 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0 1 0',\n  '8  0 0 0 0 1 2 0 0 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 2 0 1 0 0 0 0 1 1 1 0 0 2 0 1 0 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 1 0 1 1 0 0 0 2 1 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 2 0 1 0 0 0 0 1 1 1 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0',\n  '8  0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 0 1 1 1 1 0 1 0 0 0 0 1 0 0 0 1 0 0 0',\n  '8  1 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 1 1 0 0 1 1 1 0 0 1 0 0 0 1 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 0 0 0 1 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 1 0 0 0 0 1 1 0 1 0 0 1 0 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 1 0 0 1 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0',\n  '8  0 0 0 2 0 0 1 0 0 0 0 1 0 1 1 0 0 0 1 1 1 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0',\n  '8  0 0 0 2 0 0 1 0 0 0 0 2 0 1 0 0 0 0 2 1 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 2 0 0 1 0 0 0 0 2 0 1 0 0 0 0 2 0 1 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 0 0 0',\n  '8  0 0 0 1 0 2 0 0 0 0 0 1 0 1 1 0 0 0 1 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 1 0 2 0 0 0 0 0 2 0 1 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0',\n  '8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 0 0 0 2 1 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 0 0 0 0 2 1 0 0 2 0 0 1 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 0 1 0 0 0 2 0 1 0 0 0 0 0 2 1 0 0 2 0 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 1 0 0 0 2 0 0 1 0 0 0 0 0 0 0 1 0',\n  '8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 0 1 0 0 2 0 0 0 0 2 0 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 1 0 0 0 2 0 0 0 0 1 1 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 1 0 0 0 0 1 1 0 1 1 0 0 1 0 0 0 0 0 1 1 0 0 1 1 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 1 0 1 0 0 1 1 0 0 0 0 0 0',\n  '8  0 0 0 1 1 0 0 1 0 0 0 1 1 0 1 0 0 0 2 1 0 0 0 0 2 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 1 1 0 0 1 0 0 0 1 2 0 0 0 0 0 1 1 1 0 0 0 2 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 1 1 0 1 0 0 0 0 1 1 0 1 0 0 0 2 1 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 1 1 0 1 0 0 0 0 1 2 0 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1 2 0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 2 0 0 1 0 0 0 0 1 1 1 0 0 0 1 1 0 1 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 1 0 1 0 1 0 0 0 1 1 1 0 0 0 1 0 1 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0',\n  '8  0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1 1 0 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 0 0 1 0 1 1 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0',\n  '8  0 0 0 1 1 0 0 1 0 0 0 0 1 1 1 0 0 0 1 2 0 0 2 0 0 0 0 0 0 0 0 0 1 0 0 0',\n];\n\nconsole.log('Creating files for trivalent graphs');\nconsole.log('===================================');\n\nfunction graphFromUpperTriangular(M: string): cytoscape.Core {\n  const cy = cytoscape();\n\n  const g = (Number(M.split('  ')[0]) + 2) / 2;\n  // const N = 2 * g - 2;\n  const upper = M.split('  ')[1].split(' ').map(Number);\n\n  // to index the upper triangular matrix easily\n  let k = 0;\n\n  // first add all vertices\n  for (let i = 0; i < 2 * g - 2; i += 1) {\n    cy.add({ group: 'nodes', data: { id: `N-${i}` } });\n  }\n\n  // then the edges\n  for (let i = 0; i < 2 * g - 2; i += 1) {\n    for (let j = i; j < 2 * g - 2; j += 1) {\n      // add the correct amount of edges\n      for (let l = 0; l < upper[k]; l += 1) {\n        cy.add({\n          group: 'edges',\n          data: {\n            source: cy.nodes()[i].id(),\n            target: cy.nodes()[j].id(),\n            id: `E-${i}-${j}-${l}`,\n          },\n        });\n      }\n\n      // increment counter for upper triangular matrix indexing\n      k += 1;\n    }\n  }\n\n  return cy;\n}\n\nconst register = [] as GraphRegister[];\n\nlet i = 0;\nlet previousGenus = 1;\n\nfor (const M of matrices) {\n  const g = (Number(M.split('  ')[0]) + 2) / 2;\n\n  // reset the counter if necessary\n  if (g !== previousGenus) i = 0;\n  previousGenus = g;\n\n  const layoutOpts = {\n    name: 'cose',\n    boundingBox: { x1: 0, y1: 0, x2: 300, y2: 300 },\n  };\n\n  const id = {\n    family: 'Trivalent',\n    name: `Trivalent ${g}<sub>${i}</sub>`,\n    file: `trivalent_${g}_${i}`,\n  };\n\n  const cy = graphFromUpperTriangular(M); // sync\n\n  const layouted = applyLayout(cy, layoutOpts); // async, returns promise\n\n  layouted\n    .then(() => makeFile(cy, `./src/graph-gallery/${id.file}.data`))\n    .catch((err) => {\n      console.error(err);\n    });\n\n  layouted\n    .then(() => makeThumb(cy, `./src/graph-gallery/${id.file}.png`))\n    .catch((err) => {\n      console.error(err);\n    });\n\n  register.push(id);\n\n  i += 1;\n}\n\nregisterGraphs(register);\n\n// const promises = [] as ReturnType<typeof makeThumb>[];\n\n// Promise.allSettled(promises)\n//   .then(() => {\n//     console.log('');\n//     console.log('Trivalent graphs created.');\n//     process.exit();\n//   })\n//   .catch((err) => {\n//     console.error(err);\n//   });\n"],"names":["$2e1c1dc59c685f84$var$snap","$parcel$interopDefault","$dRSqW$cytosnap","$2e1c1dc59c685f84$export$55eee5fe1d037493","cy","filename","start","then","shot","elements","json","layout","name","style","selector","resolvesTo","format","width","height","background","img","data","replace","buf","Buffer","from","$dRSqW$fspromises","writeFile","console","log","catch","err","error","$2e1c1dc59c685f84$export$8ba37776491df5b8","lay","run","promiseOn","$034ff17f36f93702$export$ef1d1a6f121e4697","jsonString","JSON","stringify","$dRSqW$fs","$034ff17f36f93702$export$fcfbe8a96738f5e9","existsSync","closeSync","openSync","file","readFileSync","length","writeFileSync","parse","toString","push","$034ff17f36f93702$var$registerList","stream","createWriteStream","flags","forEach","d","write","end","$034ff17f36f93702$var$registerAssets","$8d01ee2c09b5d5b9$var$makeGraph","N","$dRSqW$cytoscape","i1","add","group","id","j","source","nodes","target","$8d01ee2c09b5d5b9$var$layoutOpts","boundingBox","x1","y1","x2","y2","$8d01ee2c09b5d5b9$var$register","i","family","layouted","$6e9264229edefb21$var$matrices","$6e9264229edefb21$var$graphFromUpperTriangular","M1","g","Number","split","upper","map","k","i2","l","$6e9264229edefb21$var$register","$6e9264229edefb21$var$i","$6e9264229edefb21$var$previousGenus","M","layoutOpts"],"version":3,"file":"generate-graphs.js.map","sourceRoot":"../"}