{"mappings":"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","sources":["src/ts/graph-gallery-scripts/generating-tools.ts","src/ts/invariants/girth.ts","src/ts/invariants/circuitRank.ts","src/ts/invariants/diameter.ts","src/ts/utils/adjacency-matrix.ts","src/ts/graph-gallery-scripts/register-graphs.ts","src/ts/graph-gallery-scripts/make-complete-graphs.ts","src/ts/graph-gallery-scripts/make-trivalent-graphs.ts"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable */\n\n// const cytosnap = require( 'cytosnap');\n\nimport * as fs from 'fs/promises';\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport cytosnap from 'cytosnap';\n\n// list of layout extensions to use\n// NB you must `npm install` these yourself for your project\n// cytosnap.use([ 'cytoscape-dagre', 'cytoscape-cose-bilkent' ]);\n\nconst snap = cytosnap();\n\nfunction makeThumb(cy: cytoscape.Core, filename: string) {\n  snap\n    .start()\n    .then(() =>\n      snap.shot({\n        elements: (cy.json() as cytoscape.Core).elements,\n        layout: { name: 'preset' },\n        style: [\n          // http://js.cytoscape.org/#style\n          {\n            selector: 'node',\n            style: {\n              'background-color': 'red',\n            },\n          },\n          {\n            selector: 'edge',\n            style: {\n              'line-color': 'red',\n              'curve-style': 'bezier',\n            },\n          },\n        ],\n        resolvesTo: 'base64uri',\n        format: 'png',\n        width: 640,\n        height: 480,\n        background: 'transparent',\n      }),\n    )\n    .then((img: string) => {\n      // https://stackoverflow.com/questions/43487543/writing-binary-data-using-node-js-fs-writefile-to-create-an-image-file\n      const data = img.replace(/^data:image\\/\\w+;base64,/, '');\n      const buf = Buffer.from(data, 'base64');\n      fs.writeFile(filename, buf)\n        .then(() => {\n          console.log('Saved thumbnail ' + filename);\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n    });\n}\n\nfunction applyLayout(cy: cytoscape.Core, layout: cytoscape.LayoutOptions) {\n  const lay = cy.layout(layout);\n  lay.run();\n  return lay.promiseOn('layoutstop');\n}\n\nexport { makeThumb, applyLayout };\n","import cytoscape, {\n  EdgeCollection,\n  Collection,\n  CollectionReturnValue,\n} from 'cytoscape';\n\n// Girth of a graph\n//\n// Definition:\n// The girth of an undirected graph is the length of a shortest cycle contained in the graph.\n// If there are no cycles in the graph, the girth is defined to be infinity by convention.\n//\n// Algorithm:\n// 1. Compute a spanning tree (use kruskal() method).\n// 2. The complement of the spanning tree is the set of back-edges.\n//    Each back-edge is on a cycle (“closing it”).\n// 3. For each back-edge: remove it from the graph and find the shortest distance\n//    between its endpoints.\n//    Use aStar() method.\n//    We can avoid removing the edge by assigning it an infinite weight.\n// 4. The cycle length is this distance + 1\n// 5. Find the min cycle length\n\ntype GirthReturnValue = {\n  path: CollectionReturnValue;\n  value: number;\n};\n\nfunction girth(collection: Collection): GirthReturnValue {\n  const spanningTree = collection.kruskal(() => 1);\n  const backEdges = spanningTree.absoluteComplement().edges();\n\n  const cycles = backEdges.map((backEdge) => {\n    const edgeWeights = (e: EdgeCollection): number =>\n      backEdge === e ? Number.POSITIVE_INFINITY : 1;\n\n    const aS = collection.aStar({\n      root: backEdge.source(),\n      goal: backEdge.target(),\n      weight: edgeWeights,\n    });\n\n    return aS.path.union(backEdge);\n  });\n\n  const noCycle = {\n    cycle: cytoscape().collection(),\n    length: Number.POSITIVE_INFINITY,\n  };\n\n  const minCycle = cycles\n    .map((cycle) => ({ cycle, length: cycle.edges().size() }))\n    .reduce((acc, cycle) => (acc.length < cycle.length ? acc : cycle), noCycle);\n\n  return { path: minCycle.cycle, value: minCycle.length };\n}\n\nexport default girth;\n","import { Collection, CollectionReturnValue } from 'cytoscape';\n\n// Circuit Rank of a graph\n//\n// Definition:\n// The circuit rank of an undirected graph is the number of independent cycles contained in the graph.\n// Also known as the 1st Betti number (the 0th Betti number is the number of connected components, and\n// all the n-th Betti numbers for n>1 are zero since a graph is one-dimensional space).\n//\n// Compare with Girth algorithm\n//\n// Algorithm:\n// 1. Compute a spanning tree (use kruskal() method).\n// 2. The complement of the spanning tree is the set of back-edges.\n//    Each back-edge is on a cycle (“closing it”).\n// 3. For each back-edge: find a path in the spanning tree\n//    joining its endpoints (use aStar() method).\n//    Add the back-edge, making thus a cycle.\n// 4. List all the cycles\n\nfunction circuitRank(collection: Collection): CollectionReturnValue[] {\n  const spanningTree = collection.kruskal(() => 1);\n\n  const backEdges = spanningTree.absoluteComplement().edges();\n\n  const cycles = backEdges.map((backEdge) => {\n    const aS = spanningTree.aStar({\n      root: backEdge.source(),\n      goal: backEdge.target(),\n    });\n\n    return aS.path.union(backEdge);\n  });\n\n  return cycles;\n}\n\nexport default circuitRank;\n","import cytoscape, { Collection, CollectionReturnValue } from 'cytoscape';\n\n// Diameter of a graph\n//\n// Definition:\n// The diameter of a graph is the longest distance between two vertices.\n//\n// Algorithm:\n// 1. Compute the distance between any pair of vertices (use floydWarshall() method)\n// 2. Find the maximum\n//\n// TO DO: use a better (non-factorial) algorithm\n\ntype DiameterReturnValue = {\n  path: CollectionReturnValue;\n  value: number;\n};\n\nfunction diameter(collection: Collection): DiameterReturnValue {\n  const fW = collection.floydWarshall({ weight: () => 1 });\n  const nodes = collection.nodes();\n  const N = nodes.length;\n\n  let path = cytoscape().collection();\n  let distance = -Infinity;\n\n  for (let i = 0; i < N; i += 1) {\n    for (let j = i; j < N; j += 1) {\n      if (fW.distance(nodes[i], nodes[j]) > distance) {\n        distance = fW.distance(nodes[i], nodes[j]);\n        path = fW.path(nodes[i], nodes[j]).union([nodes[i], nodes[j]]);\n        // we add the two endpoints in case there is no path between them.\n      }\n    }\n  }\n\n  return { path, value: distance };\n}\n\nexport default diameter;\n","import { NodeSingular, Collection } from 'cytoscape';\n\n/* NodeIndexer is a function that assigns an integer index value to each Node */\n\nexport type NodeIndexer = (n: NodeSingular) => number;\n\nexport function defaultNodeIndexer(collection: Collection): NodeIndexer {\n  const nodes = collection.nodes();\n  const map = new Map<string, number>(nodes.map((n, i) => [n.id(), i]));\n  return (n) => {\n    const idx = map.get(n.id());\n    if (typeof idx === 'undefined')\n      throw new RangeError(`Unknown node: ${n.json()}`);\n    return idx;\n  };\n}\n\n/* Adjacency matrix\nThe entry m[i][j] is the number of edges that go from node[i] to node[j].\n\nFor undirected graphs (default), this means that the matrix is symmetric. \nIf the option directed=true is specified, then each edge is counted only \nonce, for its source and target.\nIn the case of a loop of an undirected graph, the corresponding diagonal \nentry is increased by 2 (because the edge can be followed in the two \nsenses).\n\nIf the adjacencyMatrix is called for a collection with m nodes, which is \nsmaller than the entire graph of order n, then two options are possible: \nIf subgraph=false (default), then the collection is treated as a graph, \nand an mxm matrix is returned.\nIf subgraph=true, then an nxn matrix is returned, but only the edges of\nthe collection are counted, making all the rest of the rows/columns zero \n(like disconnected vertices).\n\nWeight of edges is not taken into account.\n*/\n\nfunction adjacencyMatrix(\n  collection: Collection,\n  options: {\n    indexing?: NodeIndexer;\n    directed?: boolean;\n    subgraph?: boolean;\n  } = {},\n): number[][] {\n  const indexOf = options.indexing ?? defaultNodeIndexer(collection);\n  const directed = options.directed ?? false;\n  const subgraph = options.subgraph ?? false;\n\n  const nodes = collection.nodes();\n  const parentCy = nodes[0].cy();\n\n  const numNodes = subgraph ? parentCy.nodes().size() : nodes.size();\n\n  const m = new Array(numNodes)\n    .fill(null)\n    .map(() => new Array<number>(numNodes).fill(0));\n\n  collection.edges().forEach((e) => {\n    const source = e.source();\n    const target = e.target();\n\n    if (source.isNode() && target.isNode()) {\n      const i = indexOf(e.source());\n      const j = indexOf(e.target());\n      m[i][j] += 1;\n      if (!directed) {\n        m[j][i] += 1;\n      }\n    }\n  });\n\n  return m;\n}\n\nexport default adjacencyMatrix;\n","/* eslint-disable no-console */\nimport cytoscape from 'cytoscape';\nimport * as fs from 'fs';\nimport { det } from 'mathjs';\n\n/* Can't load extensions in headless mode (no window object) ?? */\n// import invariants from '../cytoscape-extensions/invariants';\n// import utils from '../cytoscape-extensions/utils';\n\n// cytoscape.use(invariants);\n// cytoscape.use(utils);\nimport girth from '../invariants/girth';\nimport circuitRank from '../invariants/circuitRank';\nimport diameter from '../invariants/diameter';\nimport adjacencyMatrix from '../utils/adjacency-matrix';\n\ntype GraphRegister = {\n  family: string;\n  name: string;\n  file: string;\n  invariants: {\n    numNodes: number;\n    numEdges: number;\n    girth: number | null; // json does not support Infinity\n    degSequence: number[];\n    components: number;\n    circuitRank: number;\n    diameter: number;\n    detAdjacency: number | undefined;\n  };\n};\n\nfunction computeInvariants(cy: cytoscape.Core) {\n  const dSeq = cy\n    .elements()\n    .nodes()\n    .map((n) => n.degree(true))\n    .sort((a, b) => b - a);\n\n  let d;\n  if (cy.nodes().size() > 0) {\n    const A = adjacencyMatrix(cy.elements());\n    d = det(A);\n  }\n\n  return {\n    numNodes: cy.elements().nodes().size(),\n    numEdges: cy.elements().edges().size(),\n    girth: girth(cy.elements()).value,\n    degSequence: dSeq,\n    components: cy.elements().components().length,\n    circuitRank: circuitRank(cy.elements()).length,\n    diameter: diameter(cy.elements()).value,\n    detAdjacency: d,\n  };\n}\n\nfunction makeFile(cy: cytoscape.Core, filename: string) {\n  const json = cy.json();\n  const jsonString = JSON.stringify(json, null, 4);\n\n  fs.writeFile(filename, jsonString, {}, (err) => {\n    if (err) throw err;\n    console.log(`Saved file ${filename}`);\n  });\n}\n\n/* Register graphs in the graphs-list.json */\n\nfunction registerList(data: GraphRegister[]) {\n  const filename = 'src/graph-gallery/graphs-list.json';\n  // check if file exist\n  if (!fs.existsSync(filename)) {\n    // create new file if not exist\n    fs.closeSync(fs.openSync(filename, 'w'));\n  }\n\n  // read file\n  const file = fs.readFileSync(filename);\n\n  // check if file is empty\n  if (file.length === 0) {\n    // add data to json file\n    fs.writeFileSync(filename, JSON.stringify(data));\n  } else {\n    // append data to json file\n    const json = JSON.parse(file.toString()) as GraphRegister[];\n    // add json element to json object\n    json.push(...data);\n    fs.writeFileSync(filename, JSON.stringify(json));\n  }\n}\n\nfunction registerAssets(data: GraphRegister[]) {\n  const filename = 'src/graph-gallery/graphs-assets.ts';\n\n  //   // check if file exist\n  //   if (!fs.existsSync(filename)) {\n  //     // create new file if not exist\n  //     fs.closeSync(fs.openSync(filename, 'w'));\n  //   }\n\n  //   // read file\n  //   const file = fs.readFileSync(filename);\n\n  //   if (file.length == 0) {\n  //     console.log('assets file empty');\n  //   }\n\n  const stream = fs.createWriteStream(filename, { flags: 'a' });\n\n  data.forEach((d) => {\n    stream.write(\n      `export const ${d.file} = new URL('../graph-gallery/${d.file}.data', import.meta.url).href;`,\n    );\n    stream.write(\n      `export const ${d.file}_Icon = new URL('../graph-gallery/${d.file}.png', import.meta.url).href;`,\n    );\n  });\n  stream.end();\n}\n\nfunction registerGraphs(data: GraphRegister[]) {\n  registerList(data);\n  registerAssets(data);\n}\n\nexport { GraphRegister, registerGraphs, makeFile, computeInvariants };\n","/* eslint-disable no-console */\n// Run this file from the command line to generate the graph json files\n// $ node make-complete-graphs.ts\n\nimport cytoscape from 'cytoscape';\nimport { makeThumb, applyLayout } from './generating-tools';\nimport {\n  GraphRegister,\n  registerGraphs,\n  makeFile,\n  computeInvariants,\n} from './register-graphs';\n\nconsole.log('Creating files for Complete graphs');\nconsole.log('==================================');\n\n/* Define the function that creates a graph, for any given parameter(s) */\nfunction makeGraph(N: number) {\n  const cy = cytoscape();\n\n  for (let i = 0; i < N; i += 1) {\n    cy.add({ group: 'nodes', data: { id: `N-${i}` } });\n    for (let j = 0; j < i; j += 1) {\n      cy.add({\n        group: 'edges',\n        data: {\n          source: cy.nodes()[j].id(),\n          target: cy.nodes()[i].id(),\n          id: `E-${j}-${i}`,\n        },\n      });\n    }\n  }\n  // cy.layout({ name: 'circle', radius: 200 }).run();\n  // cy.zoom(1);\n  // cy.panBy({ x: 600, y: 500 });\n\n  return cy;\n}\n\nconst layoutOpts = {\n  name: 'cose',\n  boundingBox: { x1: 0, y1: 0, x2: 300, y2: 300 },\n};\n\nconst register = [] as GraphRegister[];\n\n/* Create a list of graphs */\nfor (let i = 2; i < 9; i += 1) {\n  const cy = makeGraph(i);\n\n  const id = {\n    family: 'Complete',\n    name: `Complete of order ${i}`,\n    file: `complete_${i}`,\n    invariants: computeInvariants(cy),\n  };\n\n  const layouted = applyLayout(cy, layoutOpts); // async, returns promise\n\n  layouted\n    .then(() => makeFile(cy, `./src/graph-gallery/${id.file}.data`))\n    .catch((err) => {\n      console.error(err);\n    });\n\n  layouted\n    .then(() => makeThumb(cy, `./src/graph-gallery/${id.file}.png`))\n    .catch((err) => {\n      console.error(err);\n    });\n\n  register.push(id);\n}\n\n// register the graph registers\nregisterGraphs(register);\n\n// NOTE\n// The extension \".data\" is to avoid problems with Parcel bundler. If the extension is .json,\n// then parcel does not import the dependency correctly.\n","/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-console */\n\n// Run this file from the command line to generate the graph json files\n// $ node make-trivalent-graphs.ts\n\nimport cytoscape from 'cytoscape';\nimport { makeThumb, applyLayout } from './generating-tools';\nimport {\n  GraphRegister,\n  registerGraphs,\n  makeFile,\n  computeInvariants,\n} from './register-graphs';\n\nconst matrices = [\n  '2  1 1 1',\n  '2  0 3 0',\n  '4  1 0 0 1 1 0 1 1 1 0',\n  '4  0 0 1 2 1 0 1 1 0 0',\n  '4  0 0 2 1 1 0 1 0 1 0',\n  '4  0 0 2 1 0 1 2 0 0 0',\n  '4  0 1 1 1 0 1 1 0 1 0',\n  '6  0 0 0 0 2 1 1 0 0 1 0 1 0 0 1 1 0 1 0 0 0',\n  '6  1 0 0 0 1 0 1 0 0 1 0 1 0 0 1 1 0 1 0 1 0',\n  '6  0 0 0 1 1 1 0 0 0 2 1 1 0 0 1 1 0 0 0 0 0',\n  '6  0 0 0 2 1 0 0 0 0 2 1 1 0 0 1 0 0 1 0 0 0',\n  '6  0 0 0 1 1 1 1 0 0 1 0 1 0 0 1 1 0 0 0 1 0',\n  '6  0 0 0 1 0 2 0 0 0 2 1 1 0 1 0 1 0 0 0 0 0',\n  '6  0 0 0 2 0 1 0 0 0 2 1 1 0 1 0 0 0 1 0 0 0',\n  '6  0 0 0 2 0 1 1 0 0 1 0 1 0 1 0 0 0 1 0 1 0',\n  '6  0 0 0 2 1 0 0 0 1 0 2 0 0 2 1 0 0 0 0 0 0',\n  '6  0 0 0 1 1 1 0 0 2 0 1 0 0 2 1 0 0 0 0 0 0',\n  '6  0 0 0 1 1 1 1 0 1 0 0 0 0 2 1 0 0 1 0 0 0',\n  '6  0 0 0 1 1 1 1 0 1 0 0 1 0 1 0 0 0 1 0 1 0',\n  '6  0 0 0 1 1 1 0 0 1 1 1 1 0 1 0 0 0 1 0 0 0',\n  '6  0 0 0 1 1 1 0 0 1 1 1 0 1 1 1 0 0 0 0 0 0',\n  '6  0 0 1 0 1 1 0 0 2 0 1 0 0 2 0 0 0 1 0 0 0',\n  '6  0 0 1 1 0 1 0 0 1 1 1 0 0 2 0 0 0 1 0 0 0',\n  '6  0 0 1 1 1 0 0 0 1 1 1 0 0 1 1 0 0 1 0 0 0',\n  '8  0 0 0 0 0 2 1 0 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 1 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 0 0 1 2 0 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 0 1 1 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 0 2 0 1 1 0 0 0 1 0 0 0 0 0 0 2 1 1 0 0 1 0 1 0 0 1 0 0 0 0 0 0',\n  '8  1 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 2 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0',\n  '8  1 0 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 1 0 0 1 0 0 1 0 1 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 1 0 0 0 1 0 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0',\n  '8  0 0 0 0 2 0 1 0 0 0 0 0 2 1 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 0 2 0 1 0 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 0 2 1 0 0 0 0 0 2 1 1 0 0 0 1 1 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 2 1 0 0 0 0 0 0 2 1 0 0 0 0 0 2 1 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 0 2 1 0 1 0 0 0 1 0 1 0 0 0 1 1 0 0 0 0 0 0 0 1 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 0 2 0 1 0 0 0 0 2 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 2 1 0 0 0 0 0 0 2 0 1 0 0 0 0 2 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 0 1 1 0 0 0 1 0 0 0 0 0 0 2 1 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 0 0 1 0',\n  '8  0 0 0 0 2 1 0 0 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 0 0 1 0',\n  '8  0 0 0 0 1 1 0 1 1 0 0 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 1 0 1 0',\n  '8  0 0 0 0 1 0 0 2 0 0 0 0 1 2 0 0 0 0 2 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 2 0 0 1 0 0 0 0 1 2 0 0 0 0 2 0 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 2 0 0 1 0 0 0 0 1 2 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 0 0 0 2 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0',\n  '8  0 0 0 0 1 0 1 1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 1 1 0 0 1 0 0 0',\n  '8  0 0 0 0 1 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 2 0 0 0 0 0 0 1 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 0 0 0 1 1 1 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 1 2 0 0 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 0 0 1 0',\n  '8  0 0 0 0 1 2 0 0 0 0 0 1 0 2 0 0 0 0 1 1 1 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 2 1 0 0 0 0 0 1 0 2 0 0 0 0 2 0 1 0 0 0 1 2 0 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 0 0 0 2 0 1 0 0 0 2 1 0 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 1 0 2 0 0 0 0 2 0 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 1 0 0 1 0 0 0 0 0 2 1 0 0 0 0 0 0 1 0 0 0',\n  '8  0 0 0 0 2 1 0 0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 2 1 0 0 0 0 0 0 1 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 1 0 2 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0 1 0',\n  '8  0 0 0 0 1 2 0 0 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 2 0 1 0 0 0 0 1 1 1 0 0 2 0 1 0 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 1 0 1 1 0 0 0 2 1 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 2 0 1 0 0 0 0 1 1 1 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0',\n  '8  0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 0 1 1 1 1 0 1 0 0 0 0 1 0 0 0 1 0 0 0',\n  '8  1 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 1 1 0 0 1 1 1 0 0 1 0 0 0 1 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 0 0 0 1 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 1 0 0 0 0 1 1 0 1 0 0 1 0 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 1 0 0 1 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0',\n  '8  0 0 0 2 0 0 1 0 0 0 0 1 0 1 1 0 0 0 1 1 1 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0',\n  '8  0 0 0 2 0 0 1 0 0 0 0 2 0 1 0 0 0 0 2 1 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 2 0 0 1 0 0 0 0 2 0 1 0 0 0 0 2 0 1 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 0 0 0',\n  '8  0 0 0 1 0 2 0 0 0 0 0 1 0 1 1 0 0 0 1 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 1 0 2 0 0 0 0 0 2 0 1 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0',\n  '8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 0 0 0 2 1 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 0 0 0 0 2 1 0 0 2 0 0 1 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 0 1 0 0 0 2 0 1 0 0 0 0 0 2 1 0 0 2 0 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 1 0 0 0 2 0 0 1 0 0 0 0 0 0 0 1 0',\n  '8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 0 1 0 0 2 0 0 0 0 2 0 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 1 0 0 0 2 0 0 0 0 1 1 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 1 0 0 0 0 1 1 0 1 1 0 0 1 0 0 0 0 0 1 1 0 0 1 1 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 1 0 1 0 0 1 1 0 0 0 0 0 0',\n  '8  0 0 0 1 1 0 0 1 0 0 0 1 1 0 1 0 0 0 2 1 0 0 0 0 2 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 1 1 0 0 1 0 0 0 1 2 0 0 0 0 0 1 1 1 0 0 0 2 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 1 1 0 1 0 0 0 0 1 1 0 1 0 0 0 2 1 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 1 1 0 1 0 0 0 0 1 2 0 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1 2 0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 2 0 0 1 0 0 0 0 1 1 1 0 0 0 1 1 0 1 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 1 0 1 0 1 0 0 0 1 1 1 0 0 0 1 0 1 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0',\n  '8  0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1 1 0 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 0 0 1 0 1 1 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0',\n  '8  0 0 0 1 1 0 0 1 0 0 0 0 1 1 1 0 0 0 1 2 0 0 2 0 0 0 0 0 0 0 0 0 1 0 0 0',\n];\n\nconsole.log('Creating files for trivalent graphs');\nconsole.log('===================================');\n\nfunction graphFromUpperTriangular(M: string): cytoscape.Core {\n  const cy = cytoscape();\n\n  const g = (Number(M.split('  ')[0]) + 2) / 2;\n  // const N = 2 * g - 2;\n  const upper = M.split('  ')[1].split(' ').map(Number);\n\n  // to index the upper triangular matrix easily\n  let k = 0;\n\n  // first add all vertices\n  for (let i = 0; i < 2 * g - 2; i += 1) {\n    cy.add({ group: 'nodes', data: { id: `N-${i}` } });\n  }\n\n  // then the edges\n  for (let i = 0; i < 2 * g - 2; i += 1) {\n    for (let j = i; j < 2 * g - 2; j += 1) {\n      // add the correct amount of edges\n      for (let l = 0; l < upper[k]; l += 1) {\n        cy.add({\n          group: 'edges',\n          data: {\n            source: cy.nodes()[i].id(),\n            target: cy.nodes()[j].id(),\n            id: `E-${i}-${j}-${l}`,\n          },\n        });\n      }\n\n      // increment counter for upper triangular matrix indexing\n      k += 1;\n    }\n  }\n\n  return cy;\n}\n\nconst register = [] as GraphRegister[];\n\nlet i = 0;\nlet previousGenus = 1;\n\nfor (const M of matrices) {\n  const g = (Number(M.split('  ')[0]) + 2) / 2;\n\n  // reset the counter if necessary\n  if (g !== previousGenus) i = 0;\n  previousGenus = g;\n\n  const layoutOpts = {\n    name: 'cose',\n    boundingBox: { x1: 0, y1: 0, x2: 300, y2: 300 },\n  };\n\n  const cy = graphFromUpperTriangular(M); // sync\n\n  const id = {\n    family: 'Trivalent',\n    name: `Trivalent ${g}<sub>${i}</sub>`,\n    file: `trivalent_${g}_${i}`,\n    invariants: computeInvariants(cy),\n  };\n\n  const layouted = applyLayout(cy, layoutOpts); // async, returns promise\n\n  layouted\n    .then(() => makeFile(cy, `./src/graph-gallery/${id.file}.data`))\n    .catch((err) => {\n      console.error(err);\n    });\n\n  layouted\n    .then(() => makeThumb(cy, `./src/graph-gallery/${id.file}.png`))\n    .catch((err) => {\n      console.error(err);\n    });\n\n  register.push(id);\n\n  i += 1;\n}\n\nregisterGraphs(register);\n\n// const promises = [] as ReturnType<typeof makeThumb>[];\n\n// Promise.allSettled(promises)\n//   .then(() => {\n//     console.log('');\n//     console.log('Trivalent graphs created.');\n//     process.exit();\n//   })\n//   .catch((err) => {\n//     console.error(err);\n//   });\n"],"names":["$2e1c1dc59c685f84$var$snap","$parcel$interopDefault","$dRSqW$cytosnap","$2e1c1dc59c685f84$export$55eee5fe1d037493","cy","filename","start","then","shot","elements","json","layout","name","style","selector","resolvesTo","format","width","height","background","img","data","replace","buf","Buffer","from","$dRSqW$fspromises","writeFile","console","log","catch","err","error","$2e1c1dc59c685f84$export$8ba37776491df5b8","lay","run","promiseOn","$c65becad8c260f5b$export$2e2bcd8739ae039","collection","cycles","kruskal","absoluteComplement","edges","map","backEdge","aStar","root","source","goal","target","weight","e","Number","POSITIVE_INFINITY","path","union","noCycle","cycle","$dRSqW$cytoscape","length","minCycle","size","reduce","acc","value","$d7b1f0e2c65e2a64$export$2e2bcd8739ae039","spanningTree","$142f5274d4c546e3$export$2e2bcd8739ae039","fW","floydWarshall","nodes","N","distance","Infinity","i","j","$8fd97d0e40e5a234$export$2e2bcd8739ae039","options","indexOf","indexing","Map","n","id","idx","get","RangeError","$8fd97d0e40e5a234$export$13453081627eff1c","directed","subgraph","parentCy","numNodes","m","Array","fill","forEach","isNode","$034ff17f36f93702$export$6e59a0e795cac65e","dSeq","degree","sort","a","b","d","A","$dRSqW$mathjs","det","numEdges","girth","degSequence","components","circuitRank","diameter","detAdjacency","$034ff17f36f93702$export$ef1d1a6f121e4697","jsonString","JSON","stringify","$dRSqW$fs","$034ff17f36f93702$export$fcfbe8a96738f5e9","existsSync","closeSync","openSync","file","readFileSync","writeFileSync","parse","toString","push","$034ff17f36f93702$var$registerList","stream","createWriteStream","flags","write","end","$034ff17f36f93702$var$registerAssets","$8d01ee2c09b5d5b9$var$makeGraph","i1","add","group","$8d01ee2c09b5d5b9$var$layoutOpts","boundingBox","x1","y1","x2","y2","$8d01ee2c09b5d5b9$var$register","family","invariants","layouted","$6e9264229edefb21$var$matrices","$6e9264229edefb21$var$graphFromUpperTriangular","M1","g","split","upper","k","i2","l","$6e9264229edefb21$var$register","$6e9264229edefb21$var$i","$6e9264229edefb21$var$previousGenus","M","layoutOpts"],"version":3,"file":"generate-graphs.js.map","sourceRoot":"../"}