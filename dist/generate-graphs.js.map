{"mappings":"+JAeA,MAAMA,EAAOC,EAAAC,EAAA,GAEb,SAASC,EAAUC,EAAoBC,GACrCL,EACGM,QACAC,MAAK,IACJP,EAAKQ,KAAK,CACRC,SAAUL,EAAIM,OAA0BD,SACxCE,OAAQ,CAAEC,KAAM,UAChBC,MAAO,CAEL,CACEC,SAAU,OACVD,MAAO,CACL,mBAAoB,QAGxB,CACEC,SAAU,OACVD,MAAO,CACL,aAAc,MACd,cAAe,YAIrBE,WAAY,YACZC,OAAQ,MACRC,MAAO,IACPC,OAAQ,IACRC,WAAY,kBAGfZ,MAAMa,IAEL,MAAMC,EAAOD,EAAIE,QAAO,2BAA6B,IAC/CC,EAAMC,OAAOC,KAAKJ,EAAM,UAC9BK,EAAAC,UAAatB,EAAUkB,GACpBhB,MAAK,KACJqB,QAAQC,IAAI,mBAAqBxB,EAAS,IAE3CyB,OAAOC,IACNH,QAAQI,MAAMD,EAAI,GAClB,G,CAIV,SAASE,EAAY7B,EAAoBO,GACvC,MAAMuB,EAAM9B,EAAGO,OAAOA,GAChBwB,EAAOD,EAAIE,UAAU,cAE3B,OADAF,EAAIG,MACGF,C,CAGT,SAASG,EAAyBC,GAChC,MAAMnC,EAAKH,EAAAuC,EAAA,GAELC,EAAIF,EAAEG,OAGZ,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAGE,GAAK,EAC1BvC,EAAGwC,IAAI,CAAEC,MAAO,QAASxB,KAAM,CAAEyB,GAAI,KAAKH,OAI5C,IAAK,IAAII,EAAI,EAAGA,EAAIN,EAAGM,GAAK,EAC1B,IAAK,IAAIC,EAAID,EAAGC,EAAIP,EAAGO,GAAK,EAE1B,IAAK,IAAIC,EAAI,EAAGA,EAAIV,EAAEQ,GAAGC,GAAIC,GAAK,EAChC7C,EAAGwC,IAAI,CACLC,MAAO,QACPxB,KAAM,CACJ6B,OAAQ9C,EAAG+C,QAAQJ,GAAGD,KACtBM,OAAQhD,EAAG+C,QAAQH,GAAGF,KACtBA,GAAI,KAAKC,KAAKC,KAAKC,OAM7B,OAAO7C,C,KCrCTiD,EA7BA,SAAeC,GACb,MAGMC,EAHeD,EAAWE,SAAQ,IAAM,IACfC,qBAAqBC,QAE3BC,KAAKC,GAIjBN,EAAWO,MAAM,CAC1BC,KAAMF,EAASV,SACfa,KAAMH,EAASR,SACfY,OANmBC,GACnBL,IAAaK,EAAIC,OAAOC,kBAAoB,IAQpCC,KAAKC,MAAMT,KAGjBU,EAAU,CACdC,MAAOtE,EAAAuC,EAAA,GAAYc,aACnBZ,OAAQwB,OAAOC,mBAGXK,EAAWjB,EACdI,KAAKY,IAAW,C,MAAEA,EAAO7B,OAAQ6B,EAAMb,QAAQe,WAC/CC,QAAO,CAACC,EAAKJ,IAAWI,EAAIjC,OAAS6B,EAAM7B,OAASiC,EAAMJ,GAAQD,GAErE,MAAO,CAAEF,KAAMI,EAASD,MAAOK,MAAOJ,EAAS9B,O,MCjBjDmC,EAjBA,SAAqBvB,GACnB,MAAMwB,EAAexB,EAAWE,SAAQ,IAAM,IAa9C,OAXkBsB,EAAarB,qBAAqBC,QAE3BC,KAAKC,GACjBkB,EAAajB,MAAM,CAC5BC,KAAMF,EAASV,SACfa,KAAMH,EAASR,WAGPgB,KAAKC,MAAMT,I,MCQzBmB,EArBA,SAAkBzB,GAChB,MAAM0B,EAAK1B,EAAW2B,cAAc,CAAEjB,OAAQ,IAAM,IAC9Cb,EAAQG,EAAWH,QACnBV,EAAIU,EAAMT,OAEhB,IAAI0B,EAAOnE,EAAAuC,EAAA,GAAYc,aACnB4B,GAAYC,IAEhB,IAAK,IAAIxC,EAAI,EAAGA,EAAIF,EAAGE,GAAK,EAC1B,IAAK,IAAIK,EAAIL,EAAGK,EAAIP,EAAGO,GAAK,EACtBgC,EAAGE,SAAS/B,EAAMR,GAAIQ,EAAMH,IAAMkC,IACpCA,EAAWF,EAAGE,SAAS/B,EAAMR,GAAIQ,EAAMH,IACvCoB,EAAOY,EAAGZ,KAAKjB,EAAMR,GAAIQ,EAAMH,IAAIqB,MAAM,CAAClB,EAAMR,GAAIQ,EAAMH,MAMhE,MAAO,C,KAAEoB,EAAMQ,MAAOM,E,MCwCxBE,EAtCA,SACE9B,EACA+B,EAII,IAEJ,MAAMC,EAAUD,EAAQE,UAxCnB,SAA4BjC,GACjC,MAAMH,EAAQG,EAAWH,QACnBQ,EAAM,IAAI6B,IAAoBrC,EAAMQ,KAAI,CAAC8B,EAAG9C,IAAM,CAAC8C,EAAE3C,KAAMH,MACjE,OAAQ8C,IACN,MAAMC,EAAM/B,EAAIgC,IAAIF,EAAE3C,MACtB,QAAmB,IAAR4C,EACT,MAAM,IAAIE,WAAW,iBAAiBH,EAAE/E,UAC1C,OAAOgF,CAAG,C,CAiCwBG,CAAmBvC,GACjDwC,EAAWT,EAAQS,WAAY,EAC/BC,EAAWV,EAAQU,WAAY,EAE/B5C,EAAQG,EAAWH,QACnB6C,EAAW7C,EAAM,GAAG/C,KAEpB6F,EAAWF,EAAWC,EAAS7C,QAAQsB,OAAStB,EAAMsB,OAEtDyB,EAAI,IAAIC,MAAMF,GACjBG,KAAK,MACLzC,KAAI,IAAM,IAAIwC,MAAcF,GAAUG,KAAK,KAgB9C,OAdA9C,EAAWI,QAAQ2C,SAASpC,IAC1B,MAAMf,EAASe,EAAEf,SACXE,EAASa,EAAEb,SAEjB,GAAIF,EAAOoD,UAAYlD,EAAOkD,SAAU,CACtC,MAAM3D,EAAI2C,EAAQrB,EAAEf,UACdF,EAAIsC,EAAQrB,EAAEb,UACpB8C,EAAEvD,GAAGK,IAAM,EACN8C,IACHI,EAAElD,GAAGL,IAAM,E,KAKVuD,C,ECvCT,SAASK,EAAkBnG,GACzB,MAAMoG,EAAOpG,EACVK,WACA0C,QACAQ,KAAK8B,GAAMA,EAAEgB,QAAO,KACpBC,MAAK,CAACC,EAAGC,IAAMA,EAAID,IAEtB,IAAIE,EACJ,GAAIzG,EAAG+C,QAAQsB,OAAS,EAAG,CACzB,MAAMqC,EAAI1B,EAAgBhF,EAAGK,YAC7BoG,GAAI,EAAAE,EAAAC,KAAIF,E,CAGV,MAAO,CACLb,SAAU7F,EAAGK,WAAW0C,QAAQsB,OAChCwC,SAAU7G,EAAGK,WAAWiD,QAAQe,OAChCyC,MAAO7D,EAAMjD,EAAGK,YAAYmE,MAC5BuC,YAAaX,EACbY,WAAYhH,EAAGK,WAAW2G,aAAa1E,OACvC2E,YAAaxC,EAAYzE,EAAGK,YAAYiC,OACxC4E,SAAUvC,EAAS3E,EAAGK,YAAYmE,MAClC2C,aAAcV,E,CAIlB,SAASW,EAASpH,EAAoBC,GACpC,MAAMK,EAAON,EAAGM,OACV+G,EAAaC,KAAKC,UAAUjH,EAAM,KAAM,GAE9CkH,EAAAjG,UAAatB,EAAUoH,EAAY,IAAK1F,IACtC,GAAIA,EAAK,MAAMA,EACfH,QAAQC,IAAI,cAAcxB,IAAW,G,CA2DzC,SAASwH,EAAexG,IArDxB,SAAsBA,GACpB,MAAMhB,EAAW,qCAEZuH,EAAAE,WAAczH,IAEjBuH,EAAAG,UAAaH,EAAAI,SAAY3H,EAAU,MAIrC,MAAM4H,EAAOL,EAAAM,aAAgB7H,GAG7B,GAAoB,IAAhB4H,EAAKvF,OAEPkF,EAAAO,cAAiB9H,EAAUqH,KAAKC,UAAUtG,QACrC,CAEL,MAAMX,EAAOgH,KAAKU,MAAMH,EAAKI,YAE7B3H,EAAK4H,QAAQjH,GACbuG,EAAAO,cAAiB9H,EAAUqH,KAAKC,UAAUjH,G,EAkC5C6H,CAAalH,GA9Bf,SAAwBA,GACtB,MAeMmH,EAASZ,EAAAa,kBAfE,qCAe6B,CAAEC,MAAO,MAEvDrH,EAAKgF,SAASQ,IACZ2B,EAAOG,MACL,gBAAgB9B,EAAEoB,yCAAyCpB,EAAEoB,sCAE/DO,EAAOG,MACL,gBAAgB9B,EAAEoB,8CAA8CpB,EAAEoB,oCACnE,IAEHO,EAAOI,K,CAKPC,CAAexH,E,CC9GjB,SAASyH,EAAUrG,GACjB,MAAMrC,EAAKH,EAAAuC,EAAA,GAEX,IAAK,IAAIO,EAAI,EAAGA,EAAIN,EAAGM,GAAK,EAAG,CAC7B3C,EAAGwC,IAAI,CAAEC,MAAO,QAASxB,KAAM,CAAEyB,GAAI,KAAKC,OAC1C,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAGC,GAAK,EAC1B5C,EAAGwC,IAAI,CACLC,MAAO,QACPxB,KAAM,CACJ6B,OAAQ9C,EAAG+C,QAAQH,GAAGF,KACtBM,OAAQhD,EAAG+C,QAAQJ,GAAGD,KACtBA,GAAI,KAAKE,KAAKD,M,CAStB,OAAO3C,C,CAvBTwB,QAAQC,IAAI,sCA0BZ,MAAMkH,EAAa,CACjBnI,KAAM,SACNoI,YAAa,CAAEC,GAAI,EAAGC,GAAI,EAAGC,GAAI,IAAKC,GAAI,MAGtCC,EAAW,GAGjB,IAAK,IAAI1G,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAG,CAC7B,MAAMvC,EAAK0I,EAAUnG,GAEfG,EAAK,CACTwG,OAAQ,WACRC,QAAS,qBAAqB5G,IAC9B6G,QAAS,mBAAmB7G,IAC5B8G,QAAS,6BAA2B9G,IACpCsF,KAAM,YAAYtF,IAClB+G,WAAYnD,EAAkBnG,IAG1BuJ,EAAW1H,EAAY7B,EAAI2I,GAEjCY,EACGpJ,MAAK,IAAMiH,EAASpH,EAAI,4BAA4B0C,EAAGmF,eACvDnG,OAAOC,IACNH,QAAQI,MAAMD,EAAI,IAGtB4H,EACGpJ,MAAK,IAAMJ,EAAUC,EAAI,4BAA4B0C,EAAGmF,cACxDnG,OAAOC,IACNH,QAAQI,MAAMD,EAAI,IAGtBsH,EAASf,KAAKxF,E,CAIhB+E,EAAewB,GC9Df,MAAMO,EAAW,CACf,WACA,WACA,yBACA,yBACA,yBACA,yBACA,yyBC,GAChC,MAAM1J,EAAKH,EAAAuC,EAAA,GAELuH,GAAK7F,OAAO4F,EAAEE,MAAM,MAAM,IAAM,GAAK,EAErCC,EAAQH,EAAEE,MAAM,MAAM,GAAGA,MAAM,KAAKrG,IAAIO,QAG9C,IAAIgG,EAAI,EAGR,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAIJ,EAAI,EAAGI,GAAK,EAClC/J,EAAGwC,IAAI,CAAEC,MAAO,QAASxB,KAAM,CAAEyB,GAAI,KAAKqH,OAI5C,IAAK,IAAIpH,EAAI,EAAGA,EAAI,EAAIgH,EAAI,EAAGhH,GAAK,EAClC,IAAK,IAAIC,EAAID,EAAGC,EAAI,EAAI+G,EAAI,EAAG/G,GAAK,EAAG,CAErC,IAAK,IAAIC,EAAI,EAAGA,EAAIgH,EAAMC,GAAIjH,GAAK,EACjC7C,EAAGwC,IAAI,CACLC,MAAO,QACPxB,KAAM,CACJ6B,OAAQ9C,EAAG+C,QAAQJ,GAAGD,KACtBM,OAAQhD,EAAG+C,QAAQH,GAAGF,KACtBA,GAAI,KAAKC,KAAKC,KAAKC,OAMzBiH,GAAK,C,CAIT,OAAO9J,C,CArCTwB,QAAQC,IAAI,uCAwCZ,MAAMuI,EAAW,GAEjB,IAAIC,EAAI,EACJC,EAAgB,EAEpB,IAAK,MAAM/H,KAAKqH,EAAU,CACxB,MAAMG,GAAK7F,OAAO3B,EAAEyH,MAAM,MAAM,IAAM,GAAK,EAGvCD,IAAMO,IAAeD,EAAI,GAC7BC,EAAgBP,EAEhB,MAAMQ,EAAa,CACjB3J,KAAM,OACNoI,YAAa,CAAEC,GAAI,EAAGC,GAAI,EAAGC,GAAI,IAAKC,GAAI,MAGtChJ,EAAKyJ,EAAyBtH,GAE9BO,EAAK,CACTwG,OAAQ,YACRC,QAAS,aAAaQ,SAASM,UAC/Bb,QAAS,kBAAkBO,SAASM,UACpCZ,QAAS,mBAAmBM,SAASM,UACrCpC,KAAM,aAAa8B,KAAKM,IACxBX,WAAYnD,EAAkBnG,IAG1BuJ,EAAW1H,EAAY7B,EAAImK,GAEjCZ,EACGpJ,MAAK,IAAMiH,EAASpH,EAAI,4BAA4B0C,EAAGmF,eACvDnG,OAAOC,IACNH,QAAQI,MAAMD,EAAI,IAGtB4H,EACGpJ,MAAK,IAAMJ,EAAUC,EAAI,4BAA4B0C,EAAGmF,cACxDnG,OAAOC,IACNH,QAAQI,MAAMD,EAAI,IAGtBqI,EAAS9B,KAAKxF,GAEduH,GAAK,C,CAGPxC,EAAeuC,GCxLfxI,QAAQC,IAAI,kCAWZ,MAAM2I,EAAW,GAMjB,CACE,MAAMpK,EAAKkC,EAAyB,CAClC,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KAGN3B,EAAS,CACbC,KAAM,SACNoI,YAAa,CAAEC,GAAI,EAAGC,GAAI,EAAGC,GAAI,IAAKC,GAAI,MAGtCtG,EAAK,CACTwG,OAAQ,UACRC,QAAS,aACRC,QAAQ,aACRC,QAAQ,aACRxB,KAAK,aACNyB,WAAYnD,EAAkBnG,IAG1BuJ,EAAW1H,EAAY7B,EAAIO,GACjCgJ,EACGpJ,MAAK,IAAMiH,EAASpH,EAAI,4BAA4B0C,EAAGmF,eACvDnG,OAAOC,IACNH,QAAQI,MAAMD,EAAI,IAEtB4H,EACGpJ,MAAK,IAAMJ,EAAUC,EAAI,4BAA4B0C,EAAGmF,cACxDnG,OAAOC,IACNH,QAAQI,MAAMD,EAAI,IAEtByI,EAASlC,KAAKxF,E,CAOhB,CACE,MAAM1C,EAAKkC,EAAyB,CAClC,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAGlB3B,EAAS,CACbC,KAAM,OACNoI,YAAa,CAAEC,GAAI,EAAGC,GAAI,EAAGC,GAAI,IAAKC,GAAI,MAGtCtG,EAAK,CACTwG,OAAQ,WACRC,QAAS,OACTC,QAAS,OACTC,QAAS,SACRxB,KAAK,OACNyB,WAAYnD,EAAkBnG,IAG1BuJ,EAAW1H,EAAY7B,EAAIO,GACjCgJ,EACGpJ,MAAK,IAAMiH,EAASpH,EAAI,4BAA4B0C,EAAGmF,eACvDnG,OAAOC,IACNH,QAAQI,MAAMD,EAAI,IAEtB4H,EACGpJ,MAAK,IAAMJ,EAAUC,EAAI,4BAA4B0C,EAAGmF,cACxDnG,OAAOC,IACNH,QAAQI,MAAMD,EAAI,IAEtByI,EAASlC,KAAKxF,E,CAQhB,CACE,MAAM1C,EAAKkC,EAAyB,CAClC,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,KAGZ3B,EAAS,CACbC,KAAM,SACNoI,YAAa,CAAEC,GAAI,EAAGC,GAAI,EAAGC,GAAI,IAAKC,GAAI,MAGtCtG,EAAK,CACTwG,OAAQ,WACRC,QAAS,aACTC,QAAS,WACTC,QAAS,WACTxB,KAAM,aACNyB,WAAYnD,EAAkBnG,IAG1BuJ,EAAW1H,EAAY7B,EAAIO,GACjCgJ,EACGpJ,MAAK,IAAMiH,EAASpH,EAAI,4BAA4B0C,EAAGmF,eACvDnG,OAAOC,IACNH,QAAQI,MAAMD,EAAI,IAEtB4H,EACGpJ,MAAK,IAAMJ,EAAUC,EAAI,4BAA4B0C,EAAGmF,cACxDnG,OAAOC,IACNH,QAAQI,MAAMD,EAAI,IAEtByI,EAASlC,KAAKxF,E,CAoBhB,CACE,MAAM1C,EAAKkC,EAAyB,CAClC,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAGrBlC,EAAG+C,QAAQsH,WAAU,CAACC,EAAK/H,KACzB,MAAMgI,EAAI,IACJC,EAAcC,KAAKC,GAAK,IAAhB,GACRC,EAAaF,KAAKC,GAAK,IAAhB,GAEPjE,EAAI8D,GAAK,EAAIE,KAAKG,IAAIJ,GAASC,KAAKG,IAAID,IAE9C,OAAQpI,EAAI,GACV,KAAK,EACH,MAAO,CAAEsI,EAAG,IAAKC,EAAG,IACtB,KAAK,EACH,MAAO,CACLD,EAAG,IAAMpE,EAAIgE,KAAKM,IAAIP,EAAQG,GAC9BG,EAAG,GAAKrE,EAAIgE,KAAKG,IAAIJ,EAAQG,IAEjC,KAAK,EACH,MAAO,CACLE,EAAG,IAAMpE,EAAIgE,KAAKM,IAAIP,EAAQG,GAC9BG,EAAG,GAAKrE,EAAIgE,KAAKG,IAAIJ,EAAQG,IAEjC,KAAK,EACH,MAAO,CACLE,EAAG,IAAMpE,EAAIgE,KAAKM,IAAIP,EAAQG,GAC9BG,EAAG,GAAKrE,EAAIgE,KAAKG,IAAIJ,EAAQG,IAEjC,KAAK,EACH,MAAO,CACLE,EAAG,IAAMpE,EAAIgE,KAAKM,IAAIP,EAAQG,GAC9BG,EAAG,GAAKrE,EAAIgE,KAAKG,IAAIJ,EAAQG,IAEjC,KAAK,EACH,MAAO,CAAEE,EAAG,IAAMN,EAAIE,KAAKO,IAAIR,GAAQM,EAAG,KAC5C,KAAK,EACH,MAAO,CAAED,EAAG,IAAMN,EAAIE,KAAKO,IAAIR,GAAQM,EAAG,KAC5C,QACE,MAAO,CAAED,EAAG,EAAGC,EAAG,G,IAIxB,MAAMvK,EAAS,CACbC,KAAM,SACNoI,YAAa,CAAEC,GAAI,EAAGC,GAAI,EAAGC,GAAI,IAAKC,GAAI,MAGtCtG,EAAK,CACTwG,OAAQ,QACRC,QAAS,gBACTC,QAAS,kBACTC,QAAS,gBACTxB,KAAM,gBACNyB,WAAYnD,EAAkBnG,IAG1BuJ,EAAW1H,EAAY7B,EAAIO,GACjCgJ,EACGpJ,MAAK,IAAMiH,EAASpH,EAAI,4BAA4B0C,EAAGmF,eACvDnG,OAAOC,IACNH,QAAQI,MAAMD,EAAI,IAEtB4H,EACGpJ,MAAK,IAAMJ,EAAUC,EAAI,4BAA4B0C,EAAGmF,cACxDnG,OAAOC,IACNH,QAAQI,MAAMD,EAAI,IAEtByI,EAASlC,KAAKxF,E,CA2BhB+E,EAAe2C,GCrQf5I,QAAQC,IAAI,oCAEZ,MAAMwJ,EAAW,GACjb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEfA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEfA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEfA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEfA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEfA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEfA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEfA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEfA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEfA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEfA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEfA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEfA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEfA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEfA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAElBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAErBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAErBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAErBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAErBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAErBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAErBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAErBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAErBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAErBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAExBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAExBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAExBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAExBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAExBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAExBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAExBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAExBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAExBA,EAAS,IAAM,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAGxB,MAAMC,EAAW,GAEjB,IAAK,IAAI3I,EAAI,EAAGA,EAAI0I,EAAS3I,OAAQC,GAAK,EAAG,CAC3C,MAEM4H,EAAa,CACjB3J,KAAM,OACNoI,YAAa,CAAEC,GAAI,EAAGC,GAAI,EAAGC,GAAI,IAAKC,GAAI,MAGtChJ,EAAKkC,EAPD+I,EAAS1I,IASbG,EAAK,CACTwG,OAAQ,UACRC,QAAS,eAAe5G,UACxB6G,QAAS,gBAAgB7G,UACzB8G,QAAS,eAAe9G,UACxBsF,KAAM,KAAKtF,IACX+G,WAAYnD,EAAkBnG,IAG1BuJ,EAAW1H,EAAY7B,EAAImK,GAEjCZ,EACGpJ,MAAK,IAAMiH,EAASpH,EAAI,4BAA4B0C,EAAGmF,eACvDnG,OAAOC,IACNH,QAAQI,MAAMD,EAAI,IAGtB4H,EACGpJ,MAAK,IAAMJ,EAAUC,EAAI,4BAA4B0C,EAAGmF,cACxDnG,OAAOC,IACNH,QAAQI,MAAMD,EAAI,IAGtBuJ,EAAShD,KAAKxF,E,CAGhB+E,EAAeyD,GCpjBfC,QAAQC,gBAAgB","sources":["src/ts/graph-gallery-scripts/generating-tools.ts","src/ts/invariants/girth.ts","src/ts/invariants/circuitRank.ts","src/ts/invariants/diameter.ts","src/ts/utils/adjacency-matrix.ts","src/ts/graph-gallery-scripts/register-graphs.ts","src/ts/graph-gallery-scripts/make-complete-graphs.ts","src/ts/graph-gallery-scripts/make-trivalent-graphs.ts","src/ts/graph-gallery-scripts/make-more-graphs.ts","src/ts/graph-gallery-scripts/make-more-graphs-2.ts","src/ts/graph-gallery-scripts/generate-graphs.ts"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable */\n\n// const cytosnap = require( 'cytosnap');\n\nimport * as fs from 'fs/promises';\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport cytosnap from 'cytosnap';\nimport cytoscape from 'cytoscape';\n\n// list of layout extensions to use\n// NB you must `npm install` these yourself for your project\n// cytosnap.use([ 'cytoscape-dagre', 'cytoscape-cose-bilkent' ]);\n\nconst snap = cytosnap();\n\nfunction makeThumb(cy: cytoscape.Core, filename: string) {\n  snap\n    .start()\n    .then(() =>\n      snap.shot({\n        elements: (cy.json() as cytoscape.Core).elements,\n        layout: { name: 'preset' },\n        style: [\n          // http://js.cytoscape.org/#style\n          {\n            selector: 'node',\n            style: {\n              'background-color': 'red',\n            },\n          },\n          {\n            selector: 'edge',\n            style: {\n              'line-color': 'red',\n              'curve-style': 'bezier',\n            },\n          },\n        ],\n        resolvesTo: 'base64uri',\n        format: 'png',\n        width: 640,\n        height: 480,\n        background: 'transparent',\n      }),\n    )\n    .then((img: string) => {\n      // https://stackoverflow.com/questions/43487543/writing-binary-data-using-node-js-fs-writefile-to-create-an-image-file\n      const data = img.replace(/^data:image\\/\\w+;base64,/, '');\n      const buf = Buffer.from(data, 'base64');\n      fs.writeFile(filename, buf)\n        .then(() => {\n          console.log('Saved thumbnail ' + filename);\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n    });\n}\n\nfunction applyLayout(cy: cytoscape.Core, layout: cytoscape.LayoutOptions) {\n  const lay = cy.layout(layout);\n  const prom = lay.promiseOn('layoutstop');\n  lay.run();\n  return prom;\n}\n\nfunction graphFromAdjacencyMatrix(M: number[][]): cytoscape.Core {\n  const cy = cytoscape();\n\n  const N = M.length; // we assume square symmetric matrix,\n\n  // add vertices\n  for (let i = 0; i < N; i += 1) {\n    cy.add({ group: 'nodes', data: { id: `N-${i}` } });\n  }\n\n  // add edges\n  for (let i = 0; i < N; i += 1) {\n    for (let j = i; j < N; j += 1) {\n      // add the correct amount of edges\n      for (let l = 0; l < M[i][j]; l += 1) {\n        cy.add({\n          group: 'edges',\n          data: {\n            source: cy.nodes()[i].id(),\n            target: cy.nodes()[j].id(),\n            id: `E-${i}-${j}-${l}`,\n          },\n        });\n      }\n    }\n  }\n  return cy;\n}\n\nexport { makeThumb, applyLayout, graphFromAdjacencyMatrix };\n","import cytoscape, {\n  EdgeCollection,\n  Collection,\n  CollectionReturnValue,\n} from 'cytoscape';\n\n// Girth of a graph\n//\n// Definition:\n// The girth of an undirected graph is the length of a shortest cycle contained in the graph.\n// If there are no cycles in the graph, the girth is defined to be infinity by convention.\n//\n// Algorithm:\n// 1. Compute a spanning tree (use kruskal() method).\n// 2. The complement of the spanning tree is the set of back-edges.\n//    Each back-edge is on a cycle (“closing it”).\n// 3. For each back-edge: remove it from the graph and find the shortest distance\n//    between its endpoints.\n//    Use aStar() method.\n//    We can avoid removing the edge by assigning it an infinite weight.\n// 4. The cycle length is this distance + 1\n// 5. Find the min cycle length\n\ntype GirthReturnValue = {\n  path: CollectionReturnValue;\n  value: number;\n};\n\nfunction girth(collection: Collection): GirthReturnValue {\n  const spanningTree = collection.kruskal(() => 1);\n  const backEdges = spanningTree.absoluteComplement().edges();\n\n  const cycles = backEdges.map((backEdge) => {\n    const edgeWeights = (e: EdgeCollection): number =>\n      backEdge === e ? Number.POSITIVE_INFINITY : 1;\n\n    const aS = collection.aStar({\n      root: backEdge.source(),\n      goal: backEdge.target(),\n      weight: edgeWeights,\n    });\n\n    return aS.path.union(backEdge);\n  });\n\n  const noCycle = {\n    cycle: cytoscape().collection(),\n    length: Number.POSITIVE_INFINITY,\n  };\n\n  const minCycle = cycles\n    .map((cycle) => ({ cycle, length: cycle.edges().size() }))\n    .reduce((acc, cycle) => (acc.length < cycle.length ? acc : cycle), noCycle);\n\n  return { path: minCycle.cycle, value: minCycle.length };\n}\n\nexport default girth;\n","import { Collection, CollectionReturnValue } from 'cytoscape';\n\n// Circuit Rank of a graph\n//\n// Definition:\n// The circuit rank of an undirected graph is the number of independent cycles contained in the graph.\n// Also known as the 1st Betti number (the 0th Betti number is the number of connected components, and\n// all the n-th Betti numbers for n>1 are zero since a graph is one-dimensional space).\n//\n// Compare with Girth algorithm\n//\n// Algorithm:\n// 1. Compute a spanning tree (use kruskal() method).\n// 2. The complement of the spanning tree is the set of back-edges.\n//    Each back-edge is on a cycle (“closing it”).\n// 3. For each back-edge: find a path in the spanning tree\n//    joining its endpoints (use aStar() method).\n//    Add the back-edge, making thus a cycle.\n// 4. List all the cycles\n\nfunction circuitRank(collection: Collection): CollectionReturnValue[] {\n  const spanningTree = collection.kruskal(() => 1);\n\n  const backEdges = spanningTree.absoluteComplement().edges();\n\n  const cycles = backEdges.map((backEdge) => {\n    const aS = spanningTree.aStar({\n      root: backEdge.source(),\n      goal: backEdge.target(),\n    });\n\n    return aS.path.union(backEdge);\n  });\n\n  return cycles;\n}\n\nexport default circuitRank;\n","import cytoscape, { Collection, CollectionReturnValue } from 'cytoscape';\n\n// Diameter of a graph\n//\n// Definition:\n// The diameter of a graph is the longest distance between two vertices.\n//\n// Algorithm:\n// 1. Compute the distance between any pair of vertices (use floydWarshall() method)\n// 2. Find the maximum\n//\n// TO DO: use a better (non-factorial) algorithm\n\ntype DiameterReturnValue = {\n  path: CollectionReturnValue;\n  value: number;\n};\n\nfunction diameter(collection: Collection): DiameterReturnValue {\n  const fW = collection.floydWarshall({ weight: () => 1 });\n  const nodes = collection.nodes();\n  const N = nodes.length;\n\n  let path = cytoscape().collection();\n  let distance = -Infinity;\n\n  for (let i = 0; i < N; i += 1) {\n    for (let j = i; j < N; j += 1) {\n      if (fW.distance(nodes[i], nodes[j]) > distance) {\n        distance = fW.distance(nodes[i], nodes[j]);\n        path = fW.path(nodes[i], nodes[j]).union([nodes[i], nodes[j]]);\n        // we add the two endpoints in case there is no path between them.\n      }\n    }\n  }\n\n  return { path, value: distance };\n}\n\nexport default diameter;\n","import { NodeSingular, Collection } from 'cytoscape';\n\n/* NodeIndexer is a function that assigns an integer index value to each Node */\n\nexport type NodeIndexer = (n: NodeSingular) => number;\n\nexport function defaultNodeIndexer(collection: Collection): NodeIndexer {\n  const nodes = collection.nodes();\n  const map = new Map<string, number>(nodes.map((n, i) => [n.id(), i]));\n  return (n) => {\n    const idx = map.get(n.id());\n    if (typeof idx === 'undefined')\n      throw new RangeError(`Unknown node: ${n.json()}`);\n    return idx;\n  };\n}\n\n/* Adjacency matrix\nThe entry m[i][j] is the number of edges that go from node[i] to node[j].\n\nFor undirected graphs (default), this means that the matrix is symmetric. \nIf the option directed=true is specified, then each edge is counted only \nonce, for its source and target.\nIn the case of a loop of an undirected graph, the corresponding diagonal \nentry is increased by 2 (because the edge can be followed in the two \nsenses).\n\nIf the adjacencyMatrix is called for a collection with m nodes, which is \nsmaller than the entire graph of order n, then two options are possible: \nIf subgraph=false (default), then the collection is treated as a graph, \nand an mxm matrix is returned.\nIf subgraph=true, then an nxn matrix is returned, but only the edges of\nthe collection are counted, making all the rest of the rows/columns zero \n(like disconnected vertices).\n\nWeight of edges is not taken into account.\n*/\n\nfunction adjacencyMatrix(\n  collection: Collection,\n  options: {\n    indexing?: NodeIndexer;\n    directed?: boolean;\n    subgraph?: boolean;\n  } = {},\n): number[][] {\n  const indexOf = options.indexing ?? defaultNodeIndexer(collection);\n  const directed = options.directed ?? false;\n  const subgraph = options.subgraph ?? false;\n\n  const nodes = collection.nodes();\n  const parentCy = nodes[0].cy();\n\n  const numNodes = subgraph ? parentCy.nodes().size() : nodes.size();\n\n  const m = new Array(numNodes)\n    .fill(null)\n    .map(() => new Array<number>(numNodes).fill(0));\n\n  collection.edges().forEach((e) => {\n    const source = e.source();\n    const target = e.target();\n\n    if (source.isNode() && target.isNode()) {\n      const i = indexOf(e.source());\n      const j = indexOf(e.target());\n      m[i][j] += 1;\n      if (!directed) {\n        m[j][i] += 1;\n      }\n    }\n  });\n\n  return m;\n}\n\nexport default adjacencyMatrix;\n","/* eslint-disable no-console */\nimport cytoscape from 'cytoscape';\nimport * as fs from 'fs';\nimport { det } from 'mathjs';\n\n/* Can't load extensions in headless mode (no window object) ?? */\n// import invariants from '../cytoscape-extensions/invariants';\n// import utils from '../cytoscape-extensions/utils';\n\n// cytoscape.use(invariants);\n// cytoscape.use(utils);\nimport girth from '../invariants/girth';\nimport circuitRank from '../invariants/circuitRank';\nimport diameter from '../invariants/diameter';\nimport adjacencyMatrix from '../utils/adjacency-matrix';\n\ntype GraphRegister = {\n  family: string;\n  name_en: string;\n  name_fr: string;\n  name_de: string;\n  file: string;\n  invariants: {\n    numNodes: number;\n    numEdges: number;\n    girth: number | null; // json does not support Infinity\n    degSequence: number[];\n    components: number;\n    circuitRank: number;\n    diameter: number | null; // json does not support Infinity\n    detAdjacency: number | undefined;\n  };\n};\n\nfunction computeInvariants(cy: cytoscape.Core) {\n  const dSeq = cy\n    .elements()\n    .nodes()\n    .map((n) => n.degree(true))\n    .sort((a, b) => b - a);\n\n  let d;\n  if (cy.nodes().size() > 0) {\n    const A = adjacencyMatrix(cy.elements());\n    d = det(A);\n  }\n\n  return {\n    numNodes: cy.elements().nodes().size(),\n    numEdges: cy.elements().edges().size(),\n    girth: girth(cy.elements()).value,\n    degSequence: dSeq,\n    components: cy.elements().components().length,\n    circuitRank: circuitRank(cy.elements()).length,\n    diameter: diameter(cy.elements()).value,\n    detAdjacency: d,\n  };\n}\n\nfunction makeFile(cy: cytoscape.Core, filename: string) {\n  const json = cy.json();\n  const jsonString = JSON.stringify(json, null, 4);\n\n  fs.writeFile(filename, jsonString, {}, (err) => {\n    if (err) throw err;\n    console.log(`Saved file ${filename}`);\n  });\n}\n\n/* Register graphs in the graphs-list.json */\n\nfunction registerList(data: GraphRegister[]) {\n  const filename = 'src/graph-gallery/graphs-list.json';\n  // check if file exist\n  if (!fs.existsSync(filename)) {\n    // create new file if not exist\n    fs.closeSync(fs.openSync(filename, 'w'));\n  }\n\n  // read file\n  const file = fs.readFileSync(filename);\n\n  // check if file is empty\n  if (file.length === 0) {\n    // add data to json file\n    fs.writeFileSync(filename, JSON.stringify(data));\n  } else {\n    // append data to json file\n    const json = JSON.parse(file.toString()) as GraphRegister[];\n    // add json element to json object\n    json.push(...data);\n    fs.writeFileSync(filename, JSON.stringify(json));\n  }\n}\n\nfunction registerAssets(data: GraphRegister[]) {\n  const filename = 'src/graph-gallery/graphs-assets.ts';\n\n  //   // check if file exist\n  //   if (!fs.existsSync(filename)) {\n  //     // create new file if not exist\n  //     fs.closeSync(fs.openSync(filename, 'w'));\n  //   }\n\n  //   // read file\n  //   const file = fs.readFileSync(filename);\n\n  //   if (file.length == 0) {\n  //     console.log('assets file empty');\n  //   }\n\n  const stream = fs.createWriteStream(filename, { flags: 'a' });\n\n  data.forEach((d) => {\n    stream.write(\n      `export const ${d.file} = new URL('../graph-gallery/data/${d.file}.data', import.meta.url).href;`,\n    );\n    stream.write(\n      `export const ${d.file}_Icon = new URL('../graph-gallery/data/${d.file}.png', import.meta.url).href;`,\n    );\n  });\n  stream.end();\n}\n\nfunction registerGraphs(data: GraphRegister[]) {\n  registerList(data);\n  registerAssets(data);\n}\n\nexport { GraphRegister, registerGraphs, makeFile, computeInvariants };\n","/* eslint-disable no-console */\n// Run this file from the command line to generate the graph json files\n// $ node make-complete-graphs.ts\n\nimport cytoscape from 'cytoscape';\nimport { makeThumb, applyLayout } from './generating-tools';\nimport {\n  GraphRegister,\n  registerGraphs,\n  makeFile,\n  computeInvariants,\n} from './register-graphs';\n\nconsole.log('Creating files for Complete graphs');\n\n/* Define the function that creates a graph, for any given parameter(s) */\nfunction makeGraph(N: number) {\n  const cy = cytoscape();\n\n  for (let i = 0; i < N; i += 1) {\n    cy.add({ group: 'nodes', data: { id: `N-${i}` } });\n    for (let j = 0; j < i; j += 1) {\n      cy.add({\n        group: 'edges',\n        data: {\n          source: cy.nodes()[j].id(),\n          target: cy.nodes()[i].id(),\n          id: `E-${j}-${i}`,\n        },\n      });\n    }\n  }\n  // cy.layout({ name: 'circle', radius: 200 }).run();\n  // cy.zoom(1);\n  // cy.panBy({ x: 600, y: 500 });\n\n  return cy;\n}\n\nconst layoutOpts = {\n  name: 'circle',\n  boundingBox: { x1: 0, y1: 0, x2: 300, y2: 300 },\n};\n\nconst register = [] as GraphRegister[];\n\n/* Create a list of graphs */\nfor (let i = 2; i < 9; i += 1) {\n  const cy = makeGraph(i);\n\n  const id = {\n    family: 'Complete',\n    name_en: `Complete of order ${i}`,\n    name_fr: `Complet d'ordre ${i}`,\n    name_de: `Vollständiger der Ordnung ${i}`,\n    file: `complete_${i}`,\n    invariants: computeInvariants(cy),\n  };\n\n  const layouted = applyLayout(cy, layoutOpts); // async, returns promise\n\n  layouted\n    .then(() => makeFile(cy, `./src/graph-gallery/data/${id.file}.data`))\n    .catch((err) => {\n      console.error(err);\n    });\n\n  layouted\n    .then(() => makeThumb(cy, `./src/graph-gallery/data/${id.file}.png`))\n    .catch((err) => {\n      console.error(err);\n    });\n\n  register.push(id);\n}\n\n// register the graph registers\nregisterGraphs(register);\n\n// NOTE\n// The extension \".data\" is to avoid problems with Parcel bundler. If the extension is .json,\n// then parcel does not import the dependency correctly.\n","/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-console */\n\n// Run this file from the command line to generate the graph json files\n// $ node make-trivalent-graphs.ts\n\nimport cytoscape from 'cytoscape';\nimport { makeThumb, applyLayout } from './generating-tools';\nimport {\n  GraphRegister,\n  registerGraphs,\n  makeFile,\n  computeInvariants,\n} from './register-graphs';\n\nconst matrices = [\n  '2  1 1 1',\n  '2  0 3 0',\n  '4  1 0 0 1 1 0 1 1 1 0',\n  '4  0 0 1 2 1 0 1 1 0 0',\n  '4  0 0 2 1 1 0 1 0 1 0',\n  '4  0 0 2 1 0 1 2 0 0 0',\n  '4  0 1 1 1 0 1 1 0 1 0',\n  '6  0 0 0 0 2 1 1 0 0 1 0 1 0 0 1 1 0 1 0 0 0',\n  '6  1 0 0 0 1 0 1 0 0 1 0 1 0 0 1 1 0 1 0 1 0',\n  '6  0 0 0 1 1 1 0 0 0 2 1 1 0 0 1 1 0 0 0 0 0',\n  '6  0 0 0 2 1 0 0 0 0 2 1 1 0 0 1 0 0 1 0 0 0',\n  '6  0 0 0 1 1 1 1 0 0 1 0 1 0 0 1 1 0 0 0 1 0',\n  '6  0 0 0 1 0 2 0 0 0 2 1 1 0 1 0 1 0 0 0 0 0',\n  '6  0 0 0 2 0 1 0 0 0 2 1 1 0 1 0 0 0 1 0 0 0',\n  '6  0 0 0 2 0 1 1 0 0 1 0 1 0 1 0 0 0 1 0 1 0',\n  '6  0 0 0 2 1 0 0 0 1 0 2 0 0 2 1 0 0 0 0 0 0',\n  '6  0 0 0 1 1 1 0 0 2 0 1 0 0 2 1 0 0 0 0 0 0',\n  '6  0 0 0 1 1 1 1 0 1 0 0 0 0 2 1 0 0 1 0 0 0',\n  '6  0 0 0 1 1 1 1 0 1 0 0 1 0 1 0 0 0 1 0 1 0',\n  '6  0 0 0 1 1 1 0 0 1 1 1 1 0 1 0 0 0 1 0 0 0',\n  '6  0 0 0 1 1 1 0 0 1 1 1 0 1 1 1 0 0 0 0 0 0',\n  '6  0 0 1 0 1 1 0 0 2 0 1 0 0 2 0 0 0 1 0 0 0',\n  '6  0 0 1 1 0 1 0 0 1 1 1 0 0 2 0 0 0 1 0 0 0',\n  '6  0 0 1 1 1 0 0 0 1 1 1 0 0 1 1 0 0 1 0 0 0',\n  '8  0 0 0 0 0 2 1 0 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 1 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 0 0 1 2 0 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 0 1 1 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 0 2 0 1 1 0 0 0 1 0 0 0 0 0 0 2 1 1 0 0 1 0 1 0 0 1 0 0 0 0 0 0',\n  '8  1 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 2 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0',\n  '8  1 0 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 1 0 0 1 0 0 1 0 1 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 1 0 0 0 1 0 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0',\n  '8  0 0 0 0 2 0 1 0 0 0 0 0 2 1 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 0 2 0 1 0 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 0 2 1 0 0 0 0 0 2 1 1 0 0 0 1 1 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 2 1 0 0 0 0 0 0 2 1 0 0 0 0 0 2 1 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 0 2 1 0 1 0 0 0 1 0 1 0 0 0 1 1 0 0 0 0 0 0 0 1 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 0 2 0 1 0 0 0 0 2 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 2 1 0 0 0 0 0 0 2 0 1 0 0 0 0 2 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 0 1 1 0 0 0 1 0 0 0 0 0 0 2 1 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 0 0 1 0',\n  '8  0 0 0 0 2 1 0 0 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 0 0 1 0',\n  '8  0 0 0 0 1 1 0 1 1 0 0 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 1 0 1 0',\n  '8  0 0 0 0 1 0 0 2 0 0 0 0 1 2 0 0 0 0 2 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 2 0 0 1 0 0 0 0 1 2 0 0 0 0 2 0 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 2 0 0 1 0 0 0 0 1 2 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 0 0 0 2 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0',\n  '8  0 0 0 0 1 0 1 1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 1 1 0 0 1 0 0 0',\n  '8  0 0 0 0 1 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 2 0 0 0 0 0 0 1 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 0 0 0 1 1 1 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 1 2 0 0 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 0 0 1 0',\n  '8  0 0 0 0 1 2 0 0 0 0 0 1 0 2 0 0 0 0 1 1 1 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 2 1 0 0 0 0 0 1 0 2 0 0 0 0 2 0 1 0 0 0 1 2 0 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 0 0 0 2 0 1 0 0 0 2 1 0 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 1 0 2 0 0 0 0 2 0 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 1 0 0 1 0 0 0 0 0 2 1 0 0 0 0 0 0 1 0 0 0',\n  '8  0 0 0 0 2 1 0 0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 2 1 0 0 0 0 0 0 1 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 1 0 2 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0 1 0',\n  '8  0 0 0 0 1 2 0 0 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 2 0 1 0 0 0 0 1 1 1 0 0 2 0 1 0 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 1 0 1 1 0 0 0 2 1 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 2 0 1 0 0 0 0 1 1 1 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0',\n  '8  0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 0 1 1 1 1 0 1 0 0 0 0 1 0 0 0 1 0 0 0',\n  '8  1 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 1 1 0 0 1 1 1 0 0 1 0 0 0 1 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 0 0 0 1 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 0 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 0 1 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0',\n  '8  0 0 0 0 1 1 1 0 0 0 0 1 1 0 1 0 0 1 0 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 1 0 0 1 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0',\n  '8  0 0 0 2 0 0 1 0 0 0 0 1 0 1 1 0 0 0 1 1 1 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0',\n  '8  0 0 0 2 0 0 1 0 0 0 0 2 0 1 0 0 0 0 2 1 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 2 0 0 1 0 0 0 0 2 0 1 0 0 0 0 2 0 1 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 0 0 0',\n  '8  0 0 0 1 0 2 0 0 0 0 0 1 0 1 1 0 0 0 1 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 1 0 2 0 0 0 0 0 2 0 1 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0',\n  '8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 0 0 0 2 1 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 0 0 0 0 2 1 0 0 2 0 0 1 0 0 0 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 0 1 0 0 0 2 0 1 0 0 0 0 0 2 1 0 0 2 0 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 1 0 0 0 2 0 0 1 0 0 0 0 0 0 0 1 0',\n  '8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 0 1 0 0 2 0 0 0 0 2 0 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 1 0 0 0 2 0 0 0 0 1 1 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 1 0 0 0 0 1 1 0 1 1 0 0 1 0 0 0 0 0 1 1 0 0 1 1 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 1 0 1 0 0 1 1 0 0 0 0 0 0',\n  '8  0 0 0 1 1 0 0 1 0 0 0 1 1 0 1 0 0 0 2 1 0 0 0 0 2 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 1 1 0 0 1 0 0 0 1 2 0 0 0 0 0 1 1 1 0 0 0 2 0 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 1 1 0 1 0 0 0 0 1 1 0 1 0 0 0 2 1 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 1 1 0 1 0 0 0 0 1 2 0 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1 2 0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0',\n  '8  0 0 0 2 0 0 1 0 0 0 0 1 1 1 0 0 0 1 1 0 1 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0',\n  '8  0 0 0 1 0 1 0 1 0 0 0 1 1 1 0 0 0 1 0 1 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0',\n  '8  0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1 1 0 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0',\n  '8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 0 0 1 0 1 1 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0',\n  '8  0 0 0 1 1 0 0 1 0 0 0 0 1 1 1 0 0 0 1 2 0 0 2 0 0 0 0 0 0 0 0 0 1 0 0 0',\n];\n\nconsole.log('Creating files for trivalent graphs');\n\nfunction graphFromUpperTriangular(M: string): cytoscape.Core {\n  const cy = cytoscape();\n\n  const g = (Number(M.split('  ')[0]) + 2) / 2;\n  // const N = 2 * g - 2;\n  const upper = M.split('  ')[1].split(' ').map(Number);\n\n  // to index the upper triangular matrix easily\n  let k = 0;\n\n  // first add all vertices\n  for (let i = 0; i < 2 * g - 2; i += 1) {\n    cy.add({ group: 'nodes', data: { id: `N-${i}` } });\n  }\n\n  // then the edges\n  for (let i = 0; i < 2 * g - 2; i += 1) {\n    for (let j = i; j < 2 * g - 2; j += 1) {\n      // add the correct amount of edges\n      for (let l = 0; l < upper[k]; l += 1) {\n        cy.add({\n          group: 'edges',\n          data: {\n            source: cy.nodes()[i].id(),\n            target: cy.nodes()[j].id(),\n            id: `E-${i}-${j}-${l}`,\n          },\n        });\n      }\n\n      // increment counter for upper triangular matrix indexing\n      k += 1;\n    }\n  }\n\n  return cy;\n}\n\nconst register = [] as GraphRegister[];\n\nlet i = 0;\nlet previousGenus = 1;\n\nfor (const M of matrices) {\n  const g = (Number(M.split('  ')[0]) + 2) / 2;\n\n  // reset the counter if necessary\n  if (g !== previousGenus) i = 0;\n  previousGenus = g;\n\n  const layoutOpts = {\n    name: 'cose',\n    boundingBox: { x1: 0, y1: 0, x2: 300, y2: 300 },\n  };\n\n  const cy = graphFromUpperTriangular(M); // sync\n\n  const id = {\n    family: 'Trivalent',\n    name_en: `Trivalent ${g}<sub>${i}</sub>`,\n    name_fr: `Graphe cubique ${g}<sub>${i}</sub>`,\n    name_de: `Kubischer Graph ${g}<sub>${i}</sub>`,\n    file: `trivalent_${g}_${i}`,\n    invariants: computeInvariants(cy),\n  };\n\n  const layouted = applyLayout(cy, layoutOpts); // async, returns promise\n\n  layouted\n    .then(() => makeFile(cy, `./src/graph-gallery/data/${id.file}.data`))\n    .catch((err) => {\n      console.error(err);\n    });\n\n  layouted\n    .then(() => makeThumb(cy, `./src/graph-gallery/data/${id.file}.png`))\n    .catch((err) => {\n      console.error(err);\n    });\n\n  register.push(id);\n\n  i += 1;\n}\n\nregisterGraphs(register);\n\n// const promises = [] as ReturnType<typeof makeThumb>[];\n\n// Promise.allSettled(promises)\n//   .then(() => {\n//     console.log('');\n//     console.log('Trivalent graphs created.');\n//     process.exit();\n//   })\n//   .catch((err) => {\n//     console.error(err);\n//   });\n","/* eslint-disable no-console */\n// import cytoscape, { Core } from 'cytoscape';\n\nimport {\n  makeThumb,\n  applyLayout,\n  graphFromAdjacencyMatrix,\n} from './generating-tools';\n\nimport {\n  GraphRegister,\n  registerGraphs,\n  makeFile,\n  computeInvariants,\n} from './register-graphs';\n\nconsole.log('Creating files for More graphs');\n\n// type GraphData = {\n//   //   adjMatrix: number[][];\n//   cy: Core;\n//   id: GraphRegister;\n//   layoutOpts: cytoscape.LayoutOptions;\n// };\n\n// const graphData = [] as GraphData[];\n\nconst register = [] as GraphRegister[];\n\n/* \nKönigsberg graph\nhttps://en.wikipedia.org/wiki/Seven_Bridges_of_K%C3%B6nigsberg\n*/\n{\n  const cy = graphFromAdjacencyMatrix([\n    [0, 1, 0, 2],\n    [1, 0, 1, 1],\n    [0, 1, 0, 2],\n    [2, 1, 2, 0],\n  ]);\n\n  const layout = {\n    name: 'circle',\n    boundingBox: { x1: 0, y1: 0, x2: 300, y2: 300 },\n  };\n\n  const id = {\n    family: 'Special',\n    name_en: `Königsberg`,\n    name_fr: `Königsberg`,\n    name_de: `Königsberg`,\n    file: `konigsberg`,\n    invariants: computeInvariants(cy),\n  };\n\n  const layouted = applyLayout(cy, layout); // async, returns promise\n  layouted\n    .then(() => makeFile(cy, `./src/graph-gallery/data/${id.file}.data`))\n    .catch((err) => {\n      console.error(err);\n    });\n  layouted\n    .then(() => makeThumb(cy, `./src/graph-gallery/data/${id.file}.png`))\n    .catch((err) => {\n      console.error(err);\n    });\n  register.push(id);\n}\n\n/*\nPlatonic solids: Cube\nhttps://en.wikipedia.org/wiki/File:3-cube_column_graph.svg\n*/\n{\n  const cy = graphFromAdjacencyMatrix([\n    [0, 1, 1, 0, 1, 0, 0, 0],\n    [1, 0, 0, 1, 0, 1, 0, 0],\n    [1, 0, 0, 1, 0, 0, 1, 0],\n    [0, 1, 1, 0, 0, 0, 0, 1],\n    [1, 0, 0, 0, 0, 1, 1, 0],\n    [0, 1, 0, 0, 1, 0, 0, 1],\n    [0, 0, 1, 0, 1, 0, 0, 1],\n    [0, 0, 0, 1, 0, 1, 1, 0],\n  ]);\n\n  const layout = {\n    name: 'cose',\n    boundingBox: { x1: 0, y1: 0, x2: 300, y2: 300 },\n  };\n\n  const id = {\n    family: 'Platonic',\n    name_en: `Cube`,\n    name_fr: `Cube`,\n    name_de: `Würfel`,\n    file: `cube`,\n    invariants: computeInvariants(cy),\n  };\n\n  const layouted = applyLayout(cy, layout); // async, returns promise\n  layouted\n    .then(() => makeFile(cy, `./src/graph-gallery/data/${id.file}.data`))\n    .catch((err) => {\n      console.error(err);\n    });\n  layouted\n    .then(() => makeThumb(cy, `./src/graph-gallery/data/${id.file}.png`))\n    .catch((err) => {\n      console.error(err);\n    });\n  register.push(id);\n}\n\n/*\nPlatonic solids: Octahedral\n// https://en.wikipedia.org/wiki/File:Octahedral_graph.circo.svg\n*/\n\n{\n  const cy = graphFromAdjacencyMatrix([\n    [0, 1, 1, 0, 1, 1],\n    [1, 0, 1, 1, 0, 1],\n    [1, 1, 0, 1, 1, 0],\n    [0, 1, 1, 0, 1, 1],\n    [1, 0, 1, 1, 0, 1],\n    [1, 1, 0, 1, 1, 0],\n  ]);\n\n  const layout = {\n    name: 'circle',\n    boundingBox: { x1: 0, y1: 0, x2: 300, y2: 300 },\n  };\n\n  const id = {\n    family: 'Platonic',\n    name_en: `Octahedron`,\n    name_fr: `Octaèdre`,\n    name_de: `Oktaeder`,\n    file: `octahedron`,\n    invariants: computeInvariants(cy),\n  };\n\n  const layouted = applyLayout(cy, layout); // async, returns promise\n  layouted\n    .then(() => makeFile(cy, `./src/graph-gallery/data/${id.file}.data`))\n    .catch((err) => {\n      console.error(err);\n    });\n  layouted\n    .then(() => makeThumb(cy, `./src/graph-gallery/data/${id.file}.png`))\n    .catch((err) => {\n      console.error(err);\n    });\n  register.push(id);\n}\n\n// https://en.wikipedia.org/wiki/File:Dodecahedral_graph.neato.svg\n// https://en.wikipedia.org/wiki/File:Icosahedron_graph.svg\n// Petersen graph\n// https://en.wikipedia.org/wiki/Petersen_graph\n// Three utilities graph\n// https://en.wikipedia.org/wiki/Three_utilities_problem\n// already there! = 4_13\n// Chvatal graph\n// https://en.wikipedia.org/wiki/Chv%C3%A1tal_graph\n// Bidiakis cube\n// https://en.wikipedia.org/wiki/Bidiakis_cube\n\n/* \nMoser spindle\nhttps://en.wikipedia.org/wiki/Moser_spindle\n*/\n\n{\n  const cy = graphFromAdjacencyMatrix([\n    [0, 1, 1, 1, 1, 0, 0],\n    [1, 0, 0, 1, 0, 1, 0],\n    [1, 0, 0, 0, 1, 0, 1],\n    [1, 1, 0, 0, 0, 1, 0],\n    [1, 0, 1, 0, 0, 0, 1],\n    [0, 1, 0, 1, 0, 0, 1],\n    [0, 0, 1, 0, 1, 1, 0],\n  ]);\n\n  cy.nodes().positions((ele, i) => {\n    const h = 250; // height;\n    const alpha = 45 * (Math.PI / 180);\n    const beta = 20 * (Math.PI / 180);\n\n    const d = h / (2 * Math.cos(alpha) * Math.cos(beta)); // arm length\n\n    switch (i + 1) {\n      case 1:\n        return { x: 150, y: 10 };\n      case 2:\n        return {\n          x: 150 - d * Math.sin(alpha + beta),\n          y: 10 + d * Math.cos(alpha + beta),\n        };\n      case 3:\n        return {\n          x: 150 + d * Math.sin(alpha + beta),\n          y: 10 + d * Math.cos(alpha + beta),\n        };\n      case 4:\n        return {\n          x: 150 - d * Math.sin(alpha - beta),\n          y: 10 + d * Math.cos(alpha - beta),\n        };\n      case 5:\n        return {\n          x: 150 + d * Math.sin(alpha - beta),\n          y: 10 + d * Math.cos(alpha - beta),\n        };\n      case 6:\n        return { x: 150 - h * Math.tan(alpha), y: 10 + h };\n      case 7:\n        return { x: 150 + h * Math.tan(alpha), y: 10 + h };\n      default:\n        return { x: 0, y: 0 };\n    }\n  });\n\n  const layout = {\n    name: 'preset',\n    boundingBox: { x1: 0, y1: 0, x2: 300, y2: 300 },\n  };\n\n  const id = {\n    family: 'Other',\n    name_en: `Moser spindle`,\n    name_fr: `Graphe de Moser`,\n    name_de: `Moser-Spindel`,\n    file: `moser_spindle`,\n    invariants: computeInvariants(cy),\n  };\n\n  const layouted = applyLayout(cy, layout); // async, returns promise\n  layouted\n    .then(() => makeFile(cy, `./src/graph-gallery/data/${id.file}.data`))\n    .catch((err) => {\n      console.error(err);\n    });\n  layouted\n    .then(() => makeThumb(cy, `./src/graph-gallery/data/${id.file}.png`))\n    .catch((err) => {\n      console.error(err);\n    });\n  register.push(id);\n}\n\n// for (let i = 0; i < graphData.length; i += 1) {\n//   const { cy, layoutOpts: layout, id } = graphData[i];\n\n//   //   const cy = graphFromAdjacencyMatrix(M); // sync\n\n//   //   id.invariants = computeInvariants(cy);\n\n//   const layouted = applyLayout(cy, layout); // async, returns promise\n\n//   layouted\n//     .then(() => makeFile(cy, `./src/graph-gallery/data/${id.file}.data`))\n//     .catch((err) => {\n//       console.error(err);\n//     });\n\n//   layouted\n//     .then(() => makeThumb(cy, `./src/graph-gallery/data/${id.file}.png`))\n//     .catch((err) => {\n//       console.error(err);\n//     });\n\n//   register.push(id);\n// }\n\nregisterGraphs(register);\n","/* eslint-disable no-console */\nimport {\n  makeThumb,\n  applyLayout,\n  graphFromAdjacencyMatrix,\n} from './generating-tools';\n\nimport {\n  GraphRegister,\n  registerGraphs,\n  makeFile,\n  computeInvariants,\n} from './register-graphs';\n\nconsole.log('Creating files for More graphs 2');\n\nconst matrices = [];\nmatrices[0] = [\n  [0, 1, 0],\n  [1, 0, 0],\n  [0, 0, 0],\n];\nmatrices[1] = [\n  [0, 0, 1],\n  [0, 0, 1],\n  [1, 1, 0],\n];\nmatrices[2] = [\n  [0, 1, 1],\n  [1, 0, 1],\n  [1, 1, 0],\n];\nmatrices[3] = [\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0],\n];\nmatrices[4] = [\n  [0, 0, 1, 1],\n  [0, 0, 1, 0],\n  [1, 1, 0, 0],\n  [1, 0, 0, 0],\n];\nmatrices[5] = [\n  [0, 1, 1, 0],\n  [1, 0, 0, 1],\n  [1, 0, 0, 1],\n  [0, 1, 1, 0],\n];\nmatrices[6] = [\n  [0, 1, 0, 0],\n  [1, 0, 0, 0],\n  [0, 0, 0, 1],\n  [0, 0, 1, 0],\n];\nmatrices[7] = [\n  [0, 1, 1, 0],\n  [1, 0, 0, 0],\n  [1, 0, 0, 0],\n  [0, 0, 0, 0],\n];\nmatrices[8] = [\n  [0, 1, 1, 0],\n  [1, 0, 1, 1],\n  [1, 1, 0, 1],\n  [0, 1, 1, 0],\n];\nmatrices[9] = [\n  [0, 0, 1, 1, 1],\n  [0, 0, 0, 1, 1],\n  [1, 0, 0, 1, 1],\n  [1, 1, 1, 0, 0],\n  [1, 1, 1, 0, 0],\n];\nmatrices[10] = [\n  [0, 1, 0, 0, 1],\n  [1, 0, 1, 1, 0],\n  [0, 1, 0, 1, 1],\n  [0, 1, 1, 0, 0],\n  [1, 0, 1, 0, 0],\n];\nmatrices[11] = [\n  [0, 1, 0, 1, 0],\n  [1, 0, 0, 0, 0],\n  [0, 0, 0, 1, 1],\n  [1, 0, 1, 0, 0],\n  [0, 0, 1, 0, 0],\n];\nmatrices[12] = [\n  [0, 1, 0, 1, 0],\n  [1, 0, 1, 1, 1],\n  [0, 1, 0, 1, 0],\n  [1, 1, 1, 0, 1],\n  [0, 1, 0, 1, 0],\n];\nmatrices[13] = [\n  [0, 1, 0, 0, 0],\n  [1, 0, 0, 0, 0],\n  [0, 0, 0, 1, 1],\n  [0, 0, 1, 0, 1],\n  [0, 0, 1, 1, 0],\n];\nmatrices[14] = [\n  [0, 1, 1, 1, 1],\n  [1, 0, 1, 0, 1],\n  [1, 1, 0, 0, 1],\n  [1, 0, 0, 0, 0],\n  [1, 1, 1, 0, 0],\n];\nmatrices[15] = [\n  [0, 0, 0, 1, 0],\n  [0, 0, 1, 1, 1],\n  [0, 1, 0, 1, 1],\n  [1, 1, 1, 0, 0],\n  [0, 1, 1, 0, 0],\n];\nmatrices[16] = [\n  [0, 0, 1, 1, 0],\n  [0, 0, 1, 0, 0],\n  [1, 1, 0, 1, 1],\n  [1, 0, 1, 0, 1],\n  [0, 0, 1, 1, 0],\n];\nmatrices[17] = [\n  [0, 1, 1, 1, 1],\n  [1, 0, 1, 1, 1],\n  [1, 1, 0, 1, 1],\n  [1, 1, 1, 0, 0],\n  [1, 1, 1, 0, 0],\n];\nmatrices[18] = [\n  [0, 1, 1, 1, 1],\n  [1, 0, 1, 1, 1],\n  [1, 1, 0, 0, 0],\n  [1, 1, 0, 0, 1],\n  [1, 1, 0, 1, 0],\n];\nmatrices[19] = [\n  [0, 1, 1, 1, 1],\n  [1, 0, 0, 0, 1],\n  [1, 0, 0, 1, 0],\n  [1, 0, 1, 0, 1],\n  [1, 1, 0, 1, 0],\n];\nmatrices[20] = [\n  [0, 0, 1, 0, 0],\n  [0, 0, 1, 1, 0],\n  [1, 1, 0, 1, 1],\n  [0, 1, 1, 0, 0],\n  [0, 0, 1, 0, 0],\n];\nmatrices[21] = [\n  [0, 0, 1, 1, 0],\n  [0, 0, 0, 0, 0],\n  [1, 0, 0, 1, 1],\n  [1, 0, 1, 0, 0],\n  [0, 0, 1, 0, 0],\n];\nmatrices[22] = [\n  [0, 0, 1, 1, 0],\n  [0, 0, 0, 1, 1],\n  [1, 0, 0, 0, 1],\n  [1, 1, 0, 0, 0],\n  [0, 1, 1, 0, 0],\n];\nmatrices[23] = [\n  [0, 0, 1, 0, 0, 0],\n  [0, 0, 1, 1, 0, 0],\n  [1, 1, 0, 1, 0, 0],\n  [0, 1, 1, 0, 1, 1],\n  [0, 0, 0, 1, 0, 0],\n  [0, 0, 0, 1, 0, 0],\n];\nmatrices[24] = [\n  [0, 1, 1, 0, 1, 1],\n  [1, 0, 0, 1, 0, 0],\n  [1, 0, 0, 1, 0, 1],\n  [0, 1, 1, 0, 1, 1],\n  [1, 0, 0, 1, 0, 0],\n  [1, 0, 1, 1, 0, 0],\n];\nmatrices[25] = [\n  [0, 1, 1, 1, 1, 1],\n  [1, 0, 1, 1, 0, 1],\n  [1, 1, 0, 1, 0, 0],\n  [1, 1, 1, 0, 1, 0],\n  [1, 0, 0, 1, 0, 1],\n  [1, 1, 0, 0, 1, 0],\n];\nmatrices[26] = [\n  [0, 1, 0, 1, 0, 1],\n  [1, 0, 0, 0, 1, 1],\n  [0, 0, 0, 1, 0, 1],\n  [1, 0, 1, 0, 1, 1],\n  [0, 1, 0, 1, 0, 1],\n  [1, 1, 1, 1, 1, 0],\n];\nmatrices[27] = [\n  [0, 0, 0, 0, 0, 1],\n  [0, 0, 0, 1, 1, 0],\n  [0, 0, 0, 1, 1, 0],\n  [0, 1, 1, 0, 0, 1],\n  [0, 1, 1, 0, 0, 1],\n  [1, 0, 0, 1, 1, 0],\n];\nmatrices[28] = [\n  [0, 1, 1, 1, 0, 0],\n  [1, 0, 1, 0, 0, 1],\n  [1, 1, 0, 1, 1, 0],\n  [1, 0, 1, 0, 1, 1],\n  [0, 0, 1, 1, 0, 1],\n  [0, 1, 0, 1, 1, 0],\n];\nmatrices[29] = [\n  [0, 1, 0, 0, 1, 0],\n  [1, 0, 0, 1, 1, 0],\n  [0, 0, 0, 0, 0, 1],\n  [0, 1, 0, 0, 0, 1],\n  [1, 1, 0, 0, 0, 0],\n  [0, 0, 1, 1, 0, 0],\n];\nmatrices[30] = [\n  [0, 1, 1, 1, 1, 1],\n  [1, 0, 0, 1, 1, 1],\n  [1, 0, 0, 0, 0, 1],\n  [1, 1, 0, 0, 0, 1],\n  [1, 1, 0, 0, 0, 1],\n  [1, 1, 1, 1, 1, 0],\n];\nmatrices[31] = [\n  [0, 0, 1, 1, 0, 0],\n  [0, 0, 1, 1, 0, 1],\n  [1, 1, 0, 1, 1, 0],\n  [1, 1, 1, 0, 0, 1],\n  [0, 0, 1, 0, 0, 1],\n  [0, 1, 0, 1, 1, 0],\n];\nmatrices[32] = [\n  [0, 0, 0, 1, 1, 1],\n  [0, 0, 1, 0, 1, 0],\n  [0, 1, 0, 0, 0, 0],\n  [1, 0, 0, 0, 1, 1],\n  [1, 1, 0, 1, 0, 0],\n  [1, 0, 0, 1, 0, 0],\n];\nmatrices[33] = [\n  [0, 1, 1, 1, 0, 1],\n  [1, 0, 1, 1, 0, 0],\n  [1, 1, 0, 0, 1, 1],\n  [1, 1, 0, 0, 0, 1],\n  [0, 0, 1, 0, 0, 1],\n  [1, 0, 1, 1, 1, 0],\n];\nmatrices[34] = [\n  [0, 0, 0, 1, 0, 0],\n  [0, 0, 1, 1, 1, 1],\n  [0, 1, 0, 0, 1, 0],\n  [1, 1, 0, 0, 1, 1],\n  [0, 1, 1, 1, 0, 0],\n  [0, 1, 0, 1, 0, 0],\n];\nmatrices[35] = [\n  [0, 0, 1, 0, 0, 1],\n  [0, 0, 1, 1, 0, 1],\n  [1, 1, 0, 1, 0, 1],\n  [0, 1, 1, 0, 1, 1],\n  [0, 0, 0, 1, 0, 0],\n  [1, 1, 1, 1, 0, 0],\n];\nmatrices[36] = [\n  [0, 1, 0, 0, 0, 1],\n  [1, 0, 0, 0, 1, 0],\n  [0, 0, 0, 1, 1, 0],\n  [0, 0, 1, 0, 1, 1],\n  [0, 1, 1, 1, 0, 1],\n  [1, 0, 0, 1, 1, 0],\n];\nmatrices[37] = [\n  [0, 1, 1, 0, 1, 0],\n  [1, 0, 0, 1, 0, 1],\n  [1, 0, 0, 0, 0, 1],\n  [0, 1, 0, 0, 1, 1],\n  [1, 0, 0, 1, 0, 0],\n  [0, 1, 1, 1, 0, 0],\n];\nmatrices[38] = [\n  [0, 0, 0, 1, 0, 0],\n  [0, 0, 1, 1, 0, 0],\n  [0, 1, 0, 0, 1, 1],\n  [1, 1, 0, 0, 0, 1],\n  [0, 0, 1, 0, 0, 0],\n  [0, 0, 1, 1, 0, 0],\n];\nmatrices[39] = [\n  [0, 1, 0, 1, 1, 1],\n  [1, 0, 0, 0, 0, 1],\n  [0, 0, 0, 0, 0, 0],\n  [1, 0, 0, 0, 0, 0],\n  [1, 0, 0, 0, 0, 1],\n  [1, 1, 0, 0, 1, 0],\n];\nmatrices[40] = [\n  [0, 1, 1, 1, 1, 1],\n  [1, 0, 1, 0, 0, 1],\n  [1, 1, 0, 1, 1, 1],\n  [1, 0, 1, 0, 1, 1],\n  [1, 0, 1, 1, 0, 1],\n  [1, 1, 1, 1, 1, 0],\n];\nmatrices[41] = [\n  [0, 1, 1, 0, 1, 0],\n  [1, 0, 1, 1, 0, 0],\n  [1, 1, 0, 1, 0, 0],\n  [0, 1, 1, 0, 1, 1],\n  [1, 0, 0, 1, 0, 0],\n  [0, 0, 0, 1, 0, 0],\n];\nmatrices[42] = [\n  [0, 1, 0, 1, 0, 1],\n  [1, 0, 0, 0, 0, 1],\n  [0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 1],\n  [0, 0, 0, 0, 0, 1],\n  [1, 1, 1, 1, 1, 0],\n];\nmatrices[43] = [\n  [0, 1, 0, 0, 1, 1],\n  [1, 0, 1, 1, 0, 1],\n  [0, 1, 0, 0, 1, 1],\n  [0, 1, 0, 0, 1, 1],\n  [1, 0, 1, 1, 0, 0],\n  [1, 1, 1, 1, 0, 0],\n];\nmatrices[44] = [\n  [0, 1, 1, 1, 0, 1],\n  [1, 0, 1, 0, 0, 1],\n  [1, 1, 0, 1, 1, 0],\n  [1, 0, 1, 0, 0, 1],\n  [0, 0, 1, 0, 0, 0],\n  [1, 1, 0, 1, 0, 0],\n];\nmatrices[45] = [\n  [0, 1, 1, 0, 0, 0],\n  [1, 0, 0, 1, 0, 0],\n  [1, 0, 0, 0, 0, 1],\n  [0, 1, 0, 0, 1, 1],\n  [0, 0, 0, 1, 0, 0],\n  [0, 0, 1, 1, 0, 0],\n];\nmatrices[46] = [\n  [0, 0, 1, 1, 0, 1, 1],\n  [0, 0, 1, 1, 1, 1, 0],\n  [1, 1, 0, 1, 0, 1, 1],\n  [1, 1, 1, 0, 1, 1, 0],\n  [0, 1, 0, 1, 0, 1, 1],\n  [1, 1, 1, 1, 1, 0, 1],\n  [1, 0, 1, 0, 1, 1, 0],\n];\nmatrices[47] = [\n  [0, 1, 0, 1, 0, 1, 1],\n  [1, 0, 1, 1, 1, 1, 1],\n  [0, 1, 0, 0, 1, 1, 1],\n  [1, 1, 0, 0, 0, 0, 1],\n  [0, 1, 1, 0, 0, 1, 1],\n  [1, 1, 1, 0, 1, 0, 1],\n  [1, 1, 1, 1, 1, 1, 0],\n];\nmatrices[48] = [\n  [0, 1, 1, 1, 1, 0, 0],\n  [1, 0, 0, 0, 0, 1, 0],\n  [1, 0, 0, 1, 1, 0, 0],\n  [1, 0, 1, 0, 0, 1, 1],\n  [1, 0, 1, 0, 0, 1, 1],\n  [0, 1, 0, 1, 1, 0, 1],\n  [0, 0, 0, 1, 1, 1, 0],\n];\nmatrices[49] = [\n  [0, 1, 1, 1, 1, 0, 0],\n  [1, 0, 1, 0, 1, 0, 1],\n  [1, 1, 0, 1, 1, 1, 1],\n  [1, 0, 1, 0, 1, 1, 1],\n  [1, 1, 1, 1, 0, 1, 1],\n  [0, 0, 1, 1, 1, 0, 1],\n  [0, 1, 1, 1, 1, 1, 0],\n];\nmatrices[50] = [\n  [0, 0, 1, 1, 1, 1, 0],\n  [0, 0, 1, 1, 0, 0, 0],\n  [1, 1, 0, 0, 1, 0, 0],\n  [1, 1, 0, 0, 1, 1, 1],\n  [1, 0, 1, 1, 0, 1, 1],\n  [1, 0, 0, 1, 1, 0, 1],\n  [0, 0, 0, 1, 1, 1, 0],\n];\nmatrices[51] = [\n  [0, 1, 1, 0, 1, 1, 1],\n  [1, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 1, 0, 1, 1],\n  [0, 0, 1, 0, 1, 1, 0],\n  [1, 0, 0, 1, 0, 1, 0],\n  [1, 0, 1, 1, 1, 0, 1],\n  [1, 1, 1, 0, 0, 1, 0],\n];\nmatrices[52] = [\n  [0, 0, 1, 0, 0, 0, 1],\n  [0, 0, 1, 0, 0, 1, 0],\n  [1, 1, 0, 0, 1, 0, 1],\n  [0, 0, 0, 0, 0, 1, 1],\n  [0, 0, 1, 0, 0, 1, 0],\n  [0, 1, 0, 1, 1, 0, 0],\n  [1, 0, 1, 1, 0, 0, 0],\n];\nmatrices[53] = [\n  [0, 1, 1, 1, 0, 1, 0],\n  [1, 0, 0, 1, 1, 1, 1],\n  [1, 0, 0, 0, 1, 1, 1],\n  [1, 1, 0, 0, 0, 1, 0],\n  [0, 1, 1, 0, 0, 1, 1],\n  [1, 1, 1, 1, 1, 0, 1],\n  [0, 1, 1, 0, 1, 1, 0],\n];\nmatrices[54] = [\n  [0, 1, 1, 1, 1, 0, 1],\n  [1, 0, 0, 1, 1, 1, 1],\n  [1, 0, 0, 0, 1, 0, 1],\n  [1, 1, 0, 0, 0, 0, 1],\n  [1, 1, 1, 0, 0, 0, 0],\n  [0, 1, 0, 0, 0, 0, 1],\n  [1, 1, 1, 1, 0, 1, 0],\n];\nmatrices[55] = [\n  [0, 0, 1, 0, 1, 0, 1, 0],\n  [0, 0, 0, 0, 0, 1, 1, 1],\n  [1, 0, 0, 1, 1, 1, 1, 0],\n  [0, 0, 1, 0, 1, 0, 1, 1],\n  [1, 0, 1, 1, 0, 1, 1, 1],\n  [0, 1, 1, 0, 1, 0, 1, 0],\n  [1, 1, 1, 1, 1, 1, 0, 1],\n  [0, 1, 0, 1, 1, 0, 1, 0],\n];\nmatrices[56] = [\n  [0, 1, 0, 1, 0, 1, 1, 1],\n  [1, 0, 1, 1, 1, 1, 1, 1],\n  [0, 1, 0, 0, 1, 1, 1, 1],\n  [1, 1, 0, 0, 0, 1, 1, 0],\n  [0, 1, 1, 0, 0, 1, 1, 1],\n  [1, 1, 1, 1, 1, 0, 1, 1],\n  [1, 1, 1, 1, 1, 1, 0, 1],\n  [1, 1, 1, 0, 1, 1, 1, 0],\n];\nmatrices[57] = [\n  [0, 0, 1, 0, 0, 0, 0, 1],\n  [0, 0, 1, 0, 0, 1, 1, 1],\n  [1, 1, 0, 0, 0, 1, 1, 1],\n  [0, 0, 0, 0, 1, 0, 1, 1],\n  [0, 0, 0, 1, 0, 1, 1, 0],\n  [0, 1, 1, 0, 1, 0, 1, 1],\n  [0, 1, 1, 1, 1, 1, 0, 1],\n  [1, 1, 1, 1, 0, 1, 1, 0],\n];\nmatrices[58] = [\n  [0, 1, 1, 0, 0, 1, 0, 0],\n  [1, 0, 1, 1, 1, 1, 1, 1],\n  [1, 1, 0, 0, 1, 1, 1, 0],\n  [0, 1, 0, 0, 1, 1, 1, 1],\n  [0, 1, 1, 1, 0, 0, 0, 1],\n  [1, 1, 1, 1, 0, 0, 0, 1],\n  [0, 1, 1, 1, 0, 0, 0, 1],\n  [0, 1, 0, 1, 1, 1, 1, 0],\n];\nmatrices[59] = [\n  [0, 1, 1, 1, 0, 0, 1, 1],\n  [1, 0, 0, 1, 0, 0, 1, 1],\n  [1, 0, 0, 0, 1, 1, 0, 1],\n  [1, 1, 0, 0, 1, 1, 1, 1],\n  [0, 0, 1, 1, 0, 1, 0, 1],\n  [0, 0, 1, 1, 1, 0, 1, 1],\n  [1, 1, 0, 1, 0, 1, 0, 1],\n  [1, 1, 1, 1, 1, 1, 1, 0],\n];\nmatrices[60] = [\n  [0, 1, 1, 1, 0, 0, 1, 1],\n  [1, 0, 1, 1, 0, 1, 1, 1],\n  [1, 1, 0, 1, 1, 0, 0, 0],\n  [1, 1, 1, 0, 1, 0, 1, 1],\n  [0, 0, 1, 1, 0, 1, 1, 0],\n  [0, 1, 0, 0, 1, 0, 0, 1],\n  [1, 1, 0, 1, 1, 0, 0, 0],\n  [1, 1, 0, 1, 0, 1, 0, 0],\n];\nmatrices[61] = [\n  [0, 0, 1, 1, 1, 1, 1, 1],\n  [0, 0, 1, 1, 0, 0, 1, 0],\n  [1, 1, 0, 1, 0, 0, 1, 1],\n  [1, 1, 1, 0, 1, 0, 1, 1],\n  [1, 0, 0, 1, 0, 1, 0, 1],\n  [1, 0, 0, 0, 1, 0, 1, 1],\n  [1, 1, 1, 1, 0, 1, 0, 1],\n  [1, 0, 1, 1, 1, 1, 1, 0],\n];\nmatrices[62] = [\n  [0, 1, 0, 1, 0, 1, 1, 0],\n  [1, 0, 1, 1, 1, 1, 1, 0],\n  [0, 1, 0, 1, 1, 1, 0, 1],\n  [1, 1, 1, 0, 0, 0, 0, 1],\n  [0, 1, 1, 0, 0, 1, 1, 1],\n  [1, 1, 1, 0, 1, 0, 0, 1],\n  [1, 1, 0, 0, 1, 0, 0, 1],\n  [0, 0, 1, 1, 1, 1, 1, 0],\n];\nmatrices[63] = [\n  [0, 1, 1, 0, 0, 0, 1, 0],\n  [1, 0, 0, 1, 1, 1, 1, 1],\n  [1, 0, 0, 1, 1, 0, 0, 0],\n  [0, 1, 1, 0, 1, 0, 0, 1],\n  [0, 1, 1, 1, 0, 0, 1, 1],\n  [0, 1, 0, 0, 0, 0, 1, 0],\n  [1, 1, 0, 0, 1, 1, 0, 0],\n  [0, 1, 0, 1, 1, 0, 0, 0],\n];\nmatrices[64] = [\n  [0, 1, 0, 1, 1, 0, 1, 1],\n  [1, 0, 1, 1, 0, 0, 1, 1],\n  [0, 1, 0, 1, 1, 1, 1, 1],\n  [1, 1, 1, 0, 1, 0, 1, 0],\n  [1, 0, 1, 1, 0, 0, 0, 1],\n  [0, 0, 1, 0, 0, 0, 1, 1],\n  [1, 1, 1, 1, 0, 1, 0, 1],\n  [1, 1, 1, 0, 1, 1, 1, 0],\n];\n\nconst register = [] as GraphRegister[];\n\nfor (let i = 0; i < matrices.length; i += 1) {\n  const M = matrices[i];\n\n  const layoutOpts = {\n    name: 'cose',\n    boundingBox: { x1: 0, y1: 0, x2: 300, y2: 300 },\n  };\n\n  const cy = graphFromAdjacencyMatrix(M); // sync\n\n  const id = {\n    family: 'Samples',\n    name_en: `Graph G<sub>${i}</sub>`,\n    name_fr: `Graphe G<sub>${i}</sub>`,\n    name_de: `Graph G<sub>${i}</sub>`,\n    file: `G_${i}`,\n    invariants: computeInvariants(cy),\n  };\n\n  const layouted = applyLayout(cy, layoutOpts); // async, returns promise\n\n  layouted\n    .then(() => makeFile(cy, `./src/graph-gallery/data/${id.file}.data`))\n    .catch((err) => {\n      console.error(err);\n    });\n\n  layouted\n    .then(() => makeThumb(cy, `./src/graph-gallery/data/${id.file}.png`))\n    .catch((err) => {\n      console.error(err);\n    });\n\n  register.push(id);\n}\n\nregisterGraphs(register);\n","import './make-complete-graphs';\nimport './make-trivalent-graphs';\nimport './make-more-graphs';\nimport './make-more-graphs-2';\n\nprocess.setMaxListeners(0);\n"],"names":["$2e1c1dc59c685f84$var$snap","$parcel$interopDefault","$dRSqW$cytosnap","$2e1c1dc59c685f84$export$55eee5fe1d037493","cy","filename","start","then","shot","elements","json","layout","name","style","selector","resolvesTo","format","width","height","background","img","data","replace","buf","Buffer","from","$dRSqW$fspromises","writeFile","console","log","catch","err","error","$2e1c1dc59c685f84$export$8ba37776491df5b8","lay","prom","promiseOn","run","$2e1c1dc59c685f84$export$354623063f3eeda3","M","$dRSqW$cytoscape","N","length","i","add","group","id","i1","j","l","source","nodes","target","$c65becad8c260f5b$export$2e2bcd8739ae039","collection","cycles","kruskal","absoluteComplement","edges","map","backEdge","aStar","root","goal","weight","e","Number","POSITIVE_INFINITY","path","union","noCycle","cycle","minCycle","size","reduce","acc","value","$d7b1f0e2c65e2a64$export$2e2bcd8739ae039","spanningTree","$142f5274d4c546e3$export$2e2bcd8739ae039","fW","floydWarshall","distance","Infinity","$8fd97d0e40e5a234$export$2e2bcd8739ae039","options","indexOf","indexing","Map","n","idx","get","RangeError","$8fd97d0e40e5a234$export$13453081627eff1c","directed","subgraph","parentCy","numNodes","m","Array","fill","forEach","isNode","$034ff17f36f93702$export$6e59a0e795cac65e","dSeq","degree","sort","a","b","d","A","$dRSqW$mathjs","det","numEdges","girth","degSequence","components","circuitRank","diameter","detAdjacency","$034ff17f36f93702$export$ef1d1a6f121e4697","jsonString","JSON","stringify","$dRSqW$fs","$034ff17f36f93702$export$fcfbe8a96738f5e9","existsSync","closeSync","openSync","file","readFileSync","writeFileSync","parse","toString","push","$034ff17f36f93702$var$registerList","stream","createWriteStream","flags","write","end","$034ff17f36f93702$var$registerAssets","$8d01ee2c09b5d5b9$var$makeGraph","$8d01ee2c09b5d5b9$var$layoutOpts","boundingBox","x1","y1","x2","y2","$8d01ee2c09b5d5b9$var$register","family","name_en","name_fr","name_de","invariants","layouted","$6e9264229edefb21$var$matrices","$6e9264229edefb21$var$graphFromUpperTriangular","M1","g","split","upper","k","i2","$6e9264229edefb21$var$register","$6e9264229edefb21$var$i","$6e9264229edefb21$var$previousGenus","layoutOpts","$84b8416ec0e4dcb9$var$register","positions","ele","h","alpha","Math","PI","beta","cos","x","y","sin","tan","$20b435c115e5a871$var$matrices","$20b435c115e5a871$var$register","process","setMaxListeners"],"version":3,"file":"generate-graphs.js.map","sourceRoot":"../"}