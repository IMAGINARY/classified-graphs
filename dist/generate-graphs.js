var e=require("cytoscape"),n=require("fs/promises"),r=require("cytosnap"),t=require("fs"),a=require("mathjs");function o(e){return e&&e.__esModule?e.default:e}const s=o(r)();function l(e,r){s.start().then((()=>s.shot({elements:e.json().elements,layout:{name:"preset"},style:[{selector:"node",style:{"background-color":"red"}},{selector:"edge",style:{"line-color":"red","curve-style":"bezier"}}],resolvesTo:"base64uri",format:"png",width:640,height:480,background:"transparent"}))).then((e=>{const t=e.replace(/^data:image\/\w+;base64,/,""),a=Buffer.from(t,"base64");n.writeFile(r,a).then((()=>{console.log("Saved thumbnail "+r)})).catch((e=>{console.error(e)}))}))}function c(e,n){const r=e.layout(n),t=r.promiseOn("layoutstop");return r.run(),t}function i(n){const r=o(e)(),t=n.length;for(let e=0;e<t;e+=1)r.add({group:"nodes",data:{id:`N-${e}`}});for(let e=0;e<t;e+=1)for(let a=e;a<t;a+=1)for(let t=0;t<n[e][a];t+=1)r.add({group:"edges",data:{source:r.nodes()[e].id(),target:r.nodes()[a].id(),id:`E-${e}-${a}-${t}`}});return r}var d=function(n){const r=n.kruskal((()=>1)).absoluteComplement().edges().map((e=>n.aStar({root:e.source(),goal:e.target(),weight:n=>e===n?Number.POSITIVE_INFINITY:1}).path.union(e))),t={cycle:o(e)().collection(),length:Number.POSITIVE_INFINITY},a=r.map((e=>({cycle:e,length:e.edges().size()}))).reduce(((e,n)=>e.length<n.length?e:n),t);return{path:a.cycle,value:a.length}};var g=function(e){const n=e.kruskal((()=>1));return n.absoluteComplement().edges().map((e=>n.aStar({root:e.source(),goal:e.target()}).path.union(e)))};var u=function(n){const r=n.floydWarshall({weight:()=>1}),t=n.nodes(),a=t.length;let s=o(e)().collection(),l=-1/0;for(let e=0;e<a;e+=1)for(let n=e;n<a;n+=1)r.distance(t[e],t[n])>l&&(l=r.distance(t[e],t[n]),s=r.path(t[e],t[n]).union([t[e],t[n]]));return{path:s,value:l}};var h=function(e,n={}){const r=n.indexing??function(e){const n=e.nodes(),r=new Map(n.map(((e,n)=>[e.id(),n])));return e=>{const n=r.get(e.id());if(void 0===n)throw new RangeError(`Unknown node: ${e.json()}`);return n}}(e),t=n.directed??!1,a=n.subgraph??!1,o=e.nodes(),s=o[0].cy(),l=a?s.nodes().size():o.size(),c=new Array(l).fill(null).map((()=>new Array(l).fill(0)));return e.edges().forEach((e=>{const n=e.source(),a=e.target();if(n.isNode()&&a.isNode()){const n=r(e.source()),a=r(e.target());c[n][a]+=1,t||(c[a][n]+=1)}})),c};function f(e){const n=e.elements().nodes().map((e=>e.degree(!0))).sort(((e,n)=>n-e));let r;if(e.nodes().size()>0){const n=h(e.elements());r=(0,a.det)(n)}return{numNodes:e.elements().nodes().size(),numEdges:e.elements().edges().size(),girth:d(e.elements()).value,degSequence:n,components:e.elements().components().length,circuitRank:g(e.elements()).length,diameter:u(e.elements()).value,detAdjacency:r}}function p(e,n){const r=e.json(),a=JSON.stringify(r,null,4);t.writeFile(n,a,{},(e=>{if(e)throw e;console.log(`Saved file ${n}`)}))}function m(e){!function(e){const n="src/graph-gallery/graphs-list.json";t.existsSync(n)||t.closeSync(t.openSync(n,"w"));const r=t.readFileSync(n);if(0===r.length)t.writeFileSync(n,JSON.stringify(e));else{const a=JSON.parse(r.toString());a.push(...e),t.writeFileSync(n,JSON.stringify(a))}}(e),function(e){const n=t.createWriteStream("src/graph-gallery/graphs-assets.ts",{flags:"a"});e.forEach((e=>{n.write(`export const ${e.file} = new URL('../graph-gallery/data/${e.file}.data', import.meta.url).href;`),n.write(`export const ${e.file}_Icon = new URL('../graph-gallery/data/${e.file}.png', import.meta.url).href;`)})),n.end()}(e)}function y(n){const r=o(e)();for(let e=0;e<n;e+=1){r.add({group:"nodes",data:{id:`N-${e}`}});for(let n=0;n<e;n+=1)r.add({group:"edges",data:{source:r.nodes()[n].id(),target:r.nodes()[e].id(),id:`E-${n}-${e}`}})}return r}console.log("Creating files for Complete graphs");const $={name:"circle",boundingBox:{x1:0,y1:0,x2:300,y2:300}},b=[];for(let e=2;e<9;e+=1){const n=y(e),r={family:"Complete",name_en:`Complete of order ${e}`,name_fr:`Complet d'ordre ${e}`,name_de:`VollstÃ¤ndiger der Ordnung ${e}`,file:`complete_${e}`,invariants:f(n)},t=c(n,$);t.then((()=>p(n,`./src/graph-gallery/data/${r.file}.data`))).catch((e=>{console.error(e)})),t.then((()=>l(n,`./src/graph-gallery/data/${r.file}.png`))).catch((e=>{console.error(e)})),b.push(r)}m(b);const x=["2  1 1 1","2  0 3 0","4  1 0 0 1 1 0 1 1 1 0","4  0 0 1 2 1 0 1 1 0 0","4  0 0 2 1 1 0 1 0 1 0","4  0 0 2 1 0 1 2 0 0 0","4  0 1 1 1 0 1 1 0 1 0","6  0 0 0 0 2 1 1 0 0 1 0 1 0 0 1 1 0 1 0 0 0","6  1 0 0 0 1 0 1 0 0 1 0 1 0 0 1 1 0 1 0 1 0","6  0 0 0 1 1 1 0 0 0 2 1 1 0 0 1 1 0 0 0 0 0","6  0 0 0 2 1 0 0 0 0 2 1 1 0 0 1 0 0 1 0 0 0","6  0 0 0 1 1 1 1 0 0 1 0 1 0 0 1 1 0 0 0 1 0","6  0 0 0 1 0 2 0 0 0 2 1 1 0 1 0 1 0 0 0 0 0","6  0 0 0 2 0 1 0 0 0 2 1 1 0 1 0 0 0 1 0 0 0","6  0 0 0 2 0 1 1 0 0 1 0 1 0 1 0 0 0 1 0 1 0","6  0 0 0 2 1 0 0 0 1 0 2 0 0 2 1 0 0 0 0 0 0","6  0 0 0 1 1 1 0 0 2 0 1 0 0 2 1 0 0 0 0 0 0","6  0 0 0 1 1 1 1 0 1 0 0 0 0 2 1 0 0 1 0 0 0","6  0 0 0 1 1 1 1 0 1 0 0 1 0 1 0 0 0 1 0 1 0","6  0 0 0 1 1 1 0 0 1 1 1 1 0 1 0 0 0 1 0 0 0","6  0 0 0 1 1 1 0 0 1 1 1 0 1 1 1 0 0 0 0 0 0","6  0 0 1 0 1 1 0 0 2 0 1 0 0 2 0 0 0 1 0 0 0","6  0 0 1 1 0 1 0 0 1 1 1 0 0 2 0 0 0 1 0 0 0","6  0 0 1 1 1 0 0 0 1 1 1 0 0 1 1 0 0 1 0 0 0","8  0 0 0 0 0 2 1 0 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 1 0 0 1 0 0 1 0 0 0","8  0 0 0 0 0 1 2 0 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 0 1 1 0 0 1 0 0 0 0 0 0","8  0 0 0 0 0 2 0 1 1 0 0 0 1 0 0 0 0 0 0 2 1 1 0 0 1 0 1 0 0 1 0 0 0 0 0 0","8  1 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 2 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0","8  1 0 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 1 0 0 1 0 0 1 0 1 0","8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 1 0 0 0 1 0 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0","8  0 0 0 0 2 0 1 0 0 0 0 0 2 1 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 1 0 0 0","8  0 0 0 0 2 0 1 0 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 0 2 1 0 0 0 0 0 2 1 1 0 0 0 1 1 0 0 0 0 0 0 0 0 0","8  0 0 0 0 2 1 0 0 0 0 0 0 2 1 0 0 0 0 0 2 1 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 0 2 1 0 1 0 0 0 1 0 1 0 0 0 1 1 0 0 0 0 0 0 0 1 0","8  0 0 0 0 1 1 0 1 0 0 0 0 2 0 1 0 0 0 0 2 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0","8  0 0 0 0 2 1 0 0 0 0 0 0 2 0 1 0 0 0 0 2 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 1 0 0 0 1 0 0 0 0 0 0 2 1 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 0 0 1 0","8  0 0 0 0 2 1 0 0 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 0 0 1 0","8  0 0 0 0 1 1 0 1 1 0 0 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 1 0 1 0","8  0 0 0 0 1 0 0 2 0 0 0 0 1 2 0 0 0 0 2 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0","8  0 0 0 0 2 0 0 1 0 0 0 0 1 2 0 0 0 0 2 0 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 2 0 0 1 0 0 0 0 1 2 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 0 0 0 2 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0","8  0 0 0 0 1 0 1 1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 1 1 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 2 0 0 0 0 0 0 1 0","8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 0 0 0 1 1 1 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 1 2 0 0 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 0 0 1 0","8  0 0 0 0 1 2 0 0 0 0 0 1 0 2 0 0 0 0 1 1 1 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 2 1 0 0 0 0 0 1 0 2 0 0 0 0 2 0 1 0 0 0 1 2 0 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 0 0 0 2 0 1 0 0 0 2 1 0 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 1 0 2 0 0 0 0 2 0 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 1 0 0 1 0 0 0 0 0 2 1 0 0 0 0 0 0 1 0 0 0","8  0 0 0 0 2 1 0 0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 2 1 0 0 0 0 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 1 0 2 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0 1 0","8  0 0 0 0 1 2 0 0 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 2 0 1 0 0 0 0 1 1 1 0 0 2 0 1 0 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 1 0 1 1 0 0 0 2 1 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 2 0 1 0 0 0 0 1 1 1 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0","8  0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 0 1 1 1 1 0 1 0 0 0 0 1 0 0 0 1 0 0 0","8  1 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 1 1 0 0 1 1 1 0 0 1 0 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 0 0 0 1 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0","8  0 0 0 0 1 1 1 0 0 0 0 1 1 0 1 0 0 1 0 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0","8  0 0 0 1 0 0 1 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0","8  0 0 0 2 0 0 1 0 0 0 0 1 0 1 1 0 0 0 1 1 1 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0","8  0 0 0 2 0 0 1 0 0 0 0 2 0 1 0 0 0 0 2 1 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0","8  0 0 0 2 0 0 1 0 0 0 0 2 0 1 0 0 0 0 2 0 1 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0","8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 0 0 0","8  0 0 0 1 0 2 0 0 0 0 0 1 0 1 1 0 0 0 1 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0","8  0 0 0 1 0 2 0 0 0 0 0 2 0 1 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 0 0 0 2 1 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 0 0 0 0 2 1 0 0 2 0 0 1 0 0 0 0 0 0 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 2 0 1 0 0 0 0 0 2 1 0 0 2 0 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 1 0 0 0 2 0 0 1 0 0 0 0 0 0 0 1 0","8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 0 1 0 0 2 0 0 0 0 2 0 0 0 0 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 1 0 0 0 2 0 0 0 0 1 1 0 0 0 0 0 0","8  0 0 0 1 0 1 1 0 0 0 0 1 1 0 1 1 0 0 1 0 0 0 0 0 1 1 0 0 1 1 0 0 0 0 0 0","8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 1 0 1 0 0 1 1 0 0 0 0 0 0","8  0 0 0 1 1 0 0 1 0 0 0 1 1 0 1 0 0 0 2 1 0 0 0 0 2 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 1 0 0 1 0 0 0 1 2 0 0 0 0 0 1 1 1 0 0 0 2 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 1 0 1 0 0 0 0 1 1 0 1 0 0 0 2 1 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 1 0 1 0 0 0 0 1 2 0 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1 2 0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 2 0 0 1 0 0 0 0 1 1 1 0 0 0 1 1 0 1 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 1 1 1 0 0 0 1 0 1 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0","8  0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1 1 0 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0","8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 0 0 1 0 1 1 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0","8  0 0 0 1 1 0 0 1 0 0 0 0 1 1 1 0 0 0 1 2 0 0 2 0 0 0 0 0 0 0 0 0 1 0 0 0"];function _(n){const r=o(e)(),t=(Number(n.split("  ")[0])+2)/2,a=n.split("  ")[1].split(" ").map(Number);let s=0;for(let e=0;e<2*t-2;e+=1)r.add({group:"nodes",data:{id:`N-${e}`}});for(let e=0;e<2*t-2;e+=1)for(let n=e;n<2*t-2;n+=1){for(let t=0;t<a[s];t+=1)r.add({group:"edges",data:{source:r.nodes()[e].id(),target:r.nodes()[n].id(),id:`E-${e}-${n}-${t}`}});s+=1}return r}console.log("Creating files for trivalent graphs");const v=[];let M=0,S=1;for(const e of x){const n=(Number(e.split("  ")[0])+2)/2;n!==S&&(M=0),S=n;const r={name:"cose",boundingBox:{x1:0,y1:0,x2:300,y2:300}},t=_(e),a={family:"Trivalent",name_en:`Trivalent ${n}<sub>${M}</sub>`,name_fr:`Graphe cubique ${n}<sub>${M}</sub>`,name_de:`Kubischer Graph ${n}<sub>${M}</sub>`,file:`trivalent_${n}_${M}`,invariants:f(t)},o=c(t,r);o.then((()=>p(t,`./src/graph-gallery/data/${a.file}.data`))).catch((e=>{console.error(e)})),o.then((()=>l(t,`./src/graph-gallery/data/${a.file}.png`))).catch((e=>{console.error(e)})),v.push(a),M+=1}m(v),console.log("Creating files for More graphs");const w=[];{const e=i([[0,1,0,2],[1,0,1,1],[0,1,0,2],[2,1,2,0]]),n={name:"circle",boundingBox:{x1:0,y1:0,x2:300,y2:300}},r={family:"Special",name_en:"KÃ¶nigsberg",name_fr:"KÃ¶nigsberg",name_de:"KÃ¶nigsberg",file:"konigsberg",invariants:f(e)},t=c(e,n);t.then((()=>p(e,`./src/graph-gallery/data/${r.file}.data`))).catch((e=>{console.error(e)})),t.then((()=>l(e,`./src/graph-gallery/data/${r.file}.png`))).catch((e=>{console.error(e)})),w.push(r)}{const e=i([[0,1,1,0,1,0,0,0],[1,0,0,1,0,1,0,0],[1,0,0,1,0,0,1,0],[0,1,1,0,0,0,0,1],[1,0,0,0,0,1,1,0],[0,1,0,0,1,0,0,1],[0,0,1,0,1,0,0,1],[0,0,0,1,0,1,1,0]]),n={name:"cose",boundingBox:{x1:0,y1:0,x2:300,y2:300}},r={family:"Platonic",name_en:"Cube",name_fr:"Cube",name_de:"WÃ¼rfel",file:"cube",invariants:f(e)},t=c(e,n);t.then((()=>p(e,`./src/graph-gallery/data/${r.file}.data`))).catch((e=>{console.error(e)})),t.then((()=>l(e,`./src/graph-gallery/data/${r.file}.png`))).catch((e=>{console.error(e)})),w.push(r)}{const e=i([[0,1,1,0,1,1],[1,0,1,1,0,1],[1,1,0,1,1,0],[0,1,1,0,1,1],[1,0,1,1,0,1],[1,1,0,1,1,0]]),n={name:"circle",boundingBox:{x1:0,y1:0,x2:300,y2:300}},r={family:"Platonic",name_en:"Octahedron",name_fr:"OctaÃ¨dre",name_de:"Oktaeder",file:"octahedron",invariants:f(e)},t=c(e,n);t.then((()=>p(e,`./src/graph-gallery/data/${r.file}.data`))).catch((e=>{console.error(e)})),t.then((()=>l(e,`./src/graph-gallery/data/${r.file}.png`))).catch((e=>{console.error(e)})),w.push(r)}{const e=i([[0,1,1,1,1,0,0],[1,0,0,1,0,1,0],[1,0,0,0,1,0,1],[1,1,0,0,0,1,0],[1,0,1,0,0,0,1],[0,1,0,1,0,0,1],[0,0,1,0,1,1,0]]);e.nodes().positions(((e,n)=>{const r=250,t=Math.PI/180*45,a=Math.PI/180*20,o=r/(2*Math.cos(t)*Math.cos(a));switch(n+1){case 1:return{x:150,y:10};case 2:return{x:150-o*Math.sin(t+a),y:10+o*Math.cos(t+a)};case 3:return{x:150+o*Math.sin(t+a),y:10+o*Math.cos(t+a)};case 4:return{x:150-o*Math.sin(t-a),y:10+o*Math.cos(t-a)};case 5:return{x:150+o*Math.sin(t-a),y:10+o*Math.cos(t-a)};case 6:return{x:150-r*Math.tan(t),y:260};case 7:return{x:150+r*Math.tan(t),y:260};default:return{x:0,y:0}}}));const n={name:"preset",boundingBox:{x1:0,y1:0,x2:300,y2:300}},r={family:"Other",name_en:"Moser spindle",name_fr:"Graphe de Moser",name_de:"Moser-Spindel",file:"moser_spindle",invariants:f(e)},t=c(e,n);t.then((()=>p(e,`./src/graph-gallery/data/${r.file}.data`))).catch((e=>{console.error(e)})),t.then((()=>l(e,`./src/graph-gallery/data/${r.file}.png`))).catch((e=>{console.error(e)})),w.push(r)}m(w),console.log("Creating files for More graphs 2");const N=[];N[0]=[[0,1,0],[1,0,0],[0,0,0]],N[1]=[[0,0,1],[0,0,1],[1,1,0]],N[2]=[[0,1,1],[1,0,1],[1,1,0]],N[3]=[[0,0,0],[0,0,0],[0,0,0]],N[4]=[[0,0,1,1],[0,0,1,0],[1,1,0,0],[1,0,0,0]],N[5]=[[0,1,1,0],[1,0,0,1],[1,0,0,1],[0,1,1,0]],N[6]=[[0,1,0,0],[1,0,0,0],[0,0,0,1],[0,0,1,0]],N[7]=[[0,1,1,0],[1,0,0,0],[1,0,0,0],[0,0,0,0]],N[8]=[[0,1,1,0],[1,0,1,1],[1,1,0,1],[0,1,1,0]],N[9]=[[0,0,1,1,1],[0,0,0,1,1],[1,0,0,1,1],[1,1,1,0,0],[1,1,1,0,0]],N[10]=[[0,1,0,0,1],[1,0,1,1,0],[0,1,0,1,1],[0,1,1,0,0],[1,0,1,0,0]],N[11]=[[0,1,0,1,0],[1,0,0,0,0],[0,0,0,1,1],[1,0,1,0,0],[0,0,1,0,0]],N[12]=[[0,1,0,1,0],[1,0,1,1,1],[0,1,0,1,0],[1,1,1,0,1],[0,1,0,1,0]],N[13]=[[0,1,0,0,0],[1,0,0,0,0],[0,0,0,1,1],[0,0,1,0,1],[0,0,1,1,0]],N[14]=[[0,1,1,1,1],[1,0,1,0,1],[1,1,0,0,1],[1,0,0,0,0],[1,1,1,0,0]],N[15]=[[0,0,0,1,0],[0,0,1,1,1],[0,1,0,1,1],[1,1,1,0,0],[0,1,1,0,0]],N[16]=[[0,0,1,1,0],[0,0,1,0,0],[1,1,0,1,1],[1,0,1,0,1],[0,0,1,1,0]],N[17]=[[0,1,1,1,1],[1,0,1,1,1],[1,1,0,1,1],[1,1,1,0,0],[1,1,1,0,0]],N[18]=[[0,1,1,1,1],[1,0,1,1,1],[1,1,0,0,0],[1,1,0,0,1],[1,1,0,1,0]],N[19]=[[0,1,1,1,1],[1,0,0,0,1],[1,0,0,1,0],[1,0,1,0,1],[1,1,0,1,0]],N[20]=[[0,0,1,0,0],[0,0,1,1,0],[1,1,0,1,1],[0,1,1,0,0],[0,0,1,0,0]],N[21]=[[0,0,1,1,0],[0,0,0,0,0],[1,0,0,1,1],[1,0,1,0,0],[0,0,1,0,0]],N[22]=[[0,0,1,1,0],[0,0,0,1,1],[1,0,0,0,1],[1,1,0,0,0],[0,1,1,0,0]],N[23]=[[0,0,1,0,0,0],[0,0,1,1,0,0],[1,1,0,1,0,0],[0,1,1,0,1,1],[0,0,0,1,0,0],[0,0,0,1,0,0]],N[24]=[[0,1,1,0,1,1],[1,0,0,1,0,0],[1,0,0,1,0,1],[0,1,1,0,1,1],[1,0,0,1,0,0],[1,0,1,1,0,0]],N[25]=[[0,1,1,1,1,1],[1,0,1,1,0,1],[1,1,0,1,0,0],[1,1,1,0,1,0],[1,0,0,1,0,1],[1,1,0,0,1,0]],N[26]=[[0,1,0,1,0,1],[1,0,0,0,1,1],[0,0,0,1,0,1],[1,0,1,0,1,1],[0,1,0,1,0,1],[1,1,1,1,1,0]],N[27]=[[0,0,0,0,0,1],[0,0,0,1,1,0],[0,0,0,1,1,0],[0,1,1,0,0,1],[0,1,1,0,0,1],[1,0,0,1,1,0]],N[28]=[[0,1,1,1,0,0],[1,0,1,0,0,1],[1,1,0,1,1,0],[1,0,1,0,1,1],[0,0,1,1,0,1],[0,1,0,1,1,0]],N[29]=[[0,1,0,0,1,0],[1,0,0,1,1,0],[0,0,0,0,0,1],[0,1,0,0,0,1],[1,1,0,0,0,0],[0,0,1,1,0,0]],N[30]=[[0,1,1,1,1,1],[1,0,0,1,1,1],[1,0,0,0,0,1],[1,1,0,0,0,1],[1,1,0,0,0,1],[1,1,1,1,1,0]],N[31]=[[0,0,1,1,0,0],[0,0,1,1,0,1],[1,1,0,1,1,0],[1,1,1,0,0,1],[0,0,1,0,0,1],[0,1,0,1,1,0]],N[32]=[[0,0,0,1,1,1],[0,0,1,0,1,0],[0,1,0,0,0,0],[1,0,0,0,1,1],[1,1,0,1,0,0],[1,0,0,1,0,0]],N[33]=[[0,1,1,1,0,1],[1,0,1,1,0,0],[1,1,0,0,1,1],[1,1,0,0,0,1],[0,0,1,0,0,1],[1,0,1,1,1,0]],N[34]=[[0,0,0,1,0,0],[0,0,1,1,1,1],[0,1,0,0,1,0],[1,1,0,0,1,1],[0,1,1,1,0,0],[0,1,0,1,0,0]],N[35]=[[0,0,1,0,0,1],[0,0,1,1,0,1],[1,1,0,1,0,1],[0,1,1,0,1,1],[0,0,0,1,0,0],[1,1,1,1,0,0]],N[36]=[[0,1,0,0,0,1],[1,0,0,0,1,0],[0,0,0,1,1,0],[0,0,1,0,1,1],[0,1,1,1,0,1],[1,0,0,1,1,0]],N[37]=[[0,1,1,0,1,0],[1,0,0,1,0,1],[1,0,0,0,0,1],[0,1,0,0,1,1],[1,0,0,1,0,0],[0,1,1,1,0,0]],N[38]=[[0,0,0,1,0,0],[0,0,1,1,0,0],[0,1,0,0,1,1],[1,1,0,0,0,1],[0,0,1,0,0,0],[0,0,1,1,0,0]],N[39]=[[0,1,0,1,1,1],[1,0,0,0,0,1],[0,0,0,0,0,0],[1,0,0,0,0,0],[1,0,0,0,0,1],[1,1,0,0,1,0]],N[40]=[[0,1,1,1,1,1],[1,0,1,0,0,1],[1,1,0,1,1,1],[1,0,1,0,1,1],[1,0,1,1,0,1],[1,1,1,1,1,0]],N[41]=[[0,1,1,0,1,0],[1,0,1,1,0,0],[1,1,0,1,0,0],[0,1,1,0,1,1],[1,0,0,1,0,0],[0,0,0,1,0,0]],N[42]=[[0,1,0,1,0,1],[1,0,0,0,0,1],[0,0,0,0,0,1],[1,0,0,0,0,1],[0,0,0,0,0,1],[1,1,1,1,1,0]],N[43]=[[0,1,0,0,1,1],[1,0,1,1,0,1],[0,1,0,0,1,1],[0,1,0,0,1,1],[1,0,1,1,0,0],[1,1,1,1,0,0]],N[44]=[[0,1,1,1,0,1],[1,0,1,0,0,1],[1,1,0,1,1,0],[1,0,1,0,0,1],[0,0,1,0,0,0],[1,1,0,1,0,0]],N[45]=[[0,1,1,0,0,0],[1,0,0,1,0,0],[1,0,0,0,0,1],[0,1,0,0,1,1],[0,0,0,1,0,0],[0,0,1,1,0,0]],N[46]=[[0,0,1,1,0,1,1],[0,0,1,1,1,1,0],[1,1,0,1,0,1,1],[1,1,1,0,1,1,0],[0,1,0,1,0,1,1],[1,1,1,1,1,0,1],[1,0,1,0,1,1,0]],N[47]=[[0,1,0,1,0,1,1],[1,0,1,1,1,1,1],[0,1,0,0,1,1,1],[1,1,0,0,0,0,1],[0,1,1,0,0,1,1],[1,1,1,0,1,0,1],[1,1,1,1,1,1,0]],N[48]=[[0,1,1,1,1,0,0],[1,0,0,0,0,1,0],[1,0,0,1,1,0,0],[1,0,1,0,0,1,1],[1,0,1,0,0,1,1],[0,1,0,1,1,0,1],[0,0,0,1,1,1,0]],N[49]=[[0,1,1,1,1,0,0],[1,0,1,0,1,0,1],[1,1,0,1,1,1,1],[1,0,1,0,1,1,1],[1,1,1,1,0,1,1],[0,0,1,1,1,0,1],[0,1,1,1,1,1,0]],N[50]=[[0,0,1,1,1,1,0],[0,0,1,1,0,0,0],[1,1,0,0,1,0,0],[1,1,0,0,1,1,1],[1,0,1,1,0,1,1],[1,0,0,1,1,0,1],[0,0,0,1,1,1,0]],N[51]=[[0,1,1,0,1,1,1],[1,0,0,0,0,0,1],[1,0,0,1,0,1,1],[0,0,1,0,1,1,0],[1,0,0,1,0,1,0],[1,0,1,1,1,0,1],[1,1,1,0,0,1,0]],N[52]=[[0,0,1,0,0,0,1],[0,0,1,0,0,1,0],[1,1,0,0,1,0,1],[0,0,0,0,0,1,1],[0,0,1,0,0,1,0],[0,1,0,1,1,0,0],[1,0,1,1,0,0,0]],N[53]=[[0,1,1,1,0,1,0],[1,0,0,1,1,1,1],[1,0,0,0,1,1,1],[1,1,0,0,0,1,0],[0,1,1,0,0,1,1],[1,1,1,1,1,0,1],[0,1,1,0,1,1,0]],N[54]=[[0,1,1,1,1,0,1],[1,0,0,1,1,1,1],[1,0,0,0,1,0,1],[1,1,0,0,0,0,1],[1,1,1,0,0,0,0],[0,1,0,0,0,0,1],[1,1,1,1,0,1,0]],N[55]=[[0,0,1,0,1,0,1,0],[0,0,0,0,0,1,1,1],[1,0,0,1,1,1,1,0],[0,0,1,0,1,0,1,1],[1,0,1,1,0,1,1,1],[0,1,1,0,1,0,1,0],[1,1,1,1,1,1,0,1],[0,1,0,1,1,0,1,0]],N[56]=[[0,1,0,1,0,1,1,1],[1,0,1,1,1,1,1,1],[0,1,0,0,1,1,1,1],[1,1,0,0,0,1,1,0],[0,1,1,0,0,1,1,1],[1,1,1,1,1,0,1,1],[1,1,1,1,1,1,0,1],[1,1,1,0,1,1,1,0]],N[57]=[[0,0,1,0,0,0,0,1],[0,0,1,0,0,1,1,1],[1,1,0,0,0,1,1,1],[0,0,0,0,1,0,1,1],[0,0,0,1,0,1,1,0],[0,1,1,0,1,0,1,1],[0,1,1,1,1,1,0,1],[1,1,1,1,0,1,1,0]],N[58]=[[0,1,1,0,0,1,0,0],[1,0,1,1,1,1,1,1],[1,1,0,0,1,1,1,0],[0,1,0,0,1,1,1,1],[0,1,1,1,0,0,0,1],[1,1,1,1,0,0,0,1],[0,1,1,1,0,0,0,1],[0,1,0,1,1,1,1,0]],N[59]=[[0,1,1,1,0,0,1,1],[1,0,0,1,0,0,1,1],[1,0,0,0,1,1,0,1],[1,1,0,0,1,1,1,1],[0,0,1,1,0,1,0,1],[0,0,1,1,1,0,1,1],[1,1,0,1,0,1,0,1],[1,1,1,1,1,1,1,0]],N[60]=[[0,1,1,1,0,0,1,1],[1,0,1,1,0,1,1,1],[1,1,0,1,1,0,0,0],[1,1,1,0,1,0,1,1],[0,0,1,1,0,1,1,0],[0,1,0,0,1,0,0,1],[1,1,0,1,1,0,0,0],[1,1,0,1,0,1,0,0]],N[61]=[[0,0,1,1,1,1,1,1],[0,0,1,1,0,0,1,0],[1,1,0,1,0,0,1,1],[1,1,1,0,1,0,1,1],[1,0,0,1,0,1,0,1],[1,0,0,0,1,0,1,1],[1,1,1,1,0,1,0,1],[1,0,1,1,1,1,1,0]],N[62]=[[0,1,0,1,0,1,1,0],[1,0,1,1,1,1,1,0],[0,1,0,1,1,1,0,1],[1,1,1,0,0,0,0,1],[0,1,1,0,0,1,1,1],[1,1,1,0,1,0,0,1],[1,1,0,0,1,0,0,1],[0,0,1,1,1,1,1,0]],N[63]=[[0,1,1,0,0,0,1,0],[1,0,0,1,1,1,1,1],[1,0,0,1,1,0,0,0],[0,1,1,0,1,0,0,1],[0,1,1,1,0,0,1,1],[0,1,0,0,0,0,1,0],[1,1,0,0,1,1,0,0],[0,1,0,1,1,0,0,0]],N[64]=[[0,1,0,1,1,0,1,1],[1,0,1,1,0,0,1,1],[0,1,0,1,1,1,1,1],[1,1,1,0,1,0,1,0],[1,0,1,1,0,0,0,1],[0,0,1,0,0,0,1,1],[1,1,1,1,0,1,0,1],[1,1,1,0,1,1,1,0]];const I=[];for(let e=0;e<N.length;e+=1){const n={name:"cose",boundingBox:{x1:0,y1:0,x2:300,y2:300}},r=i(N[e]),t={family:"Samples",name_en:`Graph G<sub>${e}</sub>`,name_fr:`Graphe G<sub>${e}</sub>`,name_de:`Graph G<sub>${e}</sub>`,file:`G_${e}`,invariants:f(r)},a=c(r,n);a.then((()=>p(r,`./src/graph-gallery/data/${t.file}.data`))).catch((e=>{console.error(e)})),a.then((()=>l(r,`./src/graph-gallery/data/${t.file}.png`))).catch((e=>{console.error(e)})),I.push(t)}m(I),process.setMaxListeners(0);
//# sourceMappingURL=generate-graphs.js.map
