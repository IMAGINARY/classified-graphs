var e=require("cytoscape"),t=require("fs/promises"),n=require("cytosnap"),r=require("fs"),a=require("mathjs");function o(e){return e&&e.__esModule?e.default:e}const s=o(n)();function l(e,n){s.start().then((()=>s.shot({elements:e.json().elements,layout:{name:"preset"},style:[{selector:"node",style:{"background-color":"red"}},{selector:"edge",style:{"line-color":"red","curve-style":"bezier"}}],resolvesTo:"base64uri",format:"png",width:640,height:480,background:"transparent"}))).then((e=>{const r=e.replace(/^data:image\/\w+;base64,/,""),a=Buffer.from(r,"base64");t.writeFile(n,a).then((()=>{console.log("Saved thumbnail "+n)})).catch((e=>{console.error(e)}))}))}function c(e,t){const n=e.layout(t),r=n.promiseOn("layoutstop");return n.run(),r}function i(t){const n=o(e)(),r=t.length;for(let e=0;e<r;e+=1)n.add({group:"nodes",data:{id:`N-${e}`}});for(let e=0;e<r;e+=1)for(let a=e;a<r;a+=1)for(let r=0;r<t[e][a];r+=1)n.add({group:"edges",data:{source:n.nodes()[e].id(),target:n.nodes()[a].id(),id:`E-${e}-${a}-${r}`}});return n}var d=function(t){const n=t.kruskal((()=>1)).absoluteComplement().edges().map((e=>t.aStar({root:e.source(),goal:e.target(),weight:t=>e===t?Number.POSITIVE_INFINITY:1}).path.union(e))),r={cycle:o(e)().collection(),length:Number.POSITIVE_INFINITY},a=n.map((e=>({cycle:e,length:e.edges().size()}))).reduce(((e,t)=>e.length<t.length?e:t),r);return{path:a.cycle,value:a.length}};var g=function(e){const t=e.kruskal((()=>1));return t.absoluteComplement().edges().map((e=>t.aStar({root:e.source(),goal:e.target()}).path.union(e)))};var h=function(t){const n=t.floydWarshall({weight:()=>1}),r=t.nodes(),a=r.length;let s=o(e)().collection(),l=-1/0;for(let e=0;e<a;e+=1)for(let t=e;t<a;t+=1)n.distance(r[e],r[t])>l&&(l=n.distance(r[e],r[t]),s=n.path(r[e],r[t]).union([r[e],r[t]]));return{path:s,value:l}};var u=function(e,t={}){const n=t.indexing??function(e){const t=e.nodes(),n=new Map(t.map(((e,t)=>[e.id(),t])));return e=>{const t=n.get(e.id());if(void 0===t)throw new RangeError(`Unknown node: ${e.json()}`);return t}}(e),r=t.directed??!1,a=t.subgraph??!1,o=e.nodes(),s=o[0].cy(),l=a?s.nodes().size():o.size(),c=new Array(l).fill(null).map((()=>new Array(l).fill(0)));return e.edges().forEach((e=>{const t=e.source(),a=e.target();if(t.isNode()&&a.isNode()){const t=n(e.source()),a=n(e.target());c[t][a]+=1,r||(c[a][t]+=1)}})),c};function f(e){const t=e.elements().nodes().map((e=>e.degree(!0))).sort(((e,t)=>t-e));let n;if(e.nodes().size()>0){const t=u(e.elements());n=(0,a.det)(t)}return{numNodes:e.elements().nodes().size(),numEdges:e.elements().edges().size(),girth:d(e.elements()).value,degSequence:t,components:e.elements().components().length,circuitRank:g(e.elements()).length,diameter:h(e.elements()).value,detAdjacency:n}}function p(e,t){const n=e.json(),a=JSON.stringify(n,null,4);r.writeFile(t,a,{},(e=>{if(e)throw e;console.log(`Saved file ${t}`)}))}function y(e){!function(e){const t="src/graph-gallery/graphs-list.json";r.existsSync(t)||r.closeSync(r.openSync(t,"w"));const n=r.readFileSync(t);if(0===n.length)r.writeFileSync(t,JSON.stringify(e));else{const a=JSON.parse(n.toString());a.push(...e),r.writeFileSync(t,JSON.stringify(a))}}(e),function(e){const t=r.createWriteStream("src/graph-gallery/graphs-assets.ts",{flags:"a"});e.forEach((e=>{t.write(`export const ${e.file} = new URL('../graph-gallery/data/${e.file}.data', import.meta.url).href;`),t.write(`export const ${e.file}_Icon = new URL('../graph-gallery/data/${e.file}.png', import.meta.url).href;`)})),t.end()}(e)}function m(t){const n=o(e)();for(let e=0;e<t;e+=1){n.add({group:"nodes",data:{id:`N-${e}`}});for(let t=0;t<e;t+=1)n.add({group:"edges",data:{source:n.nodes()[t].id(),target:n.nodes()[e].id(),id:`E-${t}-${e}`}})}return n}console.log("Creating files for Complete graphs");const $={name:"circle",boundingBox:{x1:0,y1:0,x2:300,y2:300}},x=[];for(let e=2;e<9;e+=1){const t=m(e),n={family:"Complete",name:`Complete of order ${e}`,file:`complete_${e}`,invariants:f(t)},r=c(t,$);r.then((()=>p(t,`./src/graph-gallery/data/${n.file}.data`))).catch((e=>{console.error(e)})),r.then((()=>l(t,`./src/graph-gallery/data/${n.file}.png`))).catch((e=>{console.error(e)})),x.push(n)}y(x);const b=["2  1 1 1","2  0 3 0","4  1 0 0 1 1 0 1 1 1 0","4  0 0 1 2 1 0 1 1 0 0","4  0 0 2 1 1 0 1 0 1 0","4  0 0 2 1 0 1 2 0 0 0","4  0 1 1 1 0 1 1 0 1 0","6  0 0 0 0 2 1 1 0 0 1 0 1 0 0 1 1 0 1 0 0 0","6  1 0 0 0 1 0 1 0 0 1 0 1 0 0 1 1 0 1 0 1 0","6  0 0 0 1 1 1 0 0 0 2 1 1 0 0 1 1 0 0 0 0 0","6  0 0 0 2 1 0 0 0 0 2 1 1 0 0 1 0 0 1 0 0 0","6  0 0 0 1 1 1 1 0 0 1 0 1 0 0 1 1 0 0 0 1 0","6  0 0 0 1 0 2 0 0 0 2 1 1 0 1 0 1 0 0 0 0 0","6  0 0 0 2 0 1 0 0 0 2 1 1 0 1 0 0 0 1 0 0 0","6  0 0 0 2 0 1 1 0 0 1 0 1 0 1 0 0 0 1 0 1 0","6  0 0 0 2 1 0 0 0 1 0 2 0 0 2 1 0 0 0 0 0 0","6  0 0 0 1 1 1 0 0 2 0 1 0 0 2 1 0 0 0 0 0 0","6  0 0 0 1 1 1 1 0 1 0 0 0 0 2 1 0 0 1 0 0 0","6  0 0 0 1 1 1 1 0 1 0 0 1 0 1 0 0 0 1 0 1 0","6  0 0 0 1 1 1 0 0 1 1 1 1 0 1 0 0 0 1 0 0 0","6  0 0 0 1 1 1 0 0 1 1 1 0 1 1 1 0 0 0 0 0 0","6  0 0 1 0 1 1 0 0 2 0 1 0 0 2 0 0 0 1 0 0 0","6  0 0 1 1 0 1 0 0 1 1 1 0 0 2 0 0 0 1 0 0 0","6  0 0 1 1 1 0 0 0 1 1 1 0 0 1 1 0 0 1 0 0 0","8  0 0 0 0 0 2 1 0 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 1 0 0 1 0 0 1 0 0 0","8  0 0 0 0 0 1 2 0 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 0 1 1 0 0 1 0 0 0 0 0 0","8  0 0 0 0 0 2 0 1 1 0 0 0 1 0 0 0 0 0 0 2 1 1 0 0 1 0 1 0 0 1 0 0 0 0 0 0","8  1 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 2 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0","8  1 0 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 1 0 0 1 0 0 1 0 1 0","8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 1 0 0 0 1 0 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0","8  0 0 0 0 2 0 1 0 0 0 0 0 2 1 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 1 0 0 0","8  0 0 0 0 2 0 1 0 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 0 2 1 0 0 0 0 0 2 1 1 0 0 0 1 1 0 0 0 0 0 0 0 0 0","8  0 0 0 0 2 1 0 0 0 0 0 0 2 1 0 0 0 0 0 2 1 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 0 2 1 0 1 0 0 0 1 0 1 0 0 0 1 1 0 0 0 0 0 0 0 1 0","8  0 0 0 0 1 1 0 1 0 0 0 0 2 0 1 0 0 0 0 2 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0","8  0 0 0 0 2 1 0 0 0 0 0 0 2 0 1 0 0 0 0 2 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 1 0 0 0 1 0 0 0 0 0 0 2 1 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 0 0 1 0","8  0 0 0 0 2 1 0 0 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 0 0 1 0","8  0 0 0 0 1 1 0 1 1 0 0 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 1 0 1 0","8  0 0 0 0 1 0 0 2 0 0 0 0 1 2 0 0 0 0 2 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0","8  0 0 0 0 2 0 0 1 0 0 0 0 1 2 0 0 0 0 2 0 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 2 0 0 1 0 0 0 0 1 2 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 0 0 0 2 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0","8  0 0 0 0 1 0 1 1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 1 1 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 2 0 0 0 0 0 0 1 0","8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 0 0 0 1 1 1 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 1 2 0 0 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 0 0 1 0","8  0 0 0 0 1 2 0 0 0 0 0 1 0 2 0 0 0 0 1 1 1 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 2 1 0 0 0 0 0 1 0 2 0 0 0 0 2 0 1 0 0 0 1 2 0 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 0 0 0 2 0 1 0 0 0 2 1 0 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 1 0 2 0 0 0 0 2 0 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 1 0 0 1 0 0 0 0 0 2 1 0 0 0 0 0 0 1 0 0 0","8  0 0 0 0 2 1 0 0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 2 1 0 0 0 0 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 1 0 2 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0 1 0","8  0 0 0 0 1 2 0 0 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 2 0 1 0 0 0 0 1 1 1 0 0 2 0 1 0 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 1 0 1 1 0 0 0 2 1 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 2 0 1 0 0 0 0 1 1 1 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0","8  0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 0 1 1 1 1 0 1 0 0 0 0 1 0 0 0 1 0 0 0","8  1 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 1 1 0 0 1 1 1 0 0 1 0 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 0 0 0 1 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0","8  0 0 0 0 1 1 1 0 0 0 0 1 1 0 1 0 0 1 0 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0","8  0 0 0 1 0 0 1 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0","8  0 0 0 2 0 0 1 0 0 0 0 1 0 1 1 0 0 0 1 1 1 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0","8  0 0 0 2 0 0 1 0 0 0 0 2 0 1 0 0 0 0 2 1 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0","8  0 0 0 2 0 0 1 0 0 0 0 2 0 1 0 0 0 0 2 0 1 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0","8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 0 0 0","8  0 0 0 1 0 2 0 0 0 0 0 1 0 1 1 0 0 0 1 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0","8  0 0 0 1 0 2 0 0 0 0 0 2 0 1 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 0 0 0 2 1 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 0 0 0 0 2 1 0 0 2 0 0 1 0 0 0 0 0 0 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 2 0 1 0 0 0 0 0 2 1 0 0 2 0 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 1 0 0 0 2 0 0 1 0 0 0 0 0 0 0 1 0","8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 0 1 0 0 2 0 0 0 0 2 0 0 0 0 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 1 0 0 0 2 0 0 0 0 1 1 0 0 0 0 0 0","8  0 0 0 1 0 1 1 0 0 0 0 1 1 0 1 1 0 0 1 0 0 0 0 0 1 1 0 0 1 1 0 0 0 0 0 0","8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 1 0 1 0 0 1 1 0 0 0 0 0 0","8  0 0 0 1 1 0 0 1 0 0 0 1 1 0 1 0 0 0 2 1 0 0 0 0 2 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 1 0 0 1 0 0 0 1 2 0 0 0 0 0 1 1 1 0 0 0 2 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 1 0 1 0 0 0 0 1 1 0 1 0 0 0 2 1 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 1 0 1 0 0 0 0 1 2 0 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1 2 0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 2 0 0 1 0 0 0 0 1 1 1 0 0 0 1 1 0 1 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 1 1 1 0 0 0 1 0 1 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0","8  0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1 1 0 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0","8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 0 0 1 0 1 1 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0","8  0 0 0 1 1 0 0 1 0 0 0 0 1 1 1 0 0 0 1 2 0 0 2 0 0 0 0 0 0 0 0 0 1 0 0 0"];function v(t){const n=o(e)(),r=(Number(t.split("  ")[0])+2)/2,a=t.split("  ")[1].split(" ").map(Number);let s=0;for(let e=0;e<2*r-2;e+=1)n.add({group:"nodes",data:{id:`N-${e}`}});for(let e=0;e<2*r-2;e+=1)for(let t=e;t<2*r-2;t+=1){for(let r=0;r<a[s];r+=1)n.add({group:"edges",data:{source:n.nodes()[e].id(),target:n.nodes()[t].id(),id:`E-${e}-${t}-${r}`}});s+=1}return n}console.log("Creating files for trivalent graphs");const w=[];let S=0,M=1;for(const e of b){const t=(Number(e.split("  ")[0])+2)/2;t!==M&&(S=0),M=t;const n={name:"cose",boundingBox:{x1:0,y1:0,x2:300,y2:300}},r=v(e),a={family:"Trivalent",name:`Trivalent ${t}<sub>${S}</sub>`,file:`trivalent_${t}_${S}`,invariants:f(r)},o=c(r,n);o.then((()=>p(r,`./src/graph-gallery/data/${a.file}.data`))).catch((e=>{console.error(e)})),o.then((()=>l(r,`./src/graph-gallery/data/${a.file}.png`))).catch((e=>{console.error(e)})),w.push(a),S+=1}y(w),console.log("Creating files for More graphs");const N=[];{const e=i([[0,1,0,2],[1,0,1,1],[0,1,0,2],[2,1,2,0]]),t={name:"circle",boundingBox:{x1:0,y1:0,x2:300,y2:300}},n={family:"Special",name:"Königsberg",file:"konigsberg",invariants:f(e)},r=c(e,t);r.then((()=>p(e,`./src/graph-gallery/data/${n.file}.data`))).catch((e=>{console.error(e)})),r.then((()=>l(e,`./src/graph-gallery/data/${n.file}.png`))).catch((e=>{console.error(e)})),N.push(n)}{const e=i([[0,1,1,0,1,0,0,0],[1,0,0,1,0,1,0,0],[1,0,0,1,0,0,1,0],[0,1,1,0,0,0,0,1],[1,0,0,0,0,1,1,0],[0,1,0,0,1,0,0,1],[0,0,1,0,1,0,0,1],[0,0,0,1,0,1,1,0]]),t={name:"cose",boundingBox:{x1:0,y1:0,x2:300,y2:300}},n={family:"Platonic",name:"Cube",file:"cube",invariants:f(e)},r=c(e,t);r.then((()=>p(e,`./src/graph-gallery/data/${n.file}.data`))).catch((e=>{console.error(e)})),r.then((()=>l(e,`./src/graph-gallery/data/${n.file}.png`))).catch((e=>{console.error(e)})),N.push(n)}{const e=i([[0,1,1,0,1,1],[1,0,1,1,0,1],[1,1,0,1,1,0],[0,1,1,0,1,1],[1,0,1,1,0,1],[1,1,0,1,1,0]]),t={name:"circle",boundingBox:{x1:0,y1:0,x2:300,y2:300}},n={family:"Platonic",name:"Octahedron",file:"octahedron",invariants:f(e)},r=c(e,t);r.then((()=>p(e,`./src/graph-gallery/data/${n.file}.data`))).catch((e=>{console.error(e)})),r.then((()=>l(e,`./src/graph-gallery/data/${n.file}.png`))).catch((e=>{console.error(e)})),N.push(n)}{const e=i([[0,1,1,1,1,0,0],[1,0,0,1,0,1,0],[1,0,0,0,1,0,1],[1,1,0,0,0,1,0],[1,0,1,0,0,0,1],[0,1,0,1,0,0,1],[0,0,1,0,1,1,0]]);e.nodes().positions(((e,t)=>{const n=250,r=Math.PI/180*45,a=Math.PI/180*20,o=n/(2*Math.cos(r)*Math.cos(a));switch(t+1){case 1:return{x:150,y:10};case 2:return{x:150-o*Math.sin(r+a),y:10+o*Math.cos(r+a)};case 3:return{x:150+o*Math.sin(r+a),y:10+o*Math.cos(r+a)};case 4:return{x:150-o*Math.sin(r-a),y:10+o*Math.cos(r-a)};case 5:return{x:150+o*Math.sin(r-a),y:10+o*Math.cos(r-a)};case 6:return{x:150-n*Math.tan(r),y:260};case 7:return{x:150+n*Math.tan(r),y:260};default:return{x:0,y:0}}}));const t={name:"preset",boundingBox:{x1:0,y1:0,x2:300,y2:300}},n={family:"Other",name:"Moser spindle",file:"moser_spindle",invariants:f(e)},r=c(e,t);r.then((()=>p(e,`./src/graph-gallery/data/${n.file}.data`))).catch((e=>{console.error(e)})),r.then((()=>l(e,`./src/graph-gallery/data/${n.file}.png`))).catch((e=>{console.error(e)})),N.push(n)}y(N),console.log("Creating files for More graphs 2");const I=[];I[0]=[[0,1,0],[1,0,0],[0,0,0]],I[1]=[[0,0,1],[0,0,1],[1,1,0]],I[2]=[[0,1,1],[1,0,1],[1,1,0]],I[3]=[[0,0,0],[0,0,0],[0,0,0]],I[4]=[[0,0,1,1],[0,0,1,0],[1,1,0,0],[1,0,0,0]],I[5]=[[0,1,1,0],[1,0,0,1],[1,0,0,1],[0,1,1,0]],I[6]=[[0,1,0,0],[1,0,0,0],[0,0,0,1],[0,0,1,0]],I[7]=[[0,1,1,0],[1,0,0,0],[1,0,0,0],[0,0,0,0]],I[8]=[[0,1,1,0],[1,0,1,1],[1,1,0,1],[0,1,1,0]],I[9]=[[0,0,1,1,1],[0,0,0,1,1],[1,0,0,1,1],[1,1,1,0,0],[1,1,1,0,0]],I[10]=[[0,1,0,0,1],[1,0,1,1,0],[0,1,0,1,1],[0,1,1,0,0],[1,0,1,0,0]],I[11]=[[0,1,0,1,0],[1,0,0,0,0],[0,0,0,1,1],[1,0,1,0,0],[0,0,1,0,0]],I[12]=[[0,1,0,1,0],[1,0,1,1,1],[0,1,0,1,0],[1,1,1,0,1],[0,1,0,1,0]],I[13]=[[0,1,0,0,0],[1,0,0,0,0],[0,0,0,1,1],[0,0,1,0,1],[0,0,1,1,0]],I[14]=[[0,1,1,1,1],[1,0,1,0,1],[1,1,0,0,1],[1,0,0,0,0],[1,1,1,0,0]],I[15]=[[0,0,0,1,0],[0,0,1,1,1],[0,1,0,1,1],[1,1,1,0,0],[0,1,1,0,0]],I[16]=[[0,0,1,1,0],[0,0,1,0,0],[1,1,0,1,1],[1,0,1,0,1],[0,0,1,1,0]],I[17]=[[0,1,1,1,1],[1,0,1,1,1],[1,1,0,1,1],[1,1,1,0,0],[1,1,1,0,0]],I[18]=[[0,1,1,1,1],[1,0,1,1,1],[1,1,0,0,0],[1,1,0,0,1],[1,1,0,1,0]],I[19]=[[0,1,1,1,1],[1,0,0,0,1],[1,0,0,1,0],[1,0,1,0,1],[1,1,0,1,0]],I[20]=[[0,0,1,0,0],[0,0,1,1,0],[1,1,0,1,1],[0,1,1,0,0],[0,0,1,0,0]],I[21]=[[0,0,1,1,0],[0,0,0,0,0],[1,0,0,1,1],[1,0,1,0,0],[0,0,1,0,0]],I[22]=[[0,0,1,1,0],[0,0,0,1,1],[1,0,0,0,1],[1,1,0,0,0],[0,1,1,0,0]],I[23]=[[0,0,1,0,0,0],[0,0,1,1,0,0],[1,1,0,1,0,0],[0,1,1,0,1,1],[0,0,0,1,0,0],[0,0,0,1,0,0]],I[24]=[[0,1,1,0,1,1],[1,0,0,1,0,0],[1,0,0,1,0,1],[0,1,1,0,1,1],[1,0,0,1,0,0],[1,0,1,1,0,0]],I[25]=[[0,1,1,1,1,1],[1,0,1,1,0,1],[1,1,0,1,0,0],[1,1,1,0,1,0],[1,0,0,1,0,1],[1,1,0,0,1,0]],I[26]=[[0,1,0,1,0,1],[1,0,0,0,1,1],[0,0,0,1,0,1],[1,0,1,0,1,1],[0,1,0,1,0,1],[1,1,1,1,1,0]],I[27]=[[0,0,0,0,0,1],[0,0,0,1,1,0],[0,0,0,1,1,0],[0,1,1,0,0,1],[0,1,1,0,0,1],[1,0,0,1,1,0]],I[28]=[[0,1,1,1,0,0],[1,0,1,0,0,1],[1,1,0,1,1,0],[1,0,1,0,1,1],[0,0,1,1,0,1],[0,1,0,1,1,0]],I[29]=[[0,1,0,0,1,0],[1,0,0,1,1,0],[0,0,0,0,0,1],[0,1,0,0,0,1],[1,1,0,0,0,0],[0,0,1,1,0,0]],I[30]=[[0,1,1,1,1,1],[1,0,0,1,1,1],[1,0,0,0,0,1],[1,1,0,0,0,1],[1,1,0,0,0,1],[1,1,1,1,1,0]],I[31]=[[0,0,1,1,0,0],[0,0,1,1,0,1],[1,1,0,1,1,0],[1,1,1,0,0,1],[0,0,1,0,0,1],[0,1,0,1,1,0]],I[32]=[[0,0,0,1,1,1],[0,0,1,0,1,0],[0,1,0,0,0,0],[1,0,0,0,1,1],[1,1,0,1,0,0],[1,0,0,1,0,0]],I[33]=[[0,1,1,1,0,1],[1,0,1,1,0,0],[1,1,0,0,1,1],[1,1,0,0,0,1],[0,0,1,0,0,1],[1,0,1,1,1,0]],I[34]=[[0,0,0,1,0,0],[0,0,1,1,1,1],[0,1,0,0,1,0],[1,1,0,0,1,1],[0,1,1,1,0,0],[0,1,0,1,0,0]],I[35]=[[0,0,1,0,0,1],[0,0,1,1,0,1],[1,1,0,1,0,1],[0,1,1,0,1,1],[0,0,0,1,0,0],[1,1,1,1,0,0]],I[36]=[[0,1,0,0,0,1],[1,0,0,0,1,0],[0,0,0,1,1,0],[0,0,1,0,1,1],[0,1,1,1,0,1],[1,0,0,1,1,0]],I[37]=[[0,1,1,0,1,0],[1,0,0,1,0,1],[1,0,0,0,0,1],[0,1,0,0,1,1],[1,0,0,1,0,0],[0,1,1,1,0,0]],I[38]=[[0,0,0,1,0,0],[0,0,1,1,0,0],[0,1,0,0,1,1],[1,1,0,0,0,1],[0,0,1,0,0,0],[0,0,1,1,0,0]],I[39]=[[0,1,0,1,1,1],[1,0,0,0,0,1],[0,0,0,0,0,0],[1,0,0,0,0,0],[1,0,0,0,0,1],[1,1,0,0,1,0]],I[40]=[[0,1,1,1,1,1],[1,0,1,0,0,1],[1,1,0,1,1,1],[1,0,1,0,1,1],[1,0,1,1,0,1],[1,1,1,1,1,0]],I[41]=[[0,1,1,0,1,0],[1,0,1,1,0,0],[1,1,0,1,0,0],[0,1,1,0,1,1],[1,0,0,1,0,0],[0,0,0,1,0,0]],I[42]=[[0,1,0,1,0,1],[1,0,0,0,0,1],[0,0,0,0,0,1],[1,0,0,0,0,1],[0,0,0,0,0,1],[1,1,1,1,1,0]],I[43]=[[0,1,0,0,1,1],[1,0,1,1,0,1],[0,1,0,0,1,1],[0,1,0,0,1,1],[1,0,1,1,0,0],[1,1,1,1,0,0]],I[44]=[[0,1,1,1,0,1],[1,0,1,0,0,1],[1,1,0,1,1,0],[1,0,1,0,0,1],[0,0,1,0,0,0],[1,1,0,1,0,0]],I[45]=[[0,1,1,0,0,0],[1,0,0,1,0,0],[1,0,0,0,0,1],[0,1,0,0,1,1],[0,0,0,1,0,0],[0,0,1,1,0,0]],I[46]=[[0,0,1,1,0,1,1],[0,0,1,1,1,1,0],[1,1,0,1,0,1,1],[1,1,1,0,1,1,0],[0,1,0,1,0,1,1],[1,1,1,1,1,0,1],[1,0,1,0,1,1,0]],I[47]=[[0,1,0,1,0,1,1],[1,0,1,1,1,1,1],[0,1,0,0,1,1,1],[1,1,0,0,0,0,1],[0,1,1,0,0,1,1],[1,1,1,0,1,0,1],[1,1,1,1,1,1,0]],I[48]=[[0,1,1,1,1,0,0],[1,0,0,0,0,1,0],[1,0,0,1,1,0,0],[1,0,1,0,0,1,1],[1,0,1,0,0,1,1],[0,1,0,1,1,0,1],[0,0,0,1,1,1,0]],I[49]=[[0,1,1,1,1,0,0],[1,0,1,0,1,0,1],[1,1,0,1,1,1,1],[1,0,1,0,1,1,1],[1,1,1,1,0,1,1],[0,0,1,1,1,0,1],[0,1,1,1,1,1,0]],I[50]=[[0,0,1,1,1,1,0],[0,0,1,1,0,0,0],[1,1,0,0,1,0,0],[1,1,0,0,1,1,1],[1,0,1,1,0,1,1],[1,0,0,1,1,0,1],[0,0,0,1,1,1,0]],I[51]=[[0,1,1,0,1,1,1],[1,0,0,0,0,0,1],[1,0,0,1,0,1,1],[0,0,1,0,1,1,0],[1,0,0,1,0,1,0],[1,0,1,1,1,0,1],[1,1,1,0,0,1,0]],I[52]=[[0,0,1,0,0,0,1],[0,0,1,0,0,1,0],[1,1,0,0,1,0,1],[0,0,0,0,0,1,1],[0,0,1,0,0,1,0],[0,1,0,1,1,0,0],[1,0,1,1,0,0,0]],I[53]=[[0,1,1,1,0,1,0],[1,0,0,1,1,1,1],[1,0,0,0,1,1,1],[1,1,0,0,0,1,0],[0,1,1,0,0,1,1],[1,1,1,1,1,0,1],[0,1,1,0,1,1,0]],I[54]=[[0,1,1,1,1,0,1],[1,0,0,1,1,1,1],[1,0,0,0,1,0,1],[1,1,0,0,0,0,1],[1,1,1,0,0,0,0],[0,1,0,0,0,0,1],[1,1,1,1,0,1,0]],I[55]=[[0,0,1,0,1,0,1,0],[0,0,0,0,0,1,1,1],[1,0,0,1,1,1,1,0],[0,0,1,0,1,0,1,1],[1,0,1,1,0,1,1,1],[0,1,1,0,1,0,1,0],[1,1,1,1,1,1,0,1],[0,1,0,1,1,0,1,0]],I[56]=[[0,1,0,1,0,1,1,1],[1,0,1,1,1,1,1,1],[0,1,0,0,1,1,1,1],[1,1,0,0,0,1,1,0],[0,1,1,0,0,1,1,1],[1,1,1,1,1,0,1,1],[1,1,1,1,1,1,0,1],[1,1,1,0,1,1,1,0]],I[57]=[[0,0,1,0,0,0,0,1],[0,0,1,0,0,1,1,1],[1,1,0,0,0,1,1,1],[0,0,0,0,1,0,1,1],[0,0,0,1,0,1,1,0],[0,1,1,0,1,0,1,1],[0,1,1,1,1,1,0,1],[1,1,1,1,0,1,1,0]],I[58]=[[0,1,1,0,0,1,0,0],[1,0,1,1,1,1,1,1],[1,1,0,0,1,1,1,0],[0,1,0,0,1,1,1,1],[0,1,1,1,0,0,0,1],[1,1,1,1,0,0,0,1],[0,1,1,1,0,0,0,1],[0,1,0,1,1,1,1,0]],I[59]=[[0,1,1,1,0,0,1,1],[1,0,0,1,0,0,1,1],[1,0,0,0,1,1,0,1],[1,1,0,0,1,1,1,1],[0,0,1,1,0,1,0,1],[0,0,1,1,1,0,1,1],[1,1,0,1,0,1,0,1],[1,1,1,1,1,1,1,0]],I[60]=[[0,1,1,1,0,0,1,1],[1,0,1,1,0,1,1,1],[1,1,0,1,1,0,0,0],[1,1,1,0,1,0,1,1],[0,0,1,1,0,1,1,0],[0,1,0,0,1,0,0,1],[1,1,0,1,1,0,0,0],[1,1,0,1,0,1,0,0]],I[61]=[[0,0,1,1,1,1,1,1],[0,0,1,1,0,0,1,0],[1,1,0,1,0,0,1,1],[1,1,1,0,1,0,1,1],[1,0,0,1,0,1,0,1],[1,0,0,0,1,0,1,1],[1,1,1,1,0,1,0,1],[1,0,1,1,1,1,1,0]],I[62]=[[0,1,0,1,0,1,1,0],[1,0,1,1,1,1,1,0],[0,1,0,1,1,1,0,1],[1,1,1,0,0,0,0,1],[0,1,1,0,0,1,1,1],[1,1,1,0,1,0,0,1],[1,1,0,0,1,0,0,1],[0,0,1,1,1,1,1,0]],I[63]=[[0,1,1,0,0,0,1,0],[1,0,0,1,1,1,1,1],[1,0,0,1,1,0,0,0],[0,1,1,0,1,0,0,1],[0,1,1,1,0,0,1,1],[0,1,0,0,0,0,1,0],[1,1,0,0,1,1,0,0],[0,1,0,1,1,0,0,0]],I[64]=[[0,1,0,1,1,0,1,1],[1,0,1,1,0,0,1,1],[0,1,0,1,1,1,1,1],[1,1,1,0,1,0,1,0],[1,0,1,1,0,0,0,1],[0,0,1,0,0,0,1,1],[1,1,1,1,0,1,0,1],[1,1,1,0,1,1,1,0]];const C=[];for(let e=0;e<I.length;e+=1){const t={name:"cose",boundingBox:{x1:0,y1:0,x2:300,y2:300}},n=i(I[e]),r={family:"Samples",name:`Graph G<sub>${e}</sub>`,file:`G_${e}`,invariants:f(n)},a=c(n,t);a.then((()=>p(n,`./src/graph-gallery/data/${r.file}.data`))).catch((e=>{console.error(e)})),a.then((()=>l(n,`./src/graph-gallery/data/${r.file}.png`))).catch((e=>{console.error(e)})),C.push(r)}y(C),process.setMaxListeners(0);
//# sourceMappingURL=generate-graphs.js.map
