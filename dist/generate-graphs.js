var e=require("cytoscape"),r=require("fs/promises"),o=require("cytosnap"),t=require("fs");function n(e){return e&&e.__esModule?e.default:e}const s=n(o)();function l(e,o){s.start().then((()=>s.shot({elements:e.json().elements,layout:{name:"preset"},style:[{selector:"node",style:{"background-color":"red"}},{selector:"edge",style:{"line-color":"red","curve-style":"bezier"}}],resolvesTo:"base64uri",format:"png",width:640,height:480,background:"transparent"}))).then((e=>{const t=e.replace(/^data:image\/\w+;base64,/,""),n=Buffer.from(t,"base64");r.writeFile(o,n).then((()=>{console.log("Saved thumbnail "+o)})).catch((e=>{console.error(e)}))}))}function a(e,r){const o=e.layout(r);return o.run(),o.promiseOn("layoutstop")}function i(e,r){const o=e.json(),n=JSON.stringify(o,null,4);t.writeFile(r,n,{},(e=>{if(e)throw e;console.log(`Saved file ${r}`)}))}function c(e){!function(e){const r="src/graph-gallery/graphs-list.json";t.existsSync(r)||t.closeSync(t.openSync(r,"w"));const o=t.readFileSync(r);if(0===o.length)t.writeFileSync(r,JSON.stringify(e));else{const n=JSON.parse(o.toString());n.push(...e),t.writeFileSync(r,JSON.stringify(n))}}(e),function(e){const r=t.createWriteStream("src/graph-gallery/graphs-assets.ts",{flags:"a"});e.forEach((e=>{r.write(`export const ${e.file} = new URL('../graph-gallery/${e.file}.data', import.meta.url).href;`),r.write(`export const ${e.file}_Icon = new URL('../graph-gallery/${e.file}.png', import.meta.url).href;`)})),r.end()}(e)}function g(r){const o=n(e)();for(let e=0;e<r;e+=1){o.add({group:"nodes",data:{id:`N-${e}`}});for(let r=0;r<e;r+=1)o.add({group:"edges",data:{source:o.nodes()[r].id(),target:o.nodes()[e].id(),id:`E-${r}-${e}`}})}return o}console.log("Creating files for Complete graphs"),console.log("==================================");const f={name:"cose",boundingBox:{x1:0,y1:0,x2:300,y2:300}},d=[];for(let e=2;e<9;e+=1){const r={family:"Complete",name:`Complete of order ${e}`,file:`complete_${e}`},o=g(e),t=a(o,f);t.then((()=>i(o,`./src/graph-gallery/${r.file}.data`))).catch((e=>{console.error(e)})),t.then((()=>l(o,`./src/graph-gallery/${r.file}.png`))).catch((e=>{console.error(e)})),d.push(r)}c(d);const u=["2  1 1 1","2  0 3 0","4  1 0 0 1 1 0 1 1 1 0","4  0 0 1 2 1 0 1 1 0 0","4  0 0 2 1 1 0 1 0 1 0","4  0 0 2 1 0 1 2 0 0 0","4  0 1 1 1 0 1 1 0 1 0","6  0 0 0 0 2 1 1 0 0 1 0 1 0 0 1 1 0 1 0 0 0","6  1 0 0 0 1 0 1 0 0 1 0 1 0 0 1 1 0 1 0 1 0","6  0 0 0 1 1 1 0 0 0 2 1 1 0 0 1 1 0 0 0 0 0","6  0 0 0 2 1 0 0 0 0 2 1 1 0 0 1 0 0 1 0 0 0","6  0 0 0 1 1 1 1 0 0 1 0 1 0 0 1 1 0 0 0 1 0","6  0 0 0 1 0 2 0 0 0 2 1 1 0 1 0 1 0 0 0 0 0","6  0 0 0 2 0 1 0 0 0 2 1 1 0 1 0 0 0 1 0 0 0","6  0 0 0 2 0 1 1 0 0 1 0 1 0 1 0 0 0 1 0 1 0","6  0 0 0 2 1 0 0 0 1 0 2 0 0 2 1 0 0 0 0 0 0","6  0 0 0 1 1 1 0 0 2 0 1 0 0 2 1 0 0 0 0 0 0","6  0 0 0 1 1 1 1 0 1 0 0 0 0 2 1 0 0 1 0 0 0","6  0 0 0 1 1 1 1 0 1 0 0 1 0 1 0 0 0 1 0 1 0","6  0 0 0 1 1 1 0 0 1 1 1 1 0 1 0 0 0 1 0 0 0","6  0 0 0 1 1 1 0 0 1 1 1 0 1 1 1 0 0 0 0 0 0","6  0 0 1 0 1 1 0 0 2 0 1 0 0 2 0 0 0 1 0 0 0","6  0 0 1 1 0 1 0 0 1 1 1 0 0 2 0 0 0 1 0 0 0","6  0 0 1 1 1 0 0 0 1 1 1 0 0 1 1 0 0 1 0 0 0","8  0 0 0 0 0 2 1 0 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 1 0 0 1 0 0 1 0 0 0","8  0 0 0 0 0 1 2 0 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 0 1 1 0 0 1 0 0 0 0 0 0","8  0 0 0 0 0 2 0 1 1 0 0 0 1 0 0 0 0 0 0 2 1 1 0 0 1 0 1 0 0 1 0 0 0 0 0 0","8  1 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 2 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0","8  1 0 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 1 0 0 1 0 0 1 0 1 0","8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 1 0 0 0 1 0 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0","8  0 0 0 0 2 0 1 0 0 0 0 0 2 1 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 1 0 0 0","8  0 0 0 0 2 0 1 0 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 0 2 1 0 0 0 0 0 2 1 1 0 0 0 1 1 0 0 0 0 0 0 0 0 0","8  0 0 0 0 2 1 0 0 0 0 0 0 2 1 0 0 0 0 0 2 1 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 0 2 1 0 1 0 0 0 1 0 1 0 0 0 1 1 0 0 0 0 0 0 0 1 0","8  0 0 0 0 1 1 0 1 0 0 0 0 2 0 1 0 0 0 0 2 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0","8  0 0 0 0 2 1 0 0 0 0 0 0 2 0 1 0 0 0 0 2 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 1 0 0 0 1 0 0 0 0 0 0 2 1 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 0 0 1 0","8  0 0 0 0 2 1 0 0 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 0 0 1 0","8  0 0 0 0 1 1 0 1 1 0 0 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 1 0 1 0","8  0 0 0 0 1 0 0 2 0 0 0 0 1 2 0 0 0 0 2 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0","8  0 0 0 0 2 0 0 1 0 0 0 0 1 2 0 0 0 0 2 0 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 2 0 0 1 0 0 0 0 1 2 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 0 0 0 2 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0","8  0 0 0 0 1 0 1 1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 1 1 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 2 0 0 0 0 0 0 1 0","8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 0 0 0 1 1 1 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 1 2 0 0 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 0 0 1 0","8  0 0 0 0 1 2 0 0 0 0 0 1 0 2 0 0 0 0 1 1 1 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 2 1 0 0 0 0 0 1 0 2 0 0 0 0 2 0 1 0 0 0 1 2 0 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 0 0 0 2 0 1 0 0 0 2 1 0 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 1 0 2 0 0 0 0 2 0 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 1 0 0 1 0 0 0 0 0 2 1 0 0 0 0 0 0 1 0 0 0","8  0 0 0 0 2 1 0 0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 2 1 0 0 0 0 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 1 0 2 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0 1 0","8  0 0 0 0 1 2 0 0 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 2 0 1 0 0 0 0 1 1 1 0 0 2 0 1 0 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 1 0 1 1 0 0 0 2 1 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 2 0 1 0 0 0 0 1 1 1 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0","8  0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 0 1 1 1 1 0 1 0 0 0 0 1 0 0 0 1 0 0 0","8  1 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 1 1 0 0 1 1 1 0 0 1 0 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 0 0 0 1 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0","8  0 0 0 0 1 1 1 0 0 0 0 1 1 0 1 0 0 1 0 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0","8  0 0 0 1 0 0 1 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0","8  0 0 0 2 0 0 1 0 0 0 0 1 0 1 1 0 0 0 1 1 1 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0","8  0 0 0 2 0 0 1 0 0 0 0 2 0 1 0 0 0 0 2 1 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0","8  0 0 0 2 0 0 1 0 0 0 0 2 0 1 0 0 0 0 2 0 1 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0","8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 0 0 0","8  0 0 0 1 0 2 0 0 0 0 0 1 0 1 1 0 0 0 1 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0","8  0 0 0 1 0 2 0 0 0 0 0 2 0 1 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 0 0 0 2 1 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 0 0 0 0 2 1 0 0 2 0 0 1 0 0 0 0 0 0 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 2 0 1 0 0 0 0 0 2 1 0 0 2 0 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 1 0 0 0 2 0 0 1 0 0 0 0 0 0 0 1 0","8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 0 1 0 0 2 0 0 0 0 2 0 0 0 0 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 1 0 0 0 2 0 0 0 0 1 1 0 0 0 0 0 0","8  0 0 0 1 0 1 1 0 0 0 0 1 1 0 1 1 0 0 1 0 0 0 0 0 1 1 0 0 1 1 0 0 0 0 0 0","8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 1 0 1 0 0 1 1 0 0 0 0 0 0","8  0 0 0 1 1 0 0 1 0 0 0 1 1 0 1 0 0 0 2 1 0 0 0 0 2 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 1 0 0 1 0 0 0 1 2 0 0 0 0 0 1 1 1 0 0 0 2 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 1 0 1 0 0 0 0 1 1 0 1 0 0 0 2 1 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 1 0 1 0 0 0 0 1 2 0 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1 2 0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 2 0 0 1 0 0 0 0 1 1 1 0 0 0 1 1 0 1 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 1 1 1 0 0 0 1 0 1 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0","8  0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1 1 0 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0","8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 0 0 1 0 1 1 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0","8  0 0 0 1 1 0 0 1 0 0 0 0 1 1 1 0 0 0 1 2 0 0 2 0 0 0 0 0 0 0 0 0 1 0 0 0"];function p(r){const o=n(e)(),t=(Number(r.split("  ")[0])+2)/2,s=r.split("  ")[1].split(" ").map(Number);let l=0;for(let e=0;e<2*t-2;e+=1)o.add({group:"nodes",data:{id:`N-${e}`}});for(let e=0;e<2*t-2;e+=1)for(let r=e;r<2*t-2;r+=1){for(let t=0;t<s[l];t+=1)o.add({group:"edges",data:{source:o.nodes()[e].id(),target:o.nodes()[r].id(),id:`E-${e}-${r}-${t}`}});l+=1}return o}console.log("Creating files for trivalent graphs"),console.log("===================================");const h=[];let y=0,m=1;for(const e of u){const r=(Number(e.split("  ")[0])+2)/2;r!==m&&(y=0),m=r;const o={name:"cose",boundingBox:{x1:0,y1:0,x2:300,y2:300}},t={family:"Trivalent",name:`Trivalent ${r}<sub>${y}</sub>`,file:`trivalent_${r}_${y}`},n=p(e),s=a(n,o);s.then((()=>i(n,`./src/graph-gallery/${t.file}.data`))).catch((e=>{console.error(e)})),s.then((()=>l(n,`./src/graph-gallery/${t.file}.png`))).catch((e=>{console.error(e)})),h.push(t),y+=1}c(h);
//# sourceMappingURL=generate-graphs.js.map
