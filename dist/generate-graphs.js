var e=require("cytoscape"),t=require("fs/promises"),n=require("cytosnap"),o=require("fs"),r=require("mathjs");function s(e){return e&&e.__esModule?e.default:e}const l=s(n)();function a(e,n){l.start().then((()=>l.shot({elements:e.json().elements,layout:{name:"preset"},style:[{selector:"node",style:{"background-color":"red"}},{selector:"edge",style:{"line-color":"red","curve-style":"bezier"}}],resolvesTo:"base64uri",format:"png",width:640,height:480,background:"transparent"}))).then((e=>{const o=e.replace(/^data:image\/\w+;base64,/,""),r=Buffer.from(o,"base64");t.writeFile(n,r).then((()=>{console.log("Saved thumbnail "+n)})).catch((e=>{console.error(e)}))}))}function i(e,t){const n=e.layout(t);return n.run(),n.promiseOn("layoutstop")}var c=function(t){const n=t.kruskal((()=>1)).absoluteComplement().edges().map((e=>t.aStar({root:e.source(),goal:e.target(),weight:t=>e===t?Number.POSITIVE_INFINITY:1}).path.union(e))),o={cycle:s(e)().collection(),length:Number.POSITIVE_INFINITY},r=n.map((e=>({cycle:e,length:e.edges().size()}))).reduce(((e,t)=>e.length<t.length?e:t),o);return{path:r.cycle,value:r.length}};var u=function(e){const t=e.kruskal((()=>1));return t.absoluteComplement().edges().map((e=>t.aStar({root:e.source(),goal:e.target()}).path.union(e)))};var g=function(t){const n=t.floydWarshall({weight:()=>1}),o=t.nodes(),r=o.length;let l=s(e)().collection(),a=-1/0;for(let e=0;e<r;e+=1)for(let t=e;t<r;t+=1)n.distance(o[e],o[t])>a&&(a=n.distance(o[e],o[t]),l=n.path(o[e],o[t]).union([o[e],o[t]]));return{path:l,value:a}};var d=function(e,t={}){const n=t.indexing??function(e){const t=e.nodes(),n=new Map(t.map(((e,t)=>[e.id(),t])));return e=>{const t=n.get(e.id());if(void 0===t)throw new RangeError(`Unknown node: ${e.json()}`);return t}}(e),o=t.directed??!1,r=t.subgraph??!1,s=e.nodes(),l=s[0].cy(),a=r?l.nodes().size():s.size(),i=new Array(a).fill(null).map((()=>new Array(a).fill(0)));return e.edges().forEach((e=>{const t=e.source(),r=e.target();if(t.isNode()&&r.isNode()){const t=n(e.source()),r=n(e.target());i[t][r]+=1,o||(i[r][t]+=1)}})),i};function f(e){const t=e.elements().nodes().map((e=>e.degree(!0))).sort(((e,t)=>t-e));let n;if(e.nodes().size()>0){const t=d(e.elements());n=(0,r.det)(t)}return{numNodes:e.elements().nodes().size(),numEdges:e.elements().edges().size(),girth:c(e.elements()).value,degSequence:t,components:e.elements().components().length,circuitRank:u(e.elements()).length,diameter:g(e.elements()).value,detAdjacency:n}}function p(e,t){const n=e.json(),r=JSON.stringify(n,null,4);o.writeFile(t,r,{},(e=>{if(e)throw e;console.log(`Saved file ${t}`)}))}function h(e){!function(e){const t="src/graph-gallery/graphs-list.json";o.existsSync(t)||o.closeSync(o.openSync(t,"w"));const n=o.readFileSync(t);if(0===n.length)o.writeFileSync(t,JSON.stringify(e));else{const r=JSON.parse(n.toString());r.push(...e),o.writeFileSync(t,JSON.stringify(r))}}(e),function(e){const t=o.createWriteStream("src/graph-gallery/graphs-assets.ts",{flags:"a"});e.forEach((e=>{t.write(`export const ${e.file} = new URL('../graph-gallery/${e.file}.data', import.meta.url).href;`),t.write(`export const ${e.file}_Icon = new URL('../graph-gallery/${e.file}.png', import.meta.url).href;`)})),t.end()}(e)}function m(t){const n=s(e)();for(let e=0;e<t;e+=1){n.add({group:"nodes",data:{id:`N-${e}`}});for(let t=0;t<e;t+=1)n.add({group:"edges",data:{source:n.nodes()[t].id(),target:n.nodes()[e].id(),id:`E-${t}-${e}`}})}return n}console.log("Creating files for Complete graphs"),console.log("==================================");const y={name:"cose",boundingBox:{x1:0,y1:0,x2:300,y2:300}},$=[];for(let e=2;e<9;e+=1){const t=m(e),n={family:"Complete",name:`Complete of order ${e}`,file:`complete_${e}`,invariants:f(t)},o=i(t,y);o.then((()=>p(t,`./src/graph-gallery/${n.file}.data`))).catch((e=>{console.error(e)})),o.then((()=>a(t,`./src/graph-gallery/${n.file}.png`))).catch((e=>{console.error(e)})),$.push(n)}h($);const v=["2  1 1 1","2  0 3 0","4  1 0 0 1 1 0 1 1 1 0","4  0 0 1 2 1 0 1 1 0 0","4  0 0 2 1 1 0 1 0 1 0","4  0 0 2 1 0 1 2 0 0 0","4  0 1 1 1 0 1 1 0 1 0","6  0 0 0 0 2 1 1 0 0 1 0 1 0 0 1 1 0 1 0 0 0","6  1 0 0 0 1 0 1 0 0 1 0 1 0 0 1 1 0 1 0 1 0","6  0 0 0 1 1 1 0 0 0 2 1 1 0 0 1 1 0 0 0 0 0","6  0 0 0 2 1 0 0 0 0 2 1 1 0 0 1 0 0 1 0 0 0","6  0 0 0 1 1 1 1 0 0 1 0 1 0 0 1 1 0 0 0 1 0","6  0 0 0 1 0 2 0 0 0 2 1 1 0 1 0 1 0 0 0 0 0","6  0 0 0 2 0 1 0 0 0 2 1 1 0 1 0 0 0 1 0 0 0","6  0 0 0 2 0 1 1 0 0 1 0 1 0 1 0 0 0 1 0 1 0","6  0 0 0 2 1 0 0 0 1 0 2 0 0 2 1 0 0 0 0 0 0","6  0 0 0 1 1 1 0 0 2 0 1 0 0 2 1 0 0 0 0 0 0","6  0 0 0 1 1 1 1 0 1 0 0 0 0 2 1 0 0 1 0 0 0","6  0 0 0 1 1 1 1 0 1 0 0 1 0 1 0 0 0 1 0 1 0","6  0 0 0 1 1 1 0 0 1 1 1 1 0 1 0 0 0 1 0 0 0","6  0 0 0 1 1 1 0 0 1 1 1 0 1 1 1 0 0 0 0 0 0","6  0 0 1 0 1 1 0 0 2 0 1 0 0 2 0 0 0 1 0 0 0","6  0 0 1 1 0 1 0 0 1 1 1 0 0 2 0 0 0 1 0 0 0","6  0 0 1 1 1 0 0 0 1 1 1 0 0 1 1 0 0 1 0 0 0","8  0 0 0 0 0 2 1 0 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 1 0 0 1 0 0 1 0 0 0","8  0 0 0 0 0 1 2 0 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 0 1 1 0 0 1 0 0 0 0 0 0","8  0 0 0 0 0 2 0 1 1 0 0 0 1 0 0 0 0 0 0 2 1 1 0 0 1 0 1 0 0 1 0 0 0 0 0 0","8  1 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 2 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0","8  1 0 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 1 0 0 1 0 0 1 0 1 0","8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 1 0 0 0 1 0 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0","8  0 0 0 0 2 0 1 0 0 0 0 0 2 1 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 1 0 0 0","8  0 0 0 0 2 0 1 0 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 0 2 1 0 0 0 0 0 2 1 1 0 0 0 1 1 0 0 0 0 0 0 0 0 0","8  0 0 0 0 2 1 0 0 0 0 0 0 2 1 0 0 0 0 0 2 1 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 0 2 1 0 1 0 0 0 1 0 1 0 0 0 1 1 0 0 0 0 0 0 0 1 0","8  0 0 0 0 1 1 0 1 0 0 0 0 2 0 1 0 0 0 0 2 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0","8  0 0 0 0 2 1 0 0 0 0 0 0 2 0 1 0 0 0 0 2 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 1 0 0 0 1 0 0 0 0 0 0 2 1 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 0 0 1 0","8  0 0 0 0 2 1 0 0 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 0 0 1 0","8  0 0 0 0 1 1 0 1 1 0 0 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 1 0 1 0","8  0 0 0 0 1 0 0 2 0 0 0 0 1 2 0 0 0 0 2 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0","8  0 0 0 0 2 0 0 1 0 0 0 0 1 2 0 0 0 0 2 0 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 2 0 0 1 0 0 0 0 1 2 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 0 0 0 2 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0","8  0 0 0 0 1 0 1 1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 1 1 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 2 0 0 0 0 0 0 1 0","8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 0 0 0 1 1 1 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 1 2 0 0 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 0 0 1 0","8  0 0 0 0 1 2 0 0 0 0 0 1 0 2 0 0 0 0 1 1 1 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 2 1 0 0 0 0 0 1 0 2 0 0 0 0 2 0 1 0 0 0 1 2 0 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 0 0 0 2 0 1 0 0 0 2 1 0 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 1 0 2 0 0 0 0 2 0 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 1 0 0 1 0 0 0 0 0 2 1 0 0 0 0 0 0 1 0 0 0","8  0 0 0 0 2 1 0 0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 2 1 0 0 0 0 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 1 0 2 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0 1 0","8  0 0 0 0 1 2 0 0 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 2 0 1 0 0 0 0 1 1 1 0 0 2 0 1 0 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 1 0 1 1 0 0 0 2 1 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 2 0 1 0 0 0 0 1 1 1 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0","8  0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 0 1 1 1 1 0 1 0 0 0 0 1 0 0 0 1 0 0 0","8  1 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 1 1 0 0 1 1 1 0 0 1 0 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 0 0 0 1 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0","8  0 0 0 0 1 1 1 0 0 0 0 1 1 0 1 0 0 1 0 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0","8  0 0 0 1 0 0 1 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0","8  0 0 0 2 0 0 1 0 0 0 0 1 0 1 1 0 0 0 1 1 1 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0","8  0 0 0 2 0 0 1 0 0 0 0 2 0 1 0 0 0 0 2 1 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0","8  0 0 0 2 0 0 1 0 0 0 0 2 0 1 0 0 0 0 2 0 1 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0","8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 0 0 0","8  0 0 0 1 0 2 0 0 0 0 0 1 0 1 1 0 0 0 1 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0","8  0 0 0 1 0 2 0 0 0 0 0 2 0 1 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 0 0 0 2 1 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 0 0 0 0 2 1 0 0 2 0 0 1 0 0 0 0 0 0 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 2 0 1 0 0 0 0 0 2 1 0 0 2 0 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 1 0 0 0 2 0 0 1 0 0 0 0 0 0 0 1 0","8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 0 1 0 0 2 0 0 0 0 2 0 0 0 0 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 1 0 0 0 2 0 0 0 0 1 1 0 0 0 0 0 0","8  0 0 0 1 0 1 1 0 0 0 0 1 1 0 1 1 0 0 1 0 0 0 0 0 1 1 0 0 1 1 0 0 0 0 0 0","8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 1 0 1 0 0 1 1 0 0 0 0 0 0","8  0 0 0 1 1 0 0 1 0 0 0 1 1 0 1 0 0 0 2 1 0 0 0 0 2 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 1 0 0 1 0 0 0 1 2 0 0 0 0 0 1 1 1 0 0 0 2 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 1 0 1 0 0 0 0 1 1 0 1 0 0 0 2 1 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 1 0 1 0 0 0 0 1 2 0 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1 2 0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 2 0 0 1 0 0 0 0 1 1 1 0 0 0 1 1 0 1 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 1 1 1 0 0 0 1 0 1 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0","8  0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1 1 0 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0","8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 0 0 1 0 1 1 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0","8  0 0 0 1 1 0 0 1 0 0 0 0 1 1 1 0 0 0 1 2 0 0 2 0 0 0 0 0 0 0 0 0 1 0 0 0"];function w(t){const n=s(e)(),o=(Number(t.split("  ")[0])+2)/2,r=t.split("  ")[1].split(" ").map(Number);let l=0;for(let e=0;e<2*o-2;e+=1)n.add({group:"nodes",data:{id:`N-${e}`}});for(let e=0;e<2*o-2;e+=1)for(let t=e;t<2*o-2;t+=1){for(let o=0;o<r[l];o+=1)n.add({group:"edges",data:{source:n.nodes()[e].id(),target:n.nodes()[t].id(),id:`E-${e}-${t}-${o}`}});l+=1}return n}console.log("Creating files for trivalent graphs"),console.log("===================================");const b=[];let S=0,N=1;for(const e of v){const t=(Number(e.split("  ")[0])+2)/2;t!==N&&(S=0),N=t;const n={name:"cose",boundingBox:{x1:0,y1:0,x2:300,y2:300}},o=w(e),r={family:"Trivalent",name:`Trivalent ${t}<sub>${S}</sub>`,file:`trivalent_${t}_${S}`,invariants:f(o)},s=i(o,n);s.then((()=>p(o,`./src/graph-gallery/${r.file}.data`))).catch((e=>{console.error(e)})),s.then((()=>a(o,`./src/graph-gallery/${r.file}.png`))).catch((e=>{console.error(e)})),b.push(r),S+=1}h(b);
//# sourceMappingURL=generate-graphs.js.map
