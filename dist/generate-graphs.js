var e=require("cytosnap"),n=require("fs/promises"),t=require("cytoscape"),r=require("mathjs");function o(e){return e&&e.__esModule?e.default:e}const s=o(e)();async function a(e,t,r){const o=async function(e,n){const t=e.layout(n),r=t.promiseOn("layoutstop");return t.run(),r}(e,t),a=o.then((()=>async function(e,t){const r=e.json(),o=JSON.stringify(r,null,4);return n.writeFile(t,o).then((()=>{console.log(`Saved file ${t}`)})).catch((e=>{console.error(e)}))}(e,`./src/graph-gallery/data/${r.file}.data`))).catch((e=>{console.error(e)})),l=o.then((()=>async function(e,t){return s.start().then((()=>s.shot({elements:e.json().elements,layout:{name:"preset"},style:[{selector:"node",style:{"background-color":"red"}},{selector:"edge",style:{"line-color":"red","curve-style":"bezier"}}],resolvesTo:"base64uri",format:"png",width:640,height:480,background:"transparent"}))).then((async e=>{const r=e.replace(/^data:image\/\w+;base64,/,""),o=Buffer.from(r,"base64");return n.writeFile(t,o).then((()=>{console.log("Saved thumbnail "+t)})).catch((e=>{console.error(e)}))}))}(e,`./src/graph-gallery/data/${r.file}.png`))).catch((e=>{console.error(e)}));return Promise.all([a,l]).then((()=>r)).catch((e=>{console.error(e),console.log("The following graph could not be created:"),console.log(r)}))}async function l(e){return n.writeFile("src/graph-gallery/graphs-list.json",JSON.stringify(e))}async function c(e){const t=e.map((e=>`export const ${e.file} = new URL('../graph-gallery/data/${e.file}.data', import.meta.url).href;`.concat(`export const ${e.file}_Icon = new URL('../graph-gallery/data/${e.file}.png', import.meta.url).href;`)));return n.writeFile("src/graph-gallery/graphs-assets.ts",t)}var i=function(e){const n=e.kruskal((()=>1)).absoluteComplement().edges().map((n=>e.aStar({root:n.source(),goal:n.target(),weight:e=>n===e?Number.POSITIVE_INFINITY:1}).path.union(n))),r={cycle:o(t)().collection(),length:Number.POSITIVE_INFINITY},s=n.map((e=>({cycle:e,length:e.edges().size()}))).reduce(((e,n)=>e.length<n.length?e:n),r);return{path:s.cycle,value:s.length}};var u=function(e){const n=e.kruskal((()=>1));return n.absoluteComplement().edges().map((e=>n.aStar({root:e.source(),goal:e.target()}).path.union(e)))};var d=function(e){const n=e.floydWarshall({weight:()=>1}),r=e.nodes(),s=r.length;let a=o(t)().collection(),l=-1/0;for(let e=0;e<s;e+=1)for(let t=e;t<s;t+=1)n.distance(r[e],r[t])>l&&(l=n.distance(r[e],r[t]),a=n.path(r[e],r[t]).union([r[e],r[t]]));return{path:a,value:l}};var g=function(e,n={}){const t=n.indexing??function(e){const n=e.nodes(),t=new Map(n.map(((e,n)=>[e.id(),n])));return e=>{const n=t.get(e.id());if(void 0===n)throw new RangeError(`Unknown node: ${e.json()}`);return n}}(e),r=n.directed??!1,o=n.subgraph??!1,s=e.nodes(),a=s[0].cy(),l=o?a.nodes().size():s.size(),c=new Array(l).fill(null).map((()=>new Array(l).fill(0)));return e.edges().forEach((e=>{const n=e.source(),o=e.target();if(n.isNode()&&o.isNode()){const n=t(e.source()),o=t(e.target());c[n][o]+=1,r||(c[o][n]+=1)}})),c};function h(e){const n=o(t)(),r=e.length;for(let e=0;e<r;e+=1)n.add({group:"nodes",data:{id:`N-${e}`}});for(let t=0;t<r;t+=1)for(let o=t;o<r;o+=1)for(let r=0;r<e[t][o];r+=1)n.add({group:"edges",data:{source:n.nodes()[t].id(),target:n.nodes()[o].id(),id:`E-${t}-${o}-${r}`}});return n}function m(e){const n=e.elements().nodes().map((e=>e.degree(!0))).sort(((e,n)=>n-e));let t;if(e.nodes().size()>0){const n=g(e.elements());t=(0,r.det)(n)}return{numNodes:e.elements().nodes().size(),numEdges:e.elements().edges().size(),girth:i(e.elements()).value,degSequence:n,components:e.elements().components().length,circuitRank:u(e.elements()).length,diameter:d(e.elements()).value,detAdjacency:t}}function f(e){const n=o(t)();for(let t=0;t<e;t+=1){n.add({group:"nodes",data:{id:`N-${t}`}});for(let e=0;e<t;e+=1)n.add({group:"edges",data:{source:n.nodes()[e].id(),target:n.nodes()[t].id(),id:`E-${e}-${t}`}})}return n}console.log("Creating files for Complete graphs");const p={name:"circle",boundingBox:{x1:0,y1:0,x2:300,y2:300}};var y=async function(e){const n=[],t=[];for(let r=2;r<=e;r+=1){const e=f(r),o={family:"Complete",name_en:`Complete of order ${r}`,name_fr:`Complet d'ordre ${r}`,name_de:`VollstÃ¤ndiger der Ordnung ${r}`,file:`complete_${r}`,invariants:m(e)};n.push(o),t.push(a(e,p,o))}return Promise.allSettled(t).then((()=>n))};console.log("Creating files for trivalent graphs");const b=["2  1 1 1","2  0 3 0","4  1 0 0 1 1 0 1 1 1 0","4  0 0 1 2 1 0 1 1 0 0","4  0 0 2 1 1 0 1 0 1 0","4  0 0 2 1 0 1 2 0 0 0","4  0 1 1 1 0 1 1 0 1 0","6  0 0 0 0 2 1 1 0 0 1 0 1 0 0 1 1 0 1 0 0 0","6  1 0 0 0 1 0 1 0 0 1 0 1 0 0 1 1 0 1 0 1 0","6  0 0 0 1 1 1 0 0 0 2 1 1 0 0 1 1 0 0 0 0 0","6  0 0 0 2 1 0 0 0 0 2 1 1 0 0 1 0 0 1 0 0 0","6  0 0 0 1 1 1 1 0 0 1 0 1 0 0 1 1 0 0 0 1 0","6  0 0 0 1 0 2 0 0 0 2 1 1 0 1 0 1 0 0 0 0 0","6  0 0 0 2 0 1 0 0 0 2 1 1 0 1 0 0 0 1 0 0 0","6  0 0 0 2 0 1 1 0 0 1 0 1 0 1 0 0 0 1 0 1 0","6  0 0 0 2 1 0 0 0 1 0 2 0 0 2 1 0 0 0 0 0 0","6  0 0 0 1 1 1 0 0 2 0 1 0 0 2 1 0 0 0 0 0 0","6  0 0 0 1 1 1 1 0 1 0 0 0 0 2 1 0 0 1 0 0 0","6  0 0 0 1 1 1 1 0 1 0 0 1 0 1 0 0 0 1 0 1 0","6  0 0 0 1 1 1 0 0 1 1 1 1 0 1 0 0 0 1 0 0 0","6  0 0 0 1 1 1 0 0 1 1 1 0 1 1 1 0 0 0 0 0 0","6  0 0 1 0 1 1 0 0 2 0 1 0 0 2 0 0 0 1 0 0 0","6  0 0 1 1 0 1 0 0 1 1 1 0 0 2 0 0 0 1 0 0 0","6  0 0 1 1 1 0 0 0 1 1 1 0 0 1 1 0 0 1 0 0 0","8  0 0 0 0 0 2 1 0 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 1 0 0 1 0 0 1 0 0 0","8  0 0 0 0 0 1 2 0 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 0 1 1 0 0 1 0 0 0 0 0 0","8  0 0 0 0 0 2 0 1 1 0 0 0 1 0 0 0 0 0 0 2 1 1 0 0 1 0 1 0 0 1 0 0 0 0 0 0","8  1 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 2 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0","8  1 0 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 1 0 0 1 0 0 1 0 1 0","8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 1 0 0 0 1 0 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0","8  0 0 0 0 2 0 1 0 0 0 0 0 2 1 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 1 0 0 0","8  0 0 0 0 2 0 1 0 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 0 2 1 0 0 0 0 0 2 1 1 0 0 0 1 1 0 0 0 0 0 0 0 0 0","8  0 0 0 0 2 1 0 0 0 0 0 0 2 1 0 0 0 0 0 2 1 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 0 2 1 0 1 0 0 0 1 0 1 0 0 0 1 1 0 0 0 0 0 0 0 1 0","8  0 0 0 0 1 1 0 1 0 0 0 0 2 0 1 0 0 0 0 2 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0","8  0 0 0 0 2 1 0 0 0 0 0 0 2 0 1 0 0 0 0 2 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 1 0 0 0 1 0 0 0 0 0 0 2 1 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 0 0 1 0","8  0 0 0 0 2 1 0 0 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 0 0 1 0","8  0 0 0 0 1 1 0 1 1 0 0 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 1 0 1 0","8  0 0 0 0 1 0 0 2 0 0 0 0 1 2 0 0 0 0 2 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0","8  0 0 0 0 2 0 0 1 0 0 0 0 1 2 0 0 0 0 2 0 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 2 0 0 1 0 0 0 0 1 2 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 0 0 0 2 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0","8  0 0 0 0 1 0 1 1 1 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 1 1 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 2 0 0 0 0 0 0 1 0","8  0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 0 0 0 1 1 1 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 1 2 0 0 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 0 0 1 0","8  0 0 0 0 1 2 0 0 0 0 0 1 0 2 0 0 0 0 1 1 1 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 2 1 0 0 0 0 0 1 0 2 0 0 0 0 2 0 1 0 0 0 1 2 0 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 0 0 0 2 0 1 0 0 0 2 1 0 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 1 0 2 0 0 0 0 2 0 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 1 0 0 1 0 0 0 0 0 2 1 0 0 0 0 0 0 1 0 0 0","8  0 0 0 0 2 1 0 0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 2 1 0 0 0 0 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 1 0 2 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0 1 0","8  0 0 0 0 1 2 0 0 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 2 0 1 0 0 0 0 1 1 1 0 0 2 0 1 0 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 1 0 1 1 0 0 0 2 1 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 2 0 1 0 0 0 0 1 1 1 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0","8  0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 0 1 1 1 1 0 1 0 0 0 0 1 0 0 0 1 0 0 0","8  1 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 1 1 0 0 1 1 1 0 0 1 0 0 0 1 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 2 0 1 0 0 0 0 1 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0","8  0 0 0 0 1 1 0 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0","8  0 0 0 0 1 0 1 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0","8  0 0 0 0 1 1 1 0 0 0 0 1 1 0 1 0 0 1 0 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0","8  0 0 0 1 0 0 1 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0","8  0 0 0 2 0 0 1 0 0 0 0 1 0 1 1 0 0 0 1 1 1 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0","8  0 0 0 2 0 0 1 0 0 0 0 2 0 1 0 0 0 0 2 1 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0","8  0 0 0 2 0 0 1 0 0 0 0 2 0 1 0 0 0 0 2 0 1 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0","8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 0 0 0","8  0 0 0 1 0 2 0 0 0 0 0 1 0 1 1 0 0 0 1 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0","8  0 0 0 1 0 2 0 0 0 0 0 2 0 1 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 0 0 0 2 1 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 0 0 0 0 2 1 0 0 2 0 0 1 0 0 0 0 0 0 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 2 0 1 0 0 0 0 0 2 1 0 0 2 0 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 1 0 0 0 2 0 0 1 0 0 0 0 0 0 0 1 0","8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 0 1 0 0 2 0 0 0 0 2 0 0 0 0 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 1 0 0 0 2 0 0 0 0 1 1 0 0 0 0 0 0","8  0 0 0 1 0 1 1 0 0 0 0 1 1 0 1 1 0 0 1 0 0 0 0 0 1 1 0 0 1 1 0 0 0 0 0 0","8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 1 0 1 0 0 1 1 0 0 0 0 0 0","8  0 0 0 1 1 0 0 1 0 0 0 1 1 0 1 0 0 0 2 1 0 0 0 0 2 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 1 0 0 1 0 0 0 1 2 0 0 0 0 0 1 1 1 0 0 0 2 0 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 1 0 1 0 0 0 0 1 1 0 1 0 0 0 2 1 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 1 0 1 0 0 0 0 1 2 0 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1 2 0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0","8  0 0 0 2 0 0 1 0 0 0 0 1 1 1 0 0 0 1 1 0 1 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0","8  0 0 0 1 0 1 0 1 0 0 0 1 1 1 0 0 0 1 0 1 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0","8  0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1 1 0 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0","8  0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 0 0 1 0 1 1 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0","8  0 0 0 1 1 0 0 1 0 0 0 0 1 1 1 0 0 0 1 2 0 0 2 0 0 0 0 0 0 0 0 0 1 0 0 0"];function $(e){const n=o(t)(),r=(Number(e.split("  ")[0])+2)/2,s=e.split("  ")[1].split(" ").map(Number);let a=0;for(let e=0;e<2*r-2;e+=1)n.add({group:"nodes",data:{id:`N-${e}`}});for(let e=0;e<2*r-2;e+=1)for(let t=e;t<2*r-2;t+=1){for(let r=0;r<s[a];r+=1)n.add({group:"edges",data:{source:n.nodes()[e].id(),target:n.nodes()[t].id(),id:`E-${e}-${t}-${r}`}});a+=1}return n}const x={name:"cose",boundingBox:{x1:0,y1:0,x2:300,y2:300}};var _=async function(){const e=[],n=[];let t=0,r=1;for(const o of b){const s=(Number(o.split("  ")[0])+2)/2;s!==r&&(t=0),r=s;const l=$(o),c={family:"Trivalent",name_en:`Trivalent ${s}<sub>${t}</sub>`,name_fr:`Graphe cubique ${s}<sub>${t}</sub>`,name_de:`Kubischer Graph ${s}<sub>${t}</sub>`,file:`trivalent_${s}_${t}`,invariants:m(l)};e.push(c),n.push(a(l,x,c)),t+=1}return Promise.allSettled(n).then((()=>e))};console.log("Creating files for More graphs");const v=[];{const e=h([[0,1,0,2],[1,0,1,1],[0,1,0,2],[2,1,2,0]]),n={name:"circle",boundingBox:{x1:0,y1:0,x2:300,y2:300}},t={family:"Special",name_en:"KÃ¶nigsberg",name_fr:"KÃ¶nigsberg",name_de:"KÃ¶nigsberg",file:"konigsberg",invariants:m(e)};v.push({cy:e,layout:n,id:t})}{const e=h([[0,1,1,0,1,0,0,0],[1,0,0,1,0,1,0,0],[1,0,0,1,0,0,1,0],[0,1,1,0,0,0,0,1],[1,0,0,0,0,1,1,0],[0,1,0,0,1,0,0,1],[0,0,1,0,1,0,0,1],[0,0,0,1,0,1,1,0]]),n={name:"cose",boundingBox:{x1:0,y1:0,x2:300,y2:300}},t={family:"Platonic",name_en:"Cube",name_fr:"Cube",name_de:"WÃ¼rfel",file:"cube",invariants:m(e)};v.push({cy:e,layout:n,id:t})}{const e=h([[0,1,1,0,1,1],[1,0,1,1,0,1],[1,1,0,1,1,0],[0,1,1,0,1,1],[1,0,1,1,0,1],[1,1,0,1,1,0]]),n={name:"circle",boundingBox:{x1:0,y1:0,x2:300,y2:300}},t={family:"Platonic",name_en:"Octahedron",name_fr:"OctaÃ¨dre",name_de:"Oktaeder",file:"octahedron",invariants:m(e)};v.push({cy:e,layout:n,id:t})}{const e=h([[0,1,1,1,1,0,0],[1,0,0,1,0,1,0],[1,0,0,0,1,0,1],[1,1,0,0,0,1,0],[1,0,1,0,0,0,1],[0,1,0,1,0,0,1],[0,0,1,0,1,1,0]]);e.nodes().positions(((e,n)=>{const t=250,r=Math.PI/180*45,o=Math.PI/180*20,s=t/(2*Math.cos(r)*Math.cos(o));switch(n+1){case 1:return{x:150,y:10};case 2:return{x:150-s*Math.sin(r+o),y:10+s*Math.cos(r+o)};case 3:return{x:150+s*Math.sin(r+o),y:10+s*Math.cos(r+o)};case 4:return{x:150-s*Math.sin(r-o),y:10+s*Math.cos(r-o)};case 5:return{x:150+s*Math.sin(r-o),y:10+s*Math.cos(r-o)};case 6:return{x:150-t*Math.tan(r),y:260};case 7:return{x:150+t*Math.tan(r),y:260};default:return{x:0,y:0}}}));const n={name:"preset",boundingBox:{x1:0,y1:0,x2:300,y2:300}},t={family:"Other",name_en:"Moser spindle",name_fr:"Graphe de Moser",name_de:"Moser-Spindel",file:"moser_spindle",invariants:m(e)};v.push({cy:e,layout:n,id:t})}var M=async function(){const e=v.map((e=>e.id)),n=v.map((e=>a(e.cy,e.layout,e.id)));return Promise.allSettled(n).then((()=>e))};console.log("Creating files for More graphs 2");const w=[];w[0]=[[0,1,0],[1,0,0],[0,0,0]],w[1]=[[0,0,1],[0,0,1],[1,1,0]],w[2]=[[0,1,1],[1,0,1],[1,1,0]],w[3]=[[0,0,0],[0,0,0],[0,0,0]],w[4]=[[0,0,1,1],[0,0,1,0],[1,1,0,0],[1,0,0,0]],w[5]=[[0,1,1,0],[1,0,0,1],[1,0,0,1],[0,1,1,0]],w[6]=[[0,1,0,0],[1,0,0,0],[0,0,0,1],[0,0,1,0]],w[7]=[[0,1,1,0],[1,0,0,0],[1,0,0,0],[0,0,0,0]],w[8]=[[0,1,1,0],[1,0,1,1],[1,1,0,1],[0,1,1,0]],w[9]=[[0,0,1,1,1],[0,0,0,1,1],[1,0,0,1,1],[1,1,1,0,0],[1,1,1,0,0]],w[10]=[[0,1,0,0,1],[1,0,1,1,0],[0,1,0,1,1],[0,1,1,0,0],[1,0,1,0,0]],w[11]=[[0,1,0,1,0],[1,0,0,0,0],[0,0,0,1,1],[1,0,1,0,0],[0,0,1,0,0]],w[12]=[[0,1,0,1,0],[1,0,1,1,1],[0,1,0,1,0],[1,1,1,0,1],[0,1,0,1,0]],w[13]=[[0,1,0,0,0],[1,0,0,0,0],[0,0,0,1,1],[0,0,1,0,1],[0,0,1,1,0]],w[14]=[[0,1,1,1,1],[1,0,1,0,1],[1,1,0,0,1],[1,0,0,0,0],[1,1,1,0,0]],w[15]=[[0,0,0,1,0],[0,0,1,1,1],[0,1,0,1,1],[1,1,1,0,0],[0,1,1,0,0]],w[16]=[[0,0,1,1,0],[0,0,1,0,0],[1,1,0,1,1],[1,0,1,0,1],[0,0,1,1,0]],w[17]=[[0,1,1,1,1],[1,0,1,1,1],[1,1,0,1,1],[1,1,1,0,0],[1,1,1,0,0]],w[18]=[[0,1,1,1,1],[1,0,1,1,1],[1,1,0,0,0],[1,1,0,0,1],[1,1,0,1,0]],w[19]=[[0,1,1,1,1],[1,0,0,0,1],[1,0,0,1,0],[1,0,1,0,1],[1,1,0,1,0]],w[20]=[[0,0,1,0,0],[0,0,1,1,0],[1,1,0,1,1],[0,1,1,0,0],[0,0,1,0,0]],w[21]=[[0,0,1,1,0],[0,0,0,0,0],[1,0,0,1,1],[1,0,1,0,0],[0,0,1,0,0]],w[22]=[[0,0,1,1,0],[0,0,0,1,1],[1,0,0,0,1],[1,1,0,0,0],[0,1,1,0,0]],w[23]=[[0,0,1,0,0,0],[0,0,1,1,0,0],[1,1,0,1,0,0],[0,1,1,0,1,1],[0,0,0,1,0,0],[0,0,0,1,0,0]],w[24]=[[0,1,1,0,1,1],[1,0,0,1,0,0],[1,0,0,1,0,1],[0,1,1,0,1,1],[1,0,0,1,0,0],[1,0,1,1,0,0]],w[25]=[[0,1,1,1,1,1],[1,0,1,1,0,1],[1,1,0,1,0,0],[1,1,1,0,1,0],[1,0,0,1,0,1],[1,1,0,0,1,0]],w[26]=[[0,1,0,1,0,1],[1,0,0,0,1,1],[0,0,0,1,0,1],[1,0,1,0,1,1],[0,1,0,1,0,1],[1,1,1,1,1,0]],w[27]=[[0,0,0,0,0,1],[0,0,0,1,1,0],[0,0,0,1,1,0],[0,1,1,0,0,1],[0,1,1,0,0,1],[1,0,0,1,1,0]],w[28]=[[0,1,1,1,0,0],[1,0,1,0,0,1],[1,1,0,1,1,0],[1,0,1,0,1,1],[0,0,1,1,0,1],[0,1,0,1,1,0]],w[29]=[[0,1,0,0,1,0],[1,0,0,1,1,0],[0,0,0,0,0,1],[0,1,0,0,0,1],[1,1,0,0,0,0],[0,0,1,1,0,0]],w[30]=[[0,1,1,1,1,1],[1,0,0,1,1,1],[1,0,0,0,0,1],[1,1,0,0,0,1],[1,1,0,0,0,1],[1,1,1,1,1,0]],w[31]=[[0,0,1,1,0,0],[0,0,1,1,0,1],[1,1,0,1,1,0],[1,1,1,0,0,1],[0,0,1,0,0,1],[0,1,0,1,1,0]],w[32]=[[0,0,0,1,1,1],[0,0,1,0,1,0],[0,1,0,0,0,0],[1,0,0,0,1,1],[1,1,0,1,0,0],[1,0,0,1,0,0]],w[33]=[[0,1,1,1,0,1],[1,0,1,1,0,0],[1,1,0,0,1,1],[1,1,0,0,0,1],[0,0,1,0,0,1],[1,0,1,1,1,0]],w[34]=[[0,0,0,1,0,0],[0,0,1,1,1,1],[0,1,0,0,1,0],[1,1,0,0,1,1],[0,1,1,1,0,0],[0,1,0,1,0,0]],w[35]=[[0,0,1,0,0,1],[0,0,1,1,0,1],[1,1,0,1,0,1],[0,1,1,0,1,1],[0,0,0,1,0,0],[1,1,1,1,0,0]],w[36]=[[0,1,0,0,0,1],[1,0,0,0,1,0],[0,0,0,1,1,0],[0,0,1,0,1,1],[0,1,1,1,0,1],[1,0,0,1,1,0]],w[37]=[[0,1,1,0,1,0],[1,0,0,1,0,1],[1,0,0,0,0,1],[0,1,0,0,1,1],[1,0,0,1,0,0],[0,1,1,1,0,0]],w[38]=[[0,0,0,1,0,0],[0,0,1,1,0,0],[0,1,0,0,1,1],[1,1,0,0,0,1],[0,0,1,0,0,0],[0,0,1,1,0,0]],w[39]=[[0,1,0,1,1,1],[1,0,0,0,0,1],[0,0,0,0,0,0],[1,0,0,0,0,0],[1,0,0,0,0,1],[1,1,0,0,1,0]],w[40]=[[0,1,1,1,1,1],[1,0,1,0,0,1],[1,1,0,1,1,1],[1,0,1,0,1,1],[1,0,1,1,0,1],[1,1,1,1,1,0]],w[41]=[[0,1,1,0,1,0],[1,0,1,1,0,0],[1,1,0,1,0,0],[0,1,1,0,1,1],[1,0,0,1,0,0],[0,0,0,1,0,0]],w[42]=[[0,1,0,1,0,1],[1,0,0,0,0,1],[0,0,0,0,0,1],[1,0,0,0,0,1],[0,0,0,0,0,1],[1,1,1,1,1,0]],w[43]=[[0,1,0,0,1,1],[1,0,1,1,0,1],[0,1,0,0,1,1],[0,1,0,0,1,1],[1,0,1,1,0,0],[1,1,1,1,0,0]],w[44]=[[0,1,1,1,0,1],[1,0,1,0,0,1],[1,1,0,1,1,0],[1,0,1,0,0,1],[0,0,1,0,0,0],[1,1,0,1,0,0]],w[45]=[[0,1,1,0,0,0],[1,0,0,1,0,0],[1,0,0,0,0,1],[0,1,0,0,1,1],[0,0,0,1,0,0],[0,0,1,1,0,0]],w[46]=[[0,0,1,1,0,1,1],[0,0,1,1,1,1,0],[1,1,0,1,0,1,1],[1,1,1,0,1,1,0],[0,1,0,1,0,1,1],[1,1,1,1,1,0,1],[1,0,1,0,1,1,0]],w[47]=[[0,1,0,1,0,1,1],[1,0,1,1,1,1,1],[0,1,0,0,1,1,1],[1,1,0,0,0,0,1],[0,1,1,0,0,1,1],[1,1,1,0,1,0,1],[1,1,1,1,1,1,0]],w[48]=[[0,1,1,1,1,0,0],[1,0,0,0,0,1,0],[1,0,0,1,1,0,0],[1,0,1,0,0,1,1],[1,0,1,0,0,1,1],[0,1,0,1,1,0,1],[0,0,0,1,1,1,0]],w[49]=[[0,1,1,1,1,0,0],[1,0,1,0,1,0,1],[1,1,0,1,1,1,1],[1,0,1,0,1,1,1],[1,1,1,1,0,1,1],[0,0,1,1,1,0,1],[0,1,1,1,1,1,0]],w[50]=[[0,0,1,1,1,1,0],[0,0,1,1,0,0,0],[1,1,0,0,1,0,0],[1,1,0,0,1,1,1],[1,0,1,1,0,1,1],[1,0,0,1,1,0,1],[0,0,0,1,1,1,0]],w[51]=[[0,1,1,0,1,1,1],[1,0,0,0,0,0,1],[1,0,0,1,0,1,1],[0,0,1,0,1,1,0],[1,0,0,1,0,1,0],[1,0,1,1,1,0,1],[1,1,1,0,0,1,0]],w[52]=[[0,0,1,0,0,0,1],[0,0,1,0,0,1,0],[1,1,0,0,1,0,1],[0,0,0,0,0,1,1],[0,0,1,0,0,1,0],[0,1,0,1,1,0,0],[1,0,1,1,0,0,0]],w[53]=[[0,1,1,1,0,1,0],[1,0,0,1,1,1,1],[1,0,0,0,1,1,1],[1,1,0,0,0,1,0],[0,1,1,0,0,1,1],[1,1,1,1,1,0,1],[0,1,1,0,1,1,0]],w[54]=[[0,1,1,1,1,0,1],[1,0,0,1,1,1,1],[1,0,0,0,1,0,1],[1,1,0,0,0,0,1],[1,1,1,0,0,0,0],[0,1,0,0,0,0,1],[1,1,1,1,0,1,0]],w[55]=[[0,0,1,0,1,0,1,0],[0,0,0,0,0,1,1,1],[1,0,0,1,1,1,1,0],[0,0,1,0,1,0,1,1],[1,0,1,1,0,1,1,1],[0,1,1,0,1,0,1,0],[1,1,1,1,1,1,0,1],[0,1,0,1,1,0,1,0]],w[56]=[[0,1,0,1,0,1,1,1],[1,0,1,1,1,1,1,1],[0,1,0,0,1,1,1,1],[1,1,0,0,0,1,1,0],[0,1,1,0,0,1,1,1],[1,1,1,1,1,0,1,1],[1,1,1,1,1,1,0,1],[1,1,1,0,1,1,1,0]],w[57]=[[0,0,1,0,0,0,0,1],[0,0,1,0,0,1,1,1],[1,1,0,0,0,1,1,1],[0,0,0,0,1,0,1,1],[0,0,0,1,0,1,1,0],[0,1,1,0,1,0,1,1],[0,1,1,1,1,1,0,1],[1,1,1,1,0,1,1,0]],w[58]=[[0,1,1,0,0,1,0,0],[1,0,1,1,1,1,1,1],[1,1,0,0,1,1,1,0],[0,1,0,0,1,1,1,1],[0,1,1,1,0,0,0,1],[1,1,1,1,0,0,0,1],[0,1,1,1,0,0,0,1],[0,1,0,1,1,1,1,0]],w[59]=[[0,1,1,1,0,0,1,1],[1,0,0,1,0,0,1,1],[1,0,0,0,1,1,0,1],[1,1,0,0,1,1,1,1],[0,0,1,1,0,1,0,1],[0,0,1,1,1,0,1,1],[1,1,0,1,0,1,0,1],[1,1,1,1,1,1,1,0]],w[60]=[[0,1,1,1,0,0,1,1],[1,0,1,1,0,1,1,1],[1,1,0,1,1,0,0,0],[1,1,1,0,1,0,1,1],[0,0,1,1,0,1,1,0],[0,1,0,0,1,0,0,1],[1,1,0,1,1,0,0,0],[1,1,0,1,0,1,0,0]],w[61]=[[0,0,1,1,1,1,1,1],[0,0,1,1,0,0,1,0],[1,1,0,1,0,0,1,1],[1,1,1,0,1,0,1,1],[1,0,0,1,0,1,0,1],[1,0,0,0,1,0,1,1],[1,1,1,1,0,1,0,1],[1,0,1,1,1,1,1,0]],w[62]=[[0,1,0,1,0,1,1,0],[1,0,1,1,1,1,1,0],[0,1,0,1,1,1,0,1],[1,1,1,0,0,0,0,1],[0,1,1,0,0,1,1,1],[1,1,1,0,1,0,0,1],[1,1,0,0,1,0,0,1],[0,0,1,1,1,1,1,0]],w[63]=[[0,1,1,0,0,0,1,0],[1,0,0,1,1,1,1,1],[1,0,0,1,1,0,0,0],[0,1,1,0,1,0,0,1],[0,1,1,1,0,0,1,1],[0,1,0,0,0,0,1,0],[1,1,0,0,1,1,0,0],[0,1,0,1,1,0,0,0]],w[64]=[[0,1,0,1,1,0,1,1],[1,0,1,1,0,0,1,1],[0,1,0,1,1,1,1,1],[1,1,1,0,1,0,1,0],[1,0,1,1,0,0,0,1],[0,0,1,0,0,0,1,1],[1,1,1,1,0,1,0,1],[1,1,1,0,1,1,1,0]];const N={name:"cose",boundingBox:{x1:0,y1:0,x2:300,y2:300}};var S=async function(){const e=[],n=[];for(let t=0;t<w.length;t+=1){const r=h(w[t]),o={family:"Samples",name_en:`Graph G<sub>${t}</sub>`,name_fr:`Graphe G<sub>${t}</sub>`,name_de:`Graph G<sub>${t}</sub>`,file:`G_${t}`,invariants:m(r)};e.push(o),n.push(a(r,N,o))}return Promise.allSettled(n).then((()=>e))};process.setMaxListeners(0),Promise.all([y(8),_(),M(),S()]).then((e=>{const n=e.flat();return Promise.all([l(n),c(n)])})).then((()=>{console.log("All graphs generated."),process.exit()})).catch((e=>{console.error(e)}));
//# sourceMappingURL=generate-graphs.js.map
