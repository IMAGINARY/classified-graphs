{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/runtime-0ad42dc475b883db.js","src/ts/main-identify.ts","src/ts/modes/ModeLoadRandom.ts","src/ts/modes/ModeIsoCheck.ts","node_modules/@parcel/runtime-js/lib/helpers/get-worker-url.js","node_modules/@parcel/runtime-js/lib/runtime-3d8f90b5e52e37fb.js"],"sourcesContent":["require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"bTNK7\\\":\\\"identify.06c3021e.js\\\",\\\"7xBTE\\\":\\\"sgiso_worker.b7491b5b.js\\\",\\\"7nvGH\\\":\\\"index.ec11e906.js\\\"}\"));","// import assert from 'assert';\nimport cytoscape from 'cytoscape';\nimport ready from 'document-ready';\nimport * as d3 from 'd3-selection';\nimport i18next from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport locI18next from 'loc-i18next';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport './side-effects';\n\nimport { cyOptions, i18nextOptions, langList } from './constants';\n\nimport { Mode, Parameters } from './modes/modes';\n\n// import { parameters, toolbarModes, infoboxModes } from './modesList';\nimport ModeNull from './modes/ModeNull';\nimport ModeNode from './modes/ModeNode';\nimport ModeEdge from './modes/ModeEdge';\n// import ModeDijkstra from './modes/ModeDijkstra';\n// import ModeGirth from './modes/ModeGirth';\n// import ModeNumNodes from './modes/ModeNumNodes';\n// import ModeNumEdges from './modes/ModeNumEdges'; // ModeNumEdges -> ES Module\n// import ModeDegSequence from './modes/ModeDegSequence';\n// import ModeComponents from './modes/ModeComponents';\n// import ModeCircuitRank from './modes/ModeCircuitRank';\n// import ModeDiameter from './modes/ModeDiameter';\nimport ModeExport from './modes/ModeExport';\nimport ModeImport from './modes/ModeImport';\nimport ModeLoad from './modes/ModeLoad';\nimport ModeLoadRandom from './modes/ModeLoadRandom';\n// import ModeLayout from './modes/ModeLayout';\nimport ModeClear from './modes/ModeClear';\n// import ModeDetAdjacency from './modes/ModeDetAdjacency';\n// import ModeAdjacencyMatrix from './modes/ModeAdjacencyMatrix';\n\nimport * as assets from './assets';\nimport ModeIsoCheck from './modes/ModeIsoCheck';\n\nconst cy1 = cytoscape({\n  ...cloneDeep(cyOptions),\n  ...{ container: document.getElementById('cy1') },\n});\n\nconst cy2 = cytoscape({\n  ...cloneDeep(cyOptions),\n  ...{ container: document.getElementById('cy2') },\n});\n\nconst parameters2: Parameters = {\n  idNodeCount: 1,\n  idEdgeCount: 1,\n  outputContainer: document.getElementById('output') as HTMLElement,\n  nodeIndex: [],\n};\n\nconst parameters1: Parameters = {\n  idNodeCount: 1,\n  idEdgeCount: 1,\n  outputContainer: document.getElementById('output') as HTMLElement,\n  nodeIndex: [],\n  isoTarget: cy2,\n  isoTargetParams: parameters2,\n};\n\ntype ModeConfig = {\n  modeName: string;\n  textKey: string;\n  icon?: string;\n  modeObj: Mode;\n};\n\nconst toolbarModes: ModeConfig[] = [\n  {\n    modeName: 'modeClear',\n    textKey: 'Clear',\n    icon: assets.iconClear,\n    modeObj: new ModeClear(cy1, parameters1),\n  },\n  {\n    modeName: 'modeExport',\n    textKey: 'Export',\n    icon: assets.iconExport,\n    modeObj: new ModeExport(cy1, parameters1),\n  },\n  {\n    modeName: 'modeImport',\n    textKey: 'Import',\n    icon: assets.iconImport,\n    modeObj: new ModeImport(cy1, parameters1),\n  },\n  {\n    modeName: 'modeLoad',\n    textKey: 'Load',\n    icon: assets.iconLoad,\n    modeObj: new ModeLoad(cy1, parameters1),\n  },\n  {\n    modeName: 'modeNull',\n    textKey: 'Pointer',\n    icon: assets.iconPointer,\n    modeObj: new ModeNull(cy1, parameters1),\n  },\n  {\n    modeName: 'modeNode',\n    textKey: 'Nodes',\n    icon: assets.iconNode,\n    modeObj: new ModeNode(cy1, parameters1),\n  },\n  {\n    modeName: 'modeEdge',\n    textKey: 'Edges',\n    icon: assets.iconEdge,\n    modeObj: new ModeEdge(cy1, parameters1),\n  },\n  {\n    modeName: 'modeLoadRandom',\n    textKey: 'Target',\n    icon: assets.iconQuestion,\n    modeObj: new ModeLoadRandom(cy2, parameters2),\n  },\n  {\n    modeName: 'modeIsoCheck',\n    textKey: 'Check',\n    icon: assets.iconCheck,\n    modeObj: new ModeIsoCheck(cy1, parameters1),\n  },\n  // {\n  //   modeName: 'modeClear',\n  //   textKey: 'Clear',\n  //   icon: assets.iconClear,\n  //   modeObj: new ModeClear(cy2, parameters2),\n  // },\n  // {\n  //   modeName: 'modeExport',\n  //   textKey: 'Export',\n  //   icon: assets.iconExport,\n  //   modeObj: new ModeExport(cy2, parameters2),\n  // },\n  // {\n  //   modeName: 'modeImport',\n  //   textKey: 'Import',\n  //   icon: assets.iconImport,\n  //   modeObj: new ModeImport(cy2, parameters2),\n  // },\n  // // {\n  // //   modeName: 'modeLoad',\n  // //   textKey: 'Load',\n  // //   icon: assets.iconLoad,\n  // //   modeObj: new ModeLoad(cy2, parameters2),\n  // // },\n  // {\n  //   modeName: 'modeNull',\n  //   textKey: 'Pointer',\n  //   icon: assets.iconPointer,\n  //   modeObj: new ModeNull(cy2, parameters2),\n  // },\n  // {\n  //   modeName: 'modeNode',\n  //   textKey: 'Nodes',\n  //   icon: assets.iconNode,\n  //   modeObj: new ModeNode(cy2, parameters2),\n  // },\n  // {\n  //   modeName: 'modeEdge',\n  //   textKey: 'Edges',\n  //   icon: assets.iconEdge,\n  //   modeObj: new ModeEdge(cy2, parameters2),\n  // },\n];\n\n// const infoboxModes: ModeConfig[] = [\n//   {\n//     modeName: 'modeNumNodes',\n//     textKey: 'Order',\n//     modeObj: new ModeNumNodes(cy, parameters),\n//   },\n//   {\n//     modeName: 'modeNumEdges',\n//     textKey: 'Size',\n//     modeObj: new ModeNumEdges(cy, parameters),\n//   },\n//   {\n//     modeName: 'modeGirth',\n//     textKey: 'Girth',\n//     modeObj: new ModeGirth(cy, parameters),\n//   },\n//   {\n//     modeName: 'modeDegSequence',\n//     textKey: 'Degree_sequence',\n//     modeObj: new ModeDegSequence(cy, parameters),\n//   },\n//   {\n//     modeName: 'modeCompponents',\n//     textKey: 'Connected_components',\n//     modeObj: new ModeComponents(cy, parameters),\n//   },\n//   {\n//     modeName: 'modeCircuitRank',\n//     textKey: 'Circuit_rank',\n//     modeObj: new ModeCircuitRank(cy, parameters),\n//   },\n//   {\n//     modeName: 'modeDiameter',\n//     textKey: 'Diameter',\n//     modeObj: new ModeDiameter(cy, parameters),\n//   },\n//   {\n//     modeName: 'modeDetAdjacency',\n//     textKey: 'Adjacency_det',\n//     modeObj: new ModeDetAdjacency(cy, parameters),\n//   },\n//   {\n//     modeName: 'modeAdjacencyMatrix',\n//     textKey: 'Adjacency_matrix',\n//     modeObj: new ModeAdjacencyMatrix(cy, parameters),\n//   },\n// ];\n\n// eslint-disable-next-line no-void\nvoid i18next.use(LanguageDetector).init(i18nextOptions);\nconst localize = locI18next.init(i18next);\n\n/**\n * Specify types of global variables that are not yet defined on 'window'.\n * Technically, this declaration is not correct, because the variables are\n * only defined in main, but not before it is executed. The correct way would be\n * ```\n * declare global {\n *   interface Window {\n *     cy: cytoscape.Core | undefined;\n *     d3: typeof d3 | undefined;\n *   }\n * }\n * ```\n * But then you would need to check for 'undefined' everywhere in your code\n * where the global variables are used, which is quite cumbersome for debugging.\n *\n * A cleaner way would to do it would be to define a method on window that returns\n * a promise that resolves with cy after main is executed.\n * Similar to navigator.requestMIDIAccess().\n */\ndeclare global {\n  interface Window {\n    cy1: cytoscape.Core;\n    cy2: cytoscape.Core;\n    parameters1: Parameters;\n    parameters2: Parameters;\n    d3: typeof d3;\n    findIso: (a: void) => void;\n  }\n}\nwindow.d3 = d3;\nwindow.parameters1 = parameters1;\nwindow.parameters2 = parameters2;\n\nfunction main() {\n  // After this, window.cy is shadowing the function-local cy.\n  // This is because the globalThis pointer refers to 'window' in the browser environment.\n  // Both have no type assigned on the window object.\n  // Same for the global vs. local d3 object.\n  window.cy1 = cy1;\n  window.cy2 = cy2;\n\n  // d3.select('#output').html(i18next.t('Connected_components')); // test\n\n  const modeNull1 = new ModeNull(cy1, parameters1);\n  let primaryMode1: Mode = modeNull1;\n  // let secondaryMode: Mode = infoboxModes[0].modeObj;\n\n  primaryMode1.activate();\n  // secondaryMode.activate();\n\n  function switchPrimaryMode1(newMode: Mode) {\n    primaryMode1.deactivate();\n    primaryMode1 = newMode;\n    primaryMode1.activate();\n  }\n\n  // function switchSecondaryMode(newMode: Mode) {\n  //   secondaryMode.deactivate();\n  //   secondaryMode = newMode;\n  //   secondaryMode.activate();\n  // }\n\n  // Make Language Selector\n  d3.select('#langSelector')\n    .select('.dropdown-menu')\n    .selectAll('li')\n    .data(langList)\n    .enter()\n    .append('li')\n    .append('a')\n    .classed('dropdown-item', true)\n    .attr('href', '#')\n    .on('click', (ev, d) => {\n      i18next\n        .changeLanguage(d.isoCode)\n        .then(() => localize('.translate'))\n        .catch((reason) => {\n          // TODO: Handle the error properly instead of ignoring it.\n          // eslint-disable-next-line no-console\n          console.error(`Changing to language ${d.isoCode} failed.`, reason);\n        });\n    })\n    .text((d) => d.endonym);\n\n  // Make toolbar buttons\n  const buttons = d3\n    .select('#toolbar')\n    .selectAll('button')\n    .data(toolbarModes)\n    .enter()\n    .append('button')\n    .classed('toolbar-button', true)\n    .attr('id', (d) => `btn-${d.modeName}`);\n\n  buttons\n    .append('img')\n    .attr('src', (d) => (d.icon ? d.icon : assets.iconDijkstra));\n\n  d3.select('#btn-modeLayout')\n    .append('select')\n    .attr('id', 'selectLayout')\n    .selectAll('option')\n    .data([\n      { value: 'circle', textKey: 'Circle' },\n      { value: 'random', textKey: 'Random' },\n    ])\n    .enter()\n    .append('option')\n    .attr('value', (d) => d.value)\n    // .classed('translate', true)\n    // .attr('data-i18n', (d) => d.textKey);\n    .html((d) => d.textKey);\n\n  buttons\n    .append('div')\n    .classed('translate', true)\n    .attr('data-i18n', (d) => d.textKey);\n  // .html((d) => i18next.t(d.textKey));\n\n  buttons.on('click', (ev, d) => {\n    switchPrimaryMode1(d.modeObj);\n  });\n\n  // Make Load modal\n  d3.select('#btn-modeLoad')\n    .attr('data-bs-toggle', 'modal')\n    .attr('data-bs-target', '#exampleModal');\n\n  // Make infobox items\n  // function updateInfo() {\n  //   const infoboxItems = d3\n  //     .select('#infobox')\n  //     .selectAll<HTMLDivElement, unknown>('div.infoItem')\n  //     .data(infoboxModes);\n\n  //   const newItems = infoboxItems\n  //     .enter()\n  //     .append('div')\n  //     .attr('id', (d) => `infoItem-${d.modeName}`)\n  //     .classed('infoItem', true);\n\n  //   newItems // Info icon\n  //     .append('img')\n  //     .attr('src', assets.iconInfo)\n  //     .attr('data-bs-toggle', 'collapse')\n  //     .attr('data-bs-target', (d) => `#infoItem-text-${d.modeName}`)\n  //     .on('click', (ev: Event) => {\n  //       ev.stopPropagation();\n  //     });\n\n  //   newItems.append('div').classed('outputText', true); // container for text\n\n  //   newItems // Tip text\n  //     .append('div')\n  //     .attr('id', (d) => `infoItem-text-${d.modeName}`)\n  //     .attr('data-bs-parent', '#infobox')\n  //     .attr('data-bs-toggle', 'collapse')\n  //     .classed('tipText', true)\n  //     .classed('collapse', true)\n  //     .classed('translate', true)\n  //     .attr('data-i18n', (d) => `[html]${d.textKey}_Tip`);\n  //   // .html((d) => i18next.t(`${d.textKey}_Tip`));\n\n  //   newItems.on('click', (ev: MouseEvent, d) => {\n  //     const target = ev.currentTarget;\n  //     if (target instanceof Element) {\n  //       if (d.modeObj === secondaryMode) {\n  //         switchSecondaryMode(modeNull);\n  //         d3.select(target).classed('infoItemActive', false);\n  //       } else {\n  //         switchSecondaryMode(d.modeObj);\n  //         d3.select('.infoItemActive').classed('infoItemActive', false);\n  //         d3.select(target).classed('infoItemActive', true);\n  //       }\n  //     }\n  //   });\n\n  //   // update selection\n  //   infoboxItems\n  //     .merge(newItems)\n  //     .select('.outputText')\n  //     .html(\n  //       (d) =>\n  //         `<span class=\"translate\" data-i18n=\"[html]${d.textKey}\">\n  //         ${i18next.t(d.textKey)}\n  //         </span>:\n  //         ${d.modeObj.infobox()}`,\n  //     );\n\n  //   // if (!d3.select('.infoItemActive').empty()) {\n  //   //   d3.select('.infoItemActive').datum().modeObj.render();\n  //   if (secondaryMode !== modeNull) {\n  //     secondaryMode.render();\n  //   }\n  // }\n\n  // window.infoboxModes = infoboxModes;\n\n  // cy1.on('cm-graph-updated', updateInfo);\n  // cy2.on('cm-graph-updated', updateInfo);\n\n  // updateInfo();\n  // d3.select('.infoItem').classed('infoItemActive', true);\n\n  // //Other test functions\n  // function showGraphExport() {\n  //   const json = cy.json();\n  //   const jsonString = JSON.stringify(json, null, 4);\n  //   d3.select('#outputText').text(jsonString);\n  // }\n  // d3.select('#showJSON').on('click', showGraphExport);\n\n  localize('.translate');\n}\n\nready(main);\n","/* eslint-disable class-methods-use-this */\n// import * as d3 from 'd3-selection';\nimport { Core } from 'cytoscape';\nimport { Mode, Parameters } from './modes';\nimport graphGalleryList from '../../graph-gallery/graphs-list.json';\nimport * as agr from '../../graph-gallery/graphs-assets';\n\nexport default class ModeLoadRandom implements Mode {\n  cy;\n\n  parameters;\n\n  loadFile: (filename: string) => void;\n\n  constructor(cy: Core, parameters: Parameters) {\n    this.cy = cy;\n    this.parameters = parameters;\n\n    this.loadFile = (grId) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      fetch(agr[grId as keyof typeof agr])\n        .then((response) => response.json())\n        .then((data) => {\n          this.cy.json(data as object);\n\n          this.cy.layout({ name: 'random' }).run();\n          this.cy.fit(undefined, 30); // zoom and pan to fill the viewport\n          cy.nodes().positions((n) => n.renderedPosition()); // fix the rendered positions as model positions\n          this.cy.fit(undefined, 30); // pan to center again (zoom should be ~1)\n\n          this.parameters.nodeIndex = this.cy.nodes().map((e) => e.id());\n          this.cy.emit('cm-graph-updated');\n        });\n    };\n  }\n\n  activate = () => {\n    const numGraphs = graphGalleryList.length;\n    const idx = Math.floor(Math.random() * numGraphs);\n    this.loadFile(graphGalleryList[idx].file);\n    // eslint-disable-next-line no-console\n    console.log(`Loaded ${graphGalleryList[idx].name}`);\n  };\n\n  render() {}\n\n  infobox() {\n    return '';\n  }\n\n  deactivate = () => {};\n}\n","/* eslint-disable class-methods-use-this */\n// import * as d3 from 'd3-selection';\nimport { Core } from 'cytoscape';\nimport { Mode, Parameters } from './modes';\n\nexport default class ModeIsoCheck implements Mode {\n  cy;\n\n  parameters;\n\n  findIsomorphisms: () => void;\n\n  constructor(cy: Core, parameters: Parameters) {\n    this.cy = cy;\n    this.parameters = parameters;\n\n    this.findIsomorphisms = () => {\n      if (\n        window.Worker &&\n        this.parameters.isoTarget &&\n        this.parameters.isoTargetParams\n      ) {\n        const worker = new Worker(\n          new URL('./sgiso_worker.ts', import.meta.url),\n          {\n            type: 'module',\n          },\n        );\n        const cy1 = this.cy;\n        const cy2 = this.parameters.isoTarget;\n        const parameters1 = this.parameters;\n        const parameters2 = this.parameters.isoTargetParams;\n\n        const A = cy1.elements().utils().adjacencyMatrix();\n        const B = cy2.elements().utils().adjacencyMatrix();\n\n        worker.postMessage([B, A]);\n\n        worker.onmessage = (e) => {\n          // console.log(e.data);\n          if ((e.data as number[][][]).length > 0) {\n            const morphism = (e.data as number[][][])[0];\n            cy1\n              .layout({\n                name: 'preset',\n                animate: true,\n                animationDuration: 2000,\n                positions: (cy1node: string) => {\n                  const cy1nodeId = (\n                    cy1node as unknown as cytoscape.NodeSingular\n                  ).id();\n                  const idx1 = parameters1.nodeIndex.indexOf(cy1nodeId);\n                  const idx2 = morphism[idx1].indexOf(1);\n                  const cy2nodeId = parameters2.nodeIndex[idx2];\n                  const finalpos = cy2.$(`#${cy2nodeId}`).position();\n                  // eslint-disable-next-line no-console\n                  console.log(cy1nodeId, idx1, idx2, cy2nodeId);\n                  return finalpos;\n                },\n              })\n              .run();\n            this.parameters.outputContainer.textContent = 'Isomorphism found!';\n          } else {\n            this.parameters.outputContainer.textContent =\n              'Isomorphism NOT found!';\n          }\n        };\n      } else {\n        // eslint-disable-next-line no-console\n        console.log(\"Your browser doesn't support web workers.\");\n      }\n    };\n\n    window.findIso = this.findIsomorphisms;\n  }\n\n  activate = () => {\n    this.findIsomorphisms();\n  };\n\n  render() {}\n\n  infobox() {\n    return '';\n  }\n\n  deactivate = () => {\n    this.parameters.outputContainer.textContent = '';\n  };\n}\n","\"use strict\";\n\nmodule.exports = function (workerUrl, origin, isESM) {\n  if (origin === self.location.origin) {\n    // If the worker bundle's url is on the same origin as the document,\n    // use the worker bundle's own url.\n    return workerUrl;\n  } else {\n    // Otherwise, create a blob URL which loads the worker bundle with `importScripts`.\n    var source = isESM ? 'import ' + JSON.stringify(workerUrl) + ';' : 'importScripts(' + JSON.stringify(workerUrl) + ');';\n    return URL.createObjectURL(new Blob([source], {\n      type: 'application/javascript'\n    }));\n  }\n};","let workerURL = require('./helpers/get-worker-url');\nlet url = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"7xBTE\"));\nmodule.exports = workerURL(url.toString(), url.origin, true);"],"names":["parcelRequire","register","JSON","parse","$5KKEU","$iVMYU","$5bb0935c03f60653$exports","workerUrl","origin","isESM","self","location","source","stringify","URL","createObjectURL","Blob","type","$963d25a2a326a898$var$url","resolve","import","meta","url","$963d25a2a326a898$exports","toString","$fe5f1c7dd3edccfe$var$cy1","$parcel$interopDefault","$lVRnG","$o8PHX","cyOptions","container","document","getElementById","$fe5f1c7dd3edccfe$var$cy2","$fe5f1c7dd3edccfe$var$parameters2","idNodeCount","idEdgeCount","outputContainer","nodeIndex","$fe5f1c7dd3edccfe$var$parameters1","isoTarget","isoTargetParams","$fe5f1c7dd3edccfe$var$toolbarModes","modeName","textKey","icon","$d6xW4","iconClear","modeObj","$fL0K9","default","iconExport","$lwSBY","iconImport","$big6F","iconLoad","$k00KM","iconPointer","$iw6Aq","iconNode","$3cw25","iconEdge","$4nuKq","iconQuestion","render","infobox","constructor","cy","parameters","this","numGraphs","$jE6or","length","idx","Math","floor","random","loadFile","file","console","log","name","grId","fetch","$gPtcg","then","response","json","data","layout","run","fit","undefined","nodes","positions","n","renderedPosition","map","e","id","emit","iconCheck","findIsomorphisms","textContent","window","Worker","worker","cy1","cy2","parameters1","parameters2","A","elements","utils","adjacencyMatrix","B","postMessage","onmessage","morphism","animate","animationDuration","cy1node","cy1nodeId","idx1","indexOf","idx2","cy2nodeId","finalpos","$","position","findIso","$6Wn7g","use","$1sw6k","init","i18nextOptions","$fe5f1c7dd3edccfe$var$localize","$2iS8N","d3","$8k2jw","$54AWr","primaryMode1","activate","select","selectAll","langList","enter","append","classed","attr","on","ev","d","changeLanguage","isoCode","catch","reason","error","text","endonym","buttons","iconDijkstra","value","html","newMode","deactivate"],"version":3,"file":"identify.06c3021e.js.map"}