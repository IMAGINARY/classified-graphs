{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/runtime-39dd586ad1689f3a.js","src/ts/main-identify.ts","src/ts/modes/ModeLoadRandom.ts","<<jsx-config-pragma.js>>","src/ts/modes/ModeIsoCheck.ts","node_modules/@parcel/runtime-js/lib/helpers/get-worker-url.js","node_modules/@parcel/runtime-js/lib/runtime-a76bfb3e2d973609.js","src/ts/uiFunctions.ts"],"sourcesContent":["require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"eSxpj\\\":\\\"identify.fab54ed0.js\\\",\\\"7xBTE\\\":\\\"sgiso_worker.b7491b5b.js\\\",\\\"hBKZF\\\":\\\"index.c86ea59d.js\\\"}\"));","// import assert from 'assert';\nimport cytoscape from 'cytoscape';\nimport ready from 'document-ready';\nimport * as d3 from 'd3-selection';\nimport i18next from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport locI18next from 'loc-i18next';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport './side-effects';\n\nimport { cyOptions, i18nextOptions, langList } from './constants';\n\nimport { Parameters } from './modes/modes';\n\n// import { parameters, toolbarModes, infoboxModes } from './modesList';\nimport ModeNull from './modes/ModeNull';\nimport ModeNode from './modes/ModeNode';\nimport ModeEdge from './modes/ModeEdge';\n// import ModeDijkstra from './modes/ModeDijkstra';\nimport ModeGirth from './modes/ModeGirth';\nimport ModeNumNodes from './modes/ModeNumNodes';\nimport ModeNumEdges from './modes/ModeNumEdges'; // ModeNumEdges -> ES Module\nimport ModeDegSequence from './modes/ModeDegSequence';\nimport ModeComponents from './modes/ModeComponents';\nimport ModeCircuitRank from './modes/ModeCircuitRank';\nimport ModeDiameter from './modes/ModeDiameter';\nimport ModeExport from './modes/ModeExport';\nimport ModeImport from './modes/ModeImport';\n// import ModeLoad from './modes/ModeLoad';\nimport ModeLoadRandom from './modes/ModeLoadRandom';\n// import ModeLayout from './modes/ModeLayout';\nimport ModeClear from './modes/ModeClear';\nimport ModeDetAdjacency from './modes/ModeDetAdjacency';\n// import ModeAdjacencyMatrix from './modes/ModeAdjacencyMatrix';\n\nimport * as assets from './assets';\nimport ModeIsoCheck from './modes/ModeIsoCheck';\n\nimport {\n  defaultMode,\n  makeGraphGallery,\n  switchPrimaryMode,\n  // switchSecondaryMode,\n  createInvariantsTable,\n  updateInvariantsTable,\n  ModeConfig,\n} from './uiFunctions';\n\nimport graphGalleryList from '../graph-gallery/graphs-list.json';\n\nimport { GraphRegister } from './graph-gallery-scripts/register-graphs';\n\nconst cy1 = cytoscape({\n  ...cloneDeep(cyOptions),\n  ...{ container: document.getElementById('cy1') },\n});\n\nconst cy2 = cytoscape({\n  ...cloneDeep(cyOptions),\n  ...{ container: document.getElementById('cy2') },\n});\n\nconst parameters2: Parameters = {\n  idNodeCount: 1,\n  idEdgeCount: 1,\n  outputContainer: document.getElementById('output') as HTMLElement,\n  nodeIndex: [],\n};\n\nconst parameters1: Parameters = {\n  idNodeCount: 1,\n  idEdgeCount: 1,\n  outputContainer: document.getElementById('output') as HTMLElement,\n  nodeIndex: [],\n  isoTarget: cy2,\n  isoTargetParams: parameters2,\n};\n\nconst toolbarModes: ModeConfig[] = [\n  {\n    modeName: 'modeClear',\n    textKey: 'Clear',\n    icon: assets.iconClear,\n    modeObj1: new ModeClear(cy1, parameters1),\n    modeObj2: new ModeNull(cy2, parameters2),\n  },\n  {\n    modeName: 'modeExport',\n    textKey: 'Export',\n    icon: assets.iconExport,\n    modeObj1: new ModeExport(cy1, parameters1),\n    modeObj2: new ModeNull(cy2, parameters2),\n  },\n  {\n    modeName: 'modeImport',\n    textKey: 'Import',\n    icon: assets.iconImport,\n    modeObj1: new ModeImport(cy1, parameters1),\n    modeObj2: new ModeNull(cy2, parameters2),\n  },\n  // {\n  //   modeName: 'modeLoad',\n  //   textKey: 'Load',\n  //   icon: assets.iconLoad,\n  //   modeObj: new ModeLoad(cy1, parameters1),\n  // },\n  {\n    modeName: 'modeNull',\n    textKey: 'Pointer',\n    icon: assets.iconPointer,\n    modeObj1: new ModeNull(cy1, parameters1),\n    modeObj2: new ModeNull(cy2, parameters2),\n  },\n  {\n    modeName: 'modeNode',\n    textKey: 'Nodes',\n    icon: assets.iconNode,\n    modeObj1: new ModeNode(cy1, parameters1),\n    modeObj2: new ModeNull(cy2, parameters2),\n  },\n  {\n    modeName: 'modeEdge',\n    textKey: 'Edges',\n    icon: assets.iconEdge,\n    modeObj1: new ModeEdge(cy1, parameters1),\n    modeObj2: new ModeNull(cy2, parameters2),\n  },\n  // {\n  //   modeName: 'modeClear',\n  //   textKey: 'Clear',\n  //   icon: assets.iconClear,\n  //   modeObj: new ModeClear(cy2, parameters2),\n  // },\n  // {\n  //   modeName: 'modeExport',\n  //   textKey: 'Export',\n  //   icon: assets.iconExport,\n  //   modeObj: new ModeExport(cy2, parameters2),\n  // },\n  // {\n  //   modeName: 'modeImport',\n  //   textKey: 'Import',\n  //   icon: assets.iconImport,\n  //   modeObj: new ModeImport(cy2, parameters2),\n  // },\n  // // {\n  // //   modeName: 'modeLoad',\n  // //   textKey: 'Load',\n  // //   icon: assets.iconLoad,\n  // //   modeObj: new ModeLoad(cy2, parameters2),\n  // // },\n  // {\n  //   modeName: 'modeNull',\n  //   textKey: 'Pointer',\n  //   icon: assets.iconPointer,\n  //   modeObj: new ModeNull(cy2, parameters2),\n  // },\n  // {\n  //   modeName: 'modeNode',\n  //   textKey: 'Nodes',\n  //   icon: assets.iconNode,\n  //   modeObj: new ModeNode(cy2, parameters2),\n  // },\n  // {\n  //   modeName: 'modeEdge',\n  //   textKey: 'Edges',\n  //   icon: assets.iconEdge,\n  //   modeObj: new ModeEdge(cy2, parameters2),\n  // },\n];\n\nconst targetToolbarModes = [\n  {\n    modeName: 'modeLoadRandom',\n    textKey: 'Target',\n    icon: assets.iconQuestion,\n    modeObj1: new ModeNull(cy1, parameters1),\n    modeObj2: new ModeLoadRandom(cy2, parameters2),\n  },\n  {\n    modeName: 'modeIsoCheck',\n    textKey: 'Check',\n    icon: assets.iconCheck,\n    modeObj1: new ModeIsoCheck(cy1, parameters1),\n    modeObj2: new ModeNull(cy2, parameters2),\n  },\n];\n\nconst invariants: ModeConfig[] = [\n  {\n    modeName: 'modeNumNodes',\n    invName: 'numNodes',\n    textKey: 'Order',\n    modeObj1: new ModeNumNodes(cy1, parameters1),\n    modeObj2: new ModeNumNodes(cy2, parameters2),\n  },\n  {\n    modeName: 'modeNumEdges',\n    invName: 'numEdges',\n    textKey: 'Size',\n    modeObj1: new ModeNumEdges(cy1, parameters1),\n    modeObj2: new ModeNumEdges(cy2, parameters2),\n  },\n  {\n    modeName: 'modeGirth',\n    invName: 'girth',\n    textKey: 'Girth',\n    modeObj1: new ModeGirth(cy1, parameters1),\n    modeObj2: new ModeGirth(cy2, parameters2),\n  },\n  {\n    modeName: 'modeDegSequence',\n    invName: 'degSequence',\n    textKey: 'Degree_sequence',\n    modeObj1: new ModeDegSequence(cy1, parameters1),\n    modeObj2: new ModeDegSequence(cy2, parameters2),\n  },\n  {\n    modeName: 'modeComponents',\n    invName: 'components',\n    textKey: 'Connected_components',\n    modeObj1: new ModeComponents(cy1, parameters1),\n    modeObj2: new ModeComponents(cy2, parameters2),\n  },\n  {\n    modeName: 'modeCircuitRank',\n    invName: 'circuitRank',\n    textKey: 'Circuit_rank',\n    modeObj1: new ModeCircuitRank(cy1, parameters1),\n    modeObj2: new ModeCircuitRank(cy2, parameters2),\n  },\n  {\n    modeName: 'modeDiameter',\n    invName: 'diameter',\n    textKey: 'Diameter',\n    modeObj1: new ModeDiameter(cy1, parameters1),\n    modeObj2: new ModeDiameter(cy2, parameters2),\n  },\n  {\n    modeName: 'modeDetAdjacency',\n    invName: 'detAdjacency',\n    textKey: 'Adjacency_det',\n    modeObj1: new ModeDetAdjacency(cy1, parameters1),\n    modeObj2: new ModeDetAdjacency(cy2, parameters2),\n  },\n  // {\n  //   modeName: 'modeAdjacencyMatrix',\n  //   textKey: 'Adjacency_matrix',\n  //   modeObj: new ModeAdjacencyMatrix(cy1, parameters1),\n  // },\n];\n\nconst primaryMode: ModeConfig = defaultMode;\nconst secondaryMode: ModeConfig = defaultMode;\n\n// eslint-disable-next-line no-void\nvoid i18next.use(LanguageDetector).init(i18nextOptions);\nconst localize = locI18next.init(i18next);\n\n// Make Language Selector\nfunction createLangSelector() {\n  const divLangSelector = d3.select('#langSelector').classed('dropdown', true);\n\n  divLangSelector\n    .append('button')\n    .attr('class', 'btn btn-secondary dropdown-toggle')\n    .attr('type', 'button')\n    .attr('data-bs-toggle', 'dropdown')\n    .append('img')\n    .attr('src', assets.iconTranslate)\n    .attr('width', '30px');\n\n  divLangSelector.append('ul').classed('dropdown-menu', true);\n\n  divLangSelector\n    .select('.dropdown-menu')\n    .selectAll('li')\n    .data(langList)\n    .enter()\n    .append('li')\n    .append('a')\n    .classed('dropdown-item', true)\n    .attr('href', '#')\n    .on('click', (ev, d) => {\n      i18next\n        .changeLanguage(d.isoCode)\n        .then(() => localize('.translate'))\n        .catch((reason) => {\n          // TODO: Handle the error properly instead of ignoring it.\n          // eslint-disable-next-line no-console\n          console.error(`Changing to language ${d.isoCode} failed.`, reason);\n        });\n    })\n    .text((d) => d.endonym);\n}\n\n// Create toolbar buttons\nfunction createButtons(container: string, buttonsList: ModeConfig[]) {\n  const buttons = d3\n    .select(container)\n    .selectAll('button')\n    .data(buttonsList)\n    .enter()\n    .append('button')\n    .classed('toolbar-button', true)\n    .attr('id', (d) => `btn-${d.modeName}`);\n\n  buttons\n    .append('img')\n    .attr('src', (d) => (d.icon ? d.icon : assets.iconDijkstra));\n\n  // d3.select('#btn-modeLayout')\n  //   .append('select')\n  //   .attr('id', 'selectLayout')\n  //   .selectAll('option')\n  //   .data([\n  //     { value: 'circle', textKey: 'Circle' },\n  //     { value: 'random', textKey: 'Random' },\n  //   ])\n  //   .enter()\n  //   .append('option')\n  //   .attr('value', (d) => d.value)\n  //   // .classed('translate', true)\n  //   // .attr('data-i18n', (d) => d.textKey);\n  //   .html((d) => d.textKey);\n\n  buttons\n    .append('div')\n    .classed('translate', true)\n    .attr('data-i18n', (d) => d.textKey);\n  // .html((d) => i18next.t(d.textKey));\n\n  buttons.on('click', (ev, d) => {\n    switchPrimaryMode(d);\n  });\n}\n\n// Specify types of global variables that are not yet defined on 'window'.\ndeclare global {\n  interface Window {\n    cy1: cytoscape.Core;\n    cy2: cytoscape.Core;\n    parameters1: Parameters;\n    parameters2: Parameters;\n    d3: typeof d3;\n    findIso: (a: void) => void;\n    filter: (a: void) => void;\n    primaryMode: ModeConfig;\n    secondaryMode: ModeConfig;\n  }\n}\nwindow.d3 = d3;\nwindow.parameters1 = parameters1;\nwindow.parameters2 = parameters2;\n\n/* MAIN */\n\nfunction main() {\n  // After this, window.cy is shadowing the function-local cy.\n  window.cy1 = cy1;\n  window.cy2 = cy2;\n  window.primaryMode = primaryMode;\n  window.secondaryMode = secondaryMode;\n\n  primaryMode.modeObj1.activate();\n  primaryMode.modeObj2.activate();\n  // secondaryMode.activate();\n\n  createLangSelector();\n\n  // Make toolbar buttons\n  createButtons('#toolbar', toolbarModes);\n  createButtons('#target-tools', targetToolbarModes);\n\n  // // Make Load modal\n  // d3.select('#btn-modeLoad')\n  //   .attr('data-bs-toggle', 'modal')\n  //   .attr('data-bs-target', '#exampleModal');\n\n  // Make Invariants table\n  createInvariantsTable(invariants);\n\n  // Make Gallery\n  makeGraphGallery(graphGalleryList, cy1, parameters1);\n\n  function filteredGallery() {\n    const filteredList = (graphGalleryList as GraphRegister[]).filter(\n      (d) => d.invariants.detAdjacency === 0,\n    );\n    // console.log(filteredList.map((d) => d.name));\n    makeGraphGallery(filteredList, cy1, parameters1);\n  }\n\n  window.filter = filteredGallery;\n\n  // Make infobox items\n  // function updateInfo() {\n  //   const infoboxItems = d3\n  //     .select('#infobox')\n  //     .selectAll<HTMLDivElement, unknown>('div.infoItem')\n  //     .data(infoboxModes);\n\n  //   const newItems = infoboxItems\n  //     .enter()\n  //     .append('div')\n  //     .attr('id', (d) => `infoItem-${d.modeName}`)\n  //     .classed('infoItem', true);\n\n  //   newItems // Info icon\n  //     .append('img')\n  //     .attr('src', assets.iconInfo)\n  //     .attr('data-bs-toggle', 'collapse')\n  //     .attr('data-bs-target', (d) => `#infoItem-text-${d.modeName}`)\n  //     .on('click', (ev: Event) => {\n  //       ev.stopPropagation();\n  //     });\n\n  //   newItems.append('div').classed('outputText', true); // container for text\n\n  //   newItems // Tip text\n  //     .append('div')\n  //     .attr('id', (d) => `infoItem-text-${d.modeName}`)\n  //     .attr('data-bs-parent', '#infobox')\n  //     .attr('data-bs-toggle', 'collapse')\n  //     .classed('tipText', true)\n  //     .classed('collapse', true)\n  //     .classed('translate', true)\n  //     .attr('data-i18n', (d) => `[html]${d.textKey}_Tip`);\n  //   // .html((d) => i18next.t(`${d.textKey}_Tip`));\n\n  //   newItems.on('click', (ev: MouseEvent, d) => {\n  //     const target = ev.currentTarget;\n  //     if (target instanceof Element) {\n  //       if (d.modeObj === secondaryMode) {\n  //         switchSecondaryMode(modeNull);\n  //         d3.select(target).classed('infoItemActive', false);\n  //       } else {\n  //         switchSecondaryMode(d.modeObj);\n  //         d3.select('.infoItemActive').classed('infoItemActive', false);\n  //         d3.select(target).classed('infoItemActive', true);\n  //       }\n  //     }\n  //   });\n\n  //   // update selection\n  //   infoboxItems\n  //     .merge(newItems)\n  //     .select('.outputText')\n  //     .html(\n  //       (d) =>\n  //         `<span class=\"translate\" data-i18n=\"[html]${d.textKey}\">\n  //         ${i18next.t(d.textKey)}\n  //         </span>:\n  //         ${d.modeObj.infobox()}`,\n  //     );\n\n  //   // if (!d3.select('.infoItemActive').empty()) {\n  //   //   d3.select('.infoItemActive').datum().modeObj.render();\n  //   if (secondaryMode !== modeNull) {\n  //     secondaryMode.render();\n  //   }\n  // }\n\n  // window.infoboxModes = infoboxModes;\n\n  cy1.on('cm-graph-updated', () => updateInvariantsTable(invariants));\n  cy2.on('cm-graph-updated', () => updateInvariantsTable(invariants));\n\n  // updateInfo();\n  // d3.select('.infoItem').classed('infoItemActive', true);\n\n  // //Other test functions\n  // function showGraphExport() {\n  //   const json = cy.json();\n  //   const jsonString = JSON.stringify(json, null, 4);\n  //   d3.select('#outputText').text(jsonString);\n  // }\n  // d3.select('#showJSON').on('click', showGraphExport);\n\n  localize('.translate');\n}\n\nready(main);\n","/* eslint-disable class-methods-use-this */\n// import * as d3 from 'd3-selection';\nimport { Core } from 'cytoscape';\nimport { Mode, Parameters } from './modes';\nimport graphGalleryList from '../../graph-gallery/graphs-list.json';\nimport * as agr from '../../graph-gallery/graphs-assets';\n\nexport default class ModeLoadRandom implements Mode {\n  cy;\n\n  parameters;\n\n  loadFile: (filename: string) => void;\n\n  constructor(cy: Core, parameters: Parameters) {\n    this.cy = cy;\n    this.parameters = parameters;\n\n    this.loadFile = (grId) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      fetch(agr[grId as keyof typeof agr])\n        .then((response) => response.json())\n        .then((data) => {\n          this.cy.json(data as object);\n\n          this.cy.layout({ name: 'random' }).run();\n          this.cy.fit(undefined, 30); // zoom and pan to fill the viewport\n          cy.nodes().positions((n) => n.renderedPosition()); // fix the rendered positions as model positions\n          this.cy.fit(undefined, 30); // pan to center again (zoom should be ~1)\n\n          this.parameters.nodeIndex = this.cy.nodes().map((e) => e.id());\n          this.cy.emit('cm-graph-updated');\n        });\n    };\n  }\n\n  activate = () => {\n    const numGraphs = graphGalleryList.length;\n    const idx = Math.floor(Math.random() * numGraphs);\n    this.loadFile(graphGalleryList[idx].file);\n    // eslint-disable-next-line no-console\n    console.log(`Loaded ${graphGalleryList[idx].name}`);\n  };\n\n  render() {}\n\n  infobox() {\n    return '';\n  }\n\n  deactivate = () => {};\n}\n",null,"/* eslint-disable class-methods-use-this */\n// import * as d3 from 'd3-selection';\nimport { Core } from 'cytoscape';\nimport { Mode, Parameters } from './modes';\n\nexport default class ModeIsoCheck implements Mode {\n  cy;\n\n  parameters;\n\n  findIsomorphisms: () => void;\n\n  constructor(cy: Core, parameters: Parameters) {\n    this.cy = cy;\n    this.parameters = parameters;\n\n    this.findIsomorphisms = () => {\n      if (\n        window.Worker &&\n        this.parameters.isoTarget &&\n        this.parameters.isoTargetParams\n      ) {\n        const worker = new Worker(\n          new URL('./sgiso_worker.ts', import.meta.url),\n          {\n            type: 'module',\n          },\n        );\n        const cy1 = this.cy;\n        const cy2 = this.parameters.isoTarget;\n        const parameters1 = this.parameters;\n        const parameters2 = this.parameters.isoTargetParams;\n\n        const A = cy1.elements().utils().adjacencyMatrix();\n        const B = cy2.elements().utils().adjacencyMatrix();\n\n        worker.postMessage([B, A]);\n\n        worker.onmessage = (e) => {\n          // console.log(e.data);\n          if ((e.data as number[][][]).length > 0) {\n            const morphism = (e.data as number[][][])[0];\n            cy1\n              .layout({\n                name: 'preset',\n                animate: true,\n                animationDuration: 2000,\n                positions: (cy1node: string) => {\n                  const cy1nodeId = (\n                    cy1node as unknown as cytoscape.NodeSingular\n                  ).id();\n                  const idx1 = parameters1.nodeIndex.indexOf(cy1nodeId);\n                  const idx2 = morphism[idx1].indexOf(1);\n                  const cy2nodeId = parameters2.nodeIndex[idx2];\n                  const finalpos = cy2.$(`#${cy2nodeId}`).position();\n                  // eslint-disable-next-line no-console\n                  console.log(cy1nodeId, idx1, idx2, cy2nodeId);\n                  return finalpos;\n                },\n              })\n              .run();\n            this.parameters.outputContainer.textContent = 'Isomorphism found!';\n          } else {\n            this.parameters.outputContainer.textContent =\n              'Isomorphism NOT found!';\n          }\n        };\n      } else {\n        // eslint-disable-next-line no-console\n        console.log(\"Your browser doesn't support web workers.\");\n      }\n    };\n\n    window.findIso = this.findIsomorphisms;\n  }\n\n  activate = () => {\n    this.findIsomorphisms();\n  };\n\n  render() {}\n\n  infobox() {\n    return '';\n  }\n\n  deactivate = () => {\n    this.parameters.outputContainer.textContent = '';\n  };\n}\n","\"use strict\";\n\nmodule.exports = function (workerUrl, origin, isESM) {\n  if (origin === self.location.origin) {\n    // If the worker bundle's url is on the same origin as the document,\n    // use the worker bundle's own url.\n    return workerUrl;\n  } else {\n    // Otherwise, create a blob URL which loads the worker bundle with `importScripts`.\n    var source = isESM ? 'import ' + JSON.stringify(workerUrl) + ';' : 'importScripts(' + JSON.stringify(workerUrl) + ');';\n    return URL.createObjectURL(new Blob([source], {\n      type: 'application/javascript'\n    }));\n  }\n};","let workerURL = require('./helpers/get-worker-url');\nlet bundleURL = require('./helpers/bundle-url');\nlet url = bundleURL.getBundleURL('eSxpj') + require('./helpers/bundle-manifest').resolve(\"7xBTE\");module.exports = workerURL(url, bundleURL.getOrigin(url), false);","import * as d3 from 'd3-selection';\nimport { Core } from 'cytoscape';\nimport { Mode, Parameters } from './modes/modes';\nimport graphGalleryList from '../graph-gallery/graphs-list.json';\nimport * as agr from '../graph-gallery/graphs-assets';\nimport { GraphRegister } from './graph-gallery-scripts/register-graphs';\nimport ModeNull from './modes/ModeNull';\nimport { iconPointer } from './assets';\n\ntype ModeConfig = {\n  modeName: string;\n  invName?: string;\n  textKey: string;\n  icon?: string;\n  modeObj1: Mode;\n  modeObj2: Mode;\n};\n\nconst defaultMode = {\n  modeName: 'modeNull',\n  textKey: 'Pointer',\n  icon: iconPointer,\n  modeObj1: new ModeNull(window.cy1, window.parameters1),\n  modeObj2: new ModeNull(window.cy2, window.parameters2),\n};\n\nfunction switchPrimaryMode(newMode: ModeConfig) {\n  window.primaryMode.modeObj1.deactivate();\n  window.primaryMode.modeObj2.deactivate();\n  window.primaryMode = newMode;\n  window.primaryMode.modeObj1.activate();\n  window.primaryMode.modeObj2.activate();\n}\n\nfunction switchSecondaryMode(newMode: ModeConfig) {\n  window.secondaryMode.modeObj1.deactivate();\n  // window.secondaryMode.modeObj2.deactivate();\n  window.secondaryMode = newMode;\n  window.secondaryMode.modeObj1.activate();\n  // window.secondaryMode.modeObj2.activate();\n  window.cy1.emit('cm-graph-updated');\n  window.cy2.emit('cm-graph-updated');\n}\n\n/* Loading graph into cy instance */\n\n// Loads graph given by `grId` into the `cy` instance, with parameters `parameters`.\nfunction loadGraph(cy: Core, parameters: Parameters, grId: string) {\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  fetch(agr[grId as keyof typeof agr])\n    .then((response) => response.json())\n    .then((data) => {\n      cy.json(data as object);\n\n      cy.fit(undefined, 30); // zoom and pan to fill the viewport\n      cy.nodes().positions((n) => n.renderedPosition()); // fix the rendered positions as model positions\n      cy.fit(undefined, 30); // pan to center again (zoom should be ~1)\n\n      // eslint-disable-next-line no-param-reassign\n      parameters.nodeIndex = cy.nodes().map((e) => e.id());\n      cy.emit('cm-graph-updated');\n    });\n}\n\n/* Gallery of graphs */\n\nfunction makeGraphGallery(\n  data: GraphRegister[],\n  loadIntoCy: Core,\n  parametersCy: Parameters,\n) {\n  const galleryContainer = d3\n    .select('#gallery')\n    .selectAll('div.graphGalleryItem')\n    .data(data, (d) => (d as GraphRegister).file);\n\n  // enter selection\n  const newItems = galleryContainer\n    .enter()\n    .append('div')\n    .classed('graphGalleryItem', true)\n    // .attr('data-bs-dismiss', 'modal')\n    .on('click', (ev, d) => {\n      loadGraph(loadIntoCy, parametersCy, d.file);\n    });\n\n  newItems\n    .append('div')\n    .append('img')\n    .attr('src', (d) => agr[`${d.file}_Icon` as keyof typeof agr])\n    .attr('height', '80px');\n\n  newItems.append('div').html((d) => d.name);\n\n  // exit selection\n  galleryContainer.exit().remove();\n\n  // update selection: none\n}\n\nfunction makeFilteredGraphGallery() {\n  // console.log(d3.selectAll('.filter'));\n  let graphs = graphGalleryList;\n  // console.log(graphs);\n  d3.selectAll('.filter').each((d, i, n) => {\n    if ((n[i] as HTMLInputElement).value !== '') {\n      graphs = graphs.filter(\n        (g) =>\n          g.invariants[(d as ModeConfig).invName] ===\n          Number((n[i] as HTMLInputElement).value),\n      );\n      // console.log(graphs);\n      // console.log(Number(n[i].value);\n      // console.log(d, i, n);\n    }\n  });\n  makeGraphGallery(graphs, window.cy1, window.parameters1);\n}\n\n/* Invariants table */\n\n// function updateInvariantsTable(usedInvariants: ModeConfig[]) {\n//   const invariantsItem = d3\n//     .select('#invariants')\n//     .select('table')\n//     .selectAll<HTMLTableRowElement, unknown>('tr.invariantTR')\n//     .data(usedInvariants);\n\n//   // enter\n//   const newInvariant = invariantsItem\n//     .enter()\n//     .append('tr')\n//     .classed('invariantTR', true);\n\n//   newInvariant\n//     .append('td')\n//     .classed('invariantTableInvName', true)\n//     .classed('translate', true)\n//     .attr('data-i18n', (d) => `[html]${d.textKey}`);\n\n//   newInvariant\n//     .append('td')\n//     .append('input')\n//     .classed('filter', true)\n//     .attr('cm-invariant', (d) => `${d.modeName}`)\n//     .on('change', () => makeFilteredGraphGallery());\n\n//   newInvariant.append('td').classed('invCy1', true); // container for text\n//   newInvariant.append('td').classed('invCy2', true);\n\n//   // exit\n//   invariantsItem.exit().remove();\n\n//   // update\n//   invariantsItem\n//     .merge(newInvariant)\n//     .select('.invCy1')\n//     .html((d) => d.modeObj1.infobox());\n\n//   invariantsItem\n//     .merge(newInvariant)\n//     .select('.invCy2')\n//     .html((d) => d.modeObj2.infobox());\n// }\n\n// function createInvariantsTable(usedInvariants: ModeConfig[]) {\n//   const invTable = d3\n//     .select('#invariants')\n//     .append('table')\n//     .classed('invTable', true)\n//     .append('tr');\n//   invTable.append('th').html('Invariant');\n//   invTable.append('th').html('Filter');\n//   invTable.append('th').html('Your graph');\n//   invTable.append('th').html('Target graph');\n//   updateInvariantsTable(usedInvariants);\n// }\n\n/* Invariants table horizontal */\n\nfunction updateInvariantsTable(usedInvariants: ModeConfig[]) {\n  const headers = d3\n    .select('.invTabHeaders')\n    .selectAll<HTMLTableCellElement, unknown>('td.invData')\n    .data(usedInvariants);\n\n  const filters = d3\n    .select('.invTabFilters')\n    .selectAll<HTMLTableCellElement, unknown>('td.invData')\n    .data(usedInvariants);\n\n  const invCy1 = d3\n    .select('.invTabCy1')\n    .selectAll<HTMLTableCellElement, unknown>('td.invData')\n    .data(usedInvariants);\n\n  const invCy2 = d3\n    .select('.invTabCy2')\n    .selectAll<HTMLTableCellElement, unknown>('td.invData')\n    .data(usedInvariants);\n\n  // enter\n  headers\n    .enter()\n    .append('td')\n    .classed('invData', true)\n    .classed('translate', true)\n    .attr('data-i18n', (d) => `[html]${d.textKey}`)\n    // .classed('btn', true)\n    // .classed('btn-primary', true)\n    .on('click', (ev: MouseEvent, d) => {\n      const target = ev.currentTarget;\n      if (target instanceof Element) {\n        if (d === window.secondaryMode) {\n          switchSecondaryMode(defaultMode);\n          d3.select(target).classed('infoItemActive', false);\n        } else {\n          switchSecondaryMode(d);\n          d3.select('.infoItemActive').classed('infoItemActive', false);\n          d3.select(target).classed('infoItemActive', true);\n        }\n      }\n    });\n\n  filters\n    .enter()\n    .append('td')\n    .classed('invData', true)\n    .append('input')\n    .classed('filter', true)\n    .attr('cm-invariant', (d) => `${d.modeName}`)\n    .on('change', () => makeFilteredGraphGallery());\n\n  const newInvCy1 = invCy1.enter().append('td').classed('invData', true);\n  const newInvCy2 = invCy2.enter().append('td').classed('invData', true);\n\n  // exit\n  headers.exit().remove();\n  filters.exit().remove();\n  invCy1.exit().remove();\n  invCy2.exit().remove();\n\n  // update\n  invCy1.merge(newInvCy1).html((d) => d.modeObj1.infobox());\n  invCy2.merge(newInvCy2).html((d) => d.modeObj2.infobox());\n\n  if (window.secondaryMode !== defaultMode) {\n    window.secondaryMode.modeObj1.render();\n    // window.secondaryMode.modeObj2.render();\n  }\n}\n\nfunction createInvariantsTable(usedInvariants: ModeConfig[]) {\n  const invTable = d3\n    .select('#invariants')\n    .append('table')\n    .classed('invTab', true);\n  invTable\n    .append('tr')\n    .classed('invTabHeaders', true)\n    .append('td')\n    .html('Invariant');\n  invTable\n    .append('tr')\n    .classed('invTabCy1', true)\n    .append('td')\n    .html('Your Graph');\n  invTable\n    .append('tr')\n    .classed('invTabCy2', true)\n    .append('td')\n    .html('Target Graph');\n  invTable\n    .append('tr')\n    .classed('invTabFilters', true)\n    .append('td')\n    .html('Gallery Filter');\n\n  updateInvariantsTable(usedInvariants);\n}\n\nexport {\n  ModeConfig,\n  defaultMode,\n  switchPrimaryMode,\n  switchSecondaryMode,\n  loadGraph,\n  makeGraphGallery,\n  updateInvariantsTable,\n  createInvariantsTable,\n};\n"],"names":["parcelRequire","register","JSON","parse","$22BvR","$j36hr","$9c199afd2e21d6fc$export$2e2bcd8739ae039","ModeLoadRandom","cy","parameters","$parcel$interopDefault","$fvlsR","this","numGraphs","$9L71O","length","idx","Math","floor","random","_this","loadFile","file","console","log","concat","name","grId","fetch","$2D7Sc","then","response","json","data","_this1","layout","run","fit","undefined","nodes","positions","n","renderedPosition","nodeIndex","map","e","id","emit","key","$b1dcaf659c9d437c$exports","workerUrl","origin","isESM","self","location","source","stringify","URL","createObjectURL","Blob","type","$60ac240f7279c6f4$var$url","$cP1aT","getBundleURL","resolve","$60ac240f7279c6f4$exports","getOrigin","$e35e271fd9a451b8$export$2e2bcd8739ae039","ModeIsoCheck","findIsomorphisms","outputContainer","textContent","window","Worker","isoTarget","isoTargetParams","worker","cy1","cy2","parameters1","parameters2","A","elements","utils","adjacencyMatrix","B","postMessage","onmessage","morphism","animate","animationDuration","cy1node","cy1nodeId","idx1","indexOf","idx2","cy2nodeId","finalpos","$","position","findIso","$2bc00e5b621322e5$export$de627736f8c8ffd7","$48EYa","modeName","textKey","icon","iconPointer","modeObj1","$bn6f8","default","modeObj2","$2bc00e5b621322e5$export$f792092e81150b10","newMode","secondaryMode","deactivate","activate","$2bc00e5b621322e5$export$df731bf88a33837","loadIntoCy","parametersCy","galleryContainer","select","selectAll","d","newItems","enter","append","classed","on","ev","attr","html","exit","remove","$2bc00e5b621322e5$export$986abe66460069ed","usedInvariants","headers","filters","invCy1","invCy2","target","currentTarget","Element","graphs","each","i","value","filter","g","invariants","invName","Number","newInvCy1","newInvCy2","merge","infobox","render","$57f07d06aad85111$var$cy1","$2hmjV","$kVa2A","$g00W3","cyOptions","container","document","getElementById","$57f07d06aad85111$var$cy2","$57f07d06aad85111$var$parameters2","idNodeCount","idEdgeCount","$57f07d06aad85111$var$parameters1","$57f07d06aad85111$var$toolbarModes","$efzB6","iconClear","$4Jbmd","iconExport","$6tNEv","iconImport","$brS0K","iconNode","$eVhA1","iconEdge","$g3IaC","$57f07d06aad85111$var$targetToolbarModes","iconQuestion","iconCheck","$57f07d06aad85111$var$invariants","$gykxM","$hzTrw","$hY30G","$jOuLE","$9ofNy","$hr1UL","$fHB38","$67Y1Y","$57f07d06aad85111$var$primaryMode","$57f07d06aad85111$var$secondaryMode","$kBTuX","use","$b8MII","init","i18nextOptions","$57f07d06aad85111$var$localize","$22twO","$57f07d06aad85111$var$createButtons","buttonsList","buttons","iconDijkstra","primaryMode","d3","$lgcSj","divLangSelector","invTable","iconTranslate","langList","changeLanguage","isoCode","catch","reason","error","text","endonym","detAdjacency"],"version":3,"file":"identify.fab54ed0.js.map"}