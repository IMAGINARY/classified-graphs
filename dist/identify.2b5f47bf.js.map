{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/runtime-0ad42dc475b883db.js","src/ts/main-identify.ts","src/ts/modes/ModeLoadRandom.ts","src/ts/modes/ModeIsoCheck.ts","node_modules/@parcel/runtime-js/lib/helpers/get-worker-url.js","node_modules/@parcel/runtime-js/lib/runtime-3d8f90b5e52e37fb.js","src/ts/uiFunctions.ts"],"sourcesContent":["require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"bTNK7\\\":\\\"identify.2b5f47bf.js\\\",\\\"7xBTE\\\":\\\"sgiso_worker.b7491b5b.js\\\",\\\"7nvGH\\\":\\\"index.0f82989d.js\\\"}\"));","// import assert from 'assert';\nimport cytoscape from 'cytoscape';\nimport ready from 'document-ready';\nimport * as d3 from 'd3-selection';\nimport i18next from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport locI18next from 'loc-i18next';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport './side-effects';\n\nimport { cyOptions, i18nextOptions, langList } from './constants';\n\nimport { Parameters } from './modes/modes';\n\n// import { parameters, toolbarModes, infoboxModes } from './modesList';\nimport ModeNull from './modes/ModeNull';\nimport ModeNode from './modes/ModeNode';\nimport ModeEdge from './modes/ModeEdge';\n// import ModeDijkstra from './modes/ModeDijkstra';\nimport ModeGirth from './modes/ModeGirth';\nimport ModeNumNodes from './modes/ModeNumNodes';\nimport ModeNumEdges from './modes/ModeNumEdges'; // ModeNumEdges -> ES Module\nimport ModeDegSequence from './modes/ModeDegSequence';\nimport ModeComponents from './modes/ModeComponents';\nimport ModeCircuitRank from './modes/ModeCircuitRank';\nimport ModeDiameter from './modes/ModeDiameter';\nimport ModeExport from './modes/ModeExport';\nimport ModeImport from './modes/ModeImport';\n// import ModeLoad from './modes/ModeLoad';\nimport ModeLoadRandom from './modes/ModeLoadRandom';\n// import ModeLayout from './modes/ModeLayout';\nimport ModeClear from './modes/ModeClear';\nimport ModeDetAdjacency from './modes/ModeDetAdjacency';\n// import ModeAdjacencyMatrix from './modes/ModeAdjacencyMatrix';\n\nimport * as assets from './assets';\nimport ModeIsoCheck from './modes/ModeIsoCheck';\n\nimport {\n  defaultMode,\n  makeGraphGallery,\n  createInvariantsTable,\n  updateInvariantsTable,\n  ModeConfig,\n  createButton,\n} from './uiFunctions';\n\nimport graphGalleryList from '../graph-gallery/graphs-list.json';\n\n// import { GraphRegister } from './graph-gallery-scripts/register-graphs';\n\nconst cy1 = cytoscape({\n  ...cloneDeep(cyOptions),\n  ...{ container: document.getElementById('cy1') },\n});\n\nconst cy2 = cytoscape({\n  ...cloneDeep(cyOptions),\n  ...{ container: document.getElementById('cy2') },\n});\n\nconst parameters2: Parameters = {\n  idNodeCount: 1,\n  idEdgeCount: 1,\n  outputContainer: document.getElementById('output') as HTMLElement,\n  nodeIndex: [],\n};\n\nconst parameters1: Parameters = {\n  idNodeCount: 1,\n  idEdgeCount: 1,\n  outputContainer: document.getElementById('output') as HTMLElement,\n  nodeIndex: [],\n  isoTarget: cy2,\n  isoTargetParams: parameters2,\n};\n\nconst toolbarModes: ModeConfig[] = [\n  {\n    modeName: 'modeClear',\n    textKey: 'Clear',\n    icon: assets.iconClear,\n    modeObj1: new ModeClear(cy1, parameters1),\n    modeObj2: new ModeNull(cy2, parameters2),\n  },\n  {\n    modeName: 'modeExport',\n    textKey: 'Export',\n    icon: assets.iconExport,\n    modeObj1: new ModeExport(cy1, parameters1),\n    modeObj2: new ModeNull(cy2, parameters2),\n  },\n  {\n    modeName: 'modeImport',\n    textKey: 'Import',\n    icon: assets.iconImport,\n    modeObj1: new ModeImport(cy1, parameters1),\n    modeObj2: new ModeNull(cy2, parameters2),\n  },\n  // {\n  //   modeName: 'modeLoad',\n  //   textKey: 'Load',\n  //   icon: assets.iconLoad,\n  //   modeObj: new ModeLoad(cy1, parameters1),\n  // },\n  {\n    modeName: 'modeNull',\n    textKey: 'Pointer',\n    icon: assets.iconPointer,\n    modeObj1: new ModeNull(cy1, parameters1),\n    modeObj2: new ModeNull(cy2, parameters2),\n  },\n  {\n    modeName: 'modeNode',\n    textKey: 'Nodes',\n    icon: assets.iconNode,\n    modeObj1: new ModeNode(cy1, parameters1),\n    modeObj2: new ModeNull(cy2, parameters2),\n  },\n  {\n    modeName: 'modeEdge',\n    textKey: 'Edges',\n    icon: assets.iconEdge,\n    modeObj1: new ModeEdge(cy1, parameters1),\n    modeObj2: new ModeNull(cy2, parameters2),\n  },\n  // {\n  //   modeName: 'modeClear',\n  //   textKey: 'Clear',\n  //   icon: assets.iconClear,\n  //   modeObj: new ModeClear(cy2, parameters2),\n  // },\n  // {\n  //   modeName: 'modeExport',\n  //   textKey: 'Export',\n  //   icon: assets.iconExport,\n  //   modeObj: new ModeExport(cy2, parameters2),\n  // },\n  // {\n  //   modeName: 'modeImport',\n  //   textKey: 'Import',\n  //   icon: assets.iconImport,\n  //   modeObj: new ModeImport(cy2, parameters2),\n  // },\n  // // {\n  // //   modeName: 'modeLoad',\n  // //   textKey: 'Load',\n  // //   icon: assets.iconLoad,\n  // //   modeObj: new ModeLoad(cy2, parameters2),\n  // // },\n  // {\n  //   modeName: 'modeNull',\n  //   textKey: 'Pointer',\n  //   icon: assets.iconPointer,\n  //   modeObj: new ModeNull(cy2, parameters2),\n  // },\n  // {\n  //   modeName: 'modeNode',\n  //   textKey: 'Nodes',\n  //   icon: assets.iconNode,\n  //   modeObj: new ModeNode(cy2, parameters2),\n  // },\n  // {\n  //   modeName: 'modeEdge',\n  //   textKey: 'Edges',\n  //   icon: assets.iconEdge,\n  //   modeObj: new ModeEdge(cy2, parameters2),\n  // },\n];\n\nconst targetToolbarModes = [\n  {\n    modeName: 'modeIsoCheck',\n    textKey: 'Check',\n    icon: assets.iconCheck,\n    modeObj1: new ModeIsoCheck(cy1, parameters1),\n    modeObj2: new ModeNull(cy2, parameters2),\n  },\n  {\n    modeName: 'modeLoadRandom',\n    textKey: 'Target',\n    icon: assets.iconQuestion,\n    modeObj1: new ModeNull(cy1, parameters1),\n    modeObj2: new ModeLoadRandom(cy2, parameters2),\n  },\n];\n\nconst invariants: ModeConfig[] = [\n  {\n    modeName: 'modeNumNodes',\n    invName: 'numNodes',\n    textKey: 'Order',\n    modeObj1: new ModeNumNodes(cy1, parameters1),\n    modeObj2: new ModeNumNodes(cy2, parameters2),\n  },\n  {\n    modeName: 'modeNumEdges',\n    invName: 'numEdges',\n    textKey: 'Size',\n    modeObj1: new ModeNumEdges(cy1, parameters1),\n    modeObj2: new ModeNumEdges(cy2, parameters2),\n  },\n  {\n    modeName: 'modeGirth',\n    invName: 'girth',\n    textKey: 'Girth',\n    modeObj1: new ModeGirth(cy1, parameters1),\n    modeObj2: new ModeGirth(cy2, parameters2),\n  },\n  {\n    modeName: 'modeDegSequence',\n    invName: 'degSequence',\n    textKey: 'Degree_sequence',\n    modeObj1: new ModeDegSequence(cy1, parameters1),\n    modeObj2: new ModeDegSequence(cy2, parameters2),\n  },\n  {\n    modeName: 'modeComponents',\n    invName: 'components',\n    textKey: 'Connected_components',\n    modeObj1: new ModeComponents(cy1, parameters1),\n    modeObj2: new ModeComponents(cy2, parameters2),\n  },\n  {\n    modeName: 'modeCircuitRank',\n    invName: 'circuitRank',\n    textKey: 'Circuit_rank',\n    modeObj1: new ModeCircuitRank(cy1, parameters1),\n    modeObj2: new ModeCircuitRank(cy2, parameters2),\n  },\n  {\n    modeName: 'modeDiameter',\n    invName: 'diameter',\n    textKey: 'Diameter',\n    modeObj1: new ModeDiameter(cy1, parameters1),\n    modeObj2: new ModeDiameter(cy2, parameters2),\n  },\n  {\n    modeName: 'modeDetAdjacency',\n    invName: 'detAdjacency',\n    textKey: 'Adjacency_det',\n    modeObj1: new ModeDetAdjacency(cy1, parameters1),\n    modeObj2: new ModeDetAdjacency(cy2, parameters2),\n  },\n  // {\n  //   modeName: 'modeAdjacencyMatrix',\n  //   textKey: 'Adjacency_matrix',\n  //   modeObj: new ModeAdjacencyMatrix(cy1, parameters1),\n  // },\n];\n\nconst primaryMode: ModeConfig = defaultMode;\nconst secondaryMode: ModeConfig = defaultMode;\n\n// eslint-disable-next-line no-void\nvoid i18next.use(LanguageDetector).init(i18nextOptions);\nconst localize = locI18next.init(i18next);\n\n// Make Language Selector\nfunction createLangSelector() {\n  const divLangSelector = d3.select('#langSelector').classed('dropdown', true);\n\n  divLangSelector\n    .append('button')\n    .attr('class', 'btn btn-secondary dropdown-toggle')\n    .attr('type', 'button')\n    .attr('data-bs-toggle', 'dropdown')\n    .append('img')\n    .attr('src', assets.iconTranslate)\n    .attr('width', '30px');\n\n  divLangSelector.append('ul').classed('dropdown-menu', true);\n\n  divLangSelector\n    .select('.dropdown-menu')\n    .selectAll('li')\n    .data(langList)\n    .enter()\n    .append('li')\n    .append('a')\n    .classed('dropdown-item', true)\n    .attr('href', '#')\n    .on('click', (ev, d) => {\n      i18next\n        .changeLanguage(d.isoCode)\n        .then(() => localize('.translate'))\n        .catch((reason) => {\n          // TODO: Handle the error properly instead of ignoring it.\n          // eslint-disable-next-line no-console\n          console.error(`Changing to language ${d.isoCode} failed.`, reason);\n        });\n    })\n    .text((d) => d.endonym);\n}\n\n// Specify types of global variables that are not yet defined on 'window'.\ndeclare global {\n  interface Window {\n    cy1: cytoscape.Core;\n    cy2: cytoscape.Core;\n    parameters1: Parameters;\n    parameters2: Parameters;\n    d3: typeof d3;\n    findIso: (a: void) => void;\n    primaryMode: ModeConfig;\n    secondaryMode: ModeConfig;\n    collapseTarget: (a: void) => void;\n    uncollapseTarget: (a: void) => void;\n  }\n}\nwindow.d3 = d3;\nwindow.parameters1 = parameters1;\nwindow.parameters2 = parameters2;\n\n/* MAIN */\n\nfunction main() {\n  // After this, window.cy is shadowing the function-local cy.\n  window.cy1 = cy1;\n  window.cy2 = cy2;\n  window.primaryMode = primaryMode;\n  window.secondaryMode = secondaryMode;\n\n  primaryMode.modeObj1.activate();\n  primaryMode.modeObj2.activate();\n  // secondaryMode.activate();\n\n  createLangSelector();\n\n  // Make Target-collapse button\n  function collapseTarget() {\n    d3.select('#grid-container').classed('full-mode', false);\n    d3.select('#grid-container').classed('collapsed-mode', true);\n    d3.selectAll('.target, .target-tools').style('display', 'none');\n    d3.selectAll('.invTabCy2').style('display', 'none');\n  }\n  // window.collapseTarget = collapseTarget;\n\n  function uncollapseTarget() {\n    d3.select('#grid-container').classed('collapsed-mode', false);\n    d3.select('#grid-container').classed('full-mode', true);\n    d3.selectAll('.target, .target-tools').style('display', 'initial');\n    d3.selectAll('.invTabCy2').style('display', 'table-row');\n  }\n  // window.uncollapseTarget = uncollapseTarget;\n\n  d3.select('#toolbar')\n    .append('input')\n    .attr('type', 'checkbox')\n    .attr('id', 'targetCollapseButton')\n    .classed('btn-check', true)\n    .attr('autocomplete', 'off')\n    .on('click', () => {\n      if (\n        (d3.select('#targetCollapseButton').node() as HTMLInputElement).checked\n      ) {\n        uncollapseTarget();\n      } else {\n        collapseTarget();\n      }\n    });\n\n  d3.select('#toolbar')\n    .append('label')\n    .style('float', 'right')\n    .classed('btn btn-secondary', true)\n    .attr('for', 'targetCollapseButton')\n    .html('Which graph is this?');\n\n  // Make toolbar buttons\n  // createButtons('#toolbar', toolbarModes);\n  // createButtons('#target-tools', targetToolbarModes);\n\n  const toolbarButtons = toolbarModes.map((d) => createButton(d));\n  d3.select('#toolbar')\n    .selectAll('span')\n    .data(toolbarButtons)\n    .enter()\n    .append((d) => d);\n\n  const targetToolbarButtons = targetToolbarModes.map((d) => createButton(d));\n  const output = document.createElement('span');\n  d3.select(output).attr('id', 'isoOutput').append('div');\n  targetToolbarButtons.splice(1, 0, output);\n\n  d3.select('#target-tools')\n    .selectAll('span')\n    .data(targetToolbarButtons)\n    .enter()\n    .append((d) => d);\n\n  // // Make Load modal\n  // d3.select('#btn-modeLoad')\n  //   .attr('data-bs-toggle', 'modal')\n  //   .attr('data-bs-target', '#exampleModal');\n\n  // Make Invariants table\n  createInvariantsTable(invariants);\n\n  // Make Gallery\n  makeGraphGallery(graphGalleryList, cy1, parameters1);\n\n  // Make infobox items\n  // function updateInfo() {\n  //   const infoboxItems = d3\n  //     .select('#infobox')\n  //     .selectAll<HTMLDivElement, unknown>('div.infoItem')\n  //     .data(infoboxModes);\n\n  //   const newItems = infoboxItems\n  //     .enter()\n  //     .append('div')\n  //     .attr('id', (d) => `infoItem-${d.modeName}`)\n  //     .classed('infoItem', true);\n\n  //   newItems // Info icon\n  //     .append('img')\n  //     .attr('src', assets.iconInfo)\n  //     .attr('data-bs-toggle', 'collapse')\n  //     .attr('data-bs-target', (d) => `#infoItem-text-${d.modeName}`)\n  //     .on('click', (ev: Event) => {\n  //       ev.stopPropagation();\n  //     });\n\n  //   newItems.append('div').classed('outputText', true); // container for text\n\n  //   newItems // Tip text\n  //     .append('div')\n  //     .attr('id', (d) => `infoItem-text-${d.modeName}`)\n  //     .attr('data-bs-parent', '#infobox')\n  //     .attr('data-bs-toggle', 'collapse')\n  //     .classed('tipText', true)\n  //     .classed('collapse', true)\n  //     .classed('translate', true)\n  //     .attr('data-i18n', (d) => `[html]${d.textKey}_Tip`);\n  //   // .html((d) => i18next.t(`${d.textKey}_Tip`));\n\n  //   newItems.on('click', (ev: MouseEvent, d) => {\n  //     const target = ev.currentTarget;\n  //     if (target instanceof Element) {\n  //       if (d.modeObj === secondaryMode) {\n  //         switchSecondaryMode(modeNull);\n  //         d3.select(target).classed('infoItemActive', false);\n  //       } else {\n  //         switchSecondaryMode(d.modeObj);\n  //         d3.select('.infoItemActive').classed('infoItemActive', false);\n  //         d3.select(target).classed('infoItemActive', true);\n  //       }\n  //     }\n  //   });\n\n  //   // update selection\n  //   infoboxItems\n  //     .merge(newItems)\n  //     .select('.outputText')\n  //     .html(\n  //       (d) =>\n  //         `<span class=\"translate\" data-i18n=\"[html]${d.textKey}\">\n  //         ${i18next.t(d.textKey)}\n  //         </span>:\n  //         ${d.modeObj.infobox()}`,\n  //     );\n\n  //   // if (!d3.select('.infoItemActive').empty()) {\n  //   //   d3.select('.infoItemActive').datum().modeObj.render();\n  //   if (secondaryMode !== modeNull) {\n  //     secondaryMode.render();\n  //   }\n  // }\n\n  // window.infoboxModes = infoboxModes;\n\n  cy1.on('cm-graph-updated', () => updateInvariantsTable(invariants));\n  cy2.on('cm-graph-updated', () => updateInvariantsTable(invariants));\n\n  // updateInfo();\n  // d3.select('.infoItem').classed('infoItemActive', true);\n\n  // //Other test functions\n  // function showGraphExport() {\n  //   const json = cy.json();\n  //   const jsonString = JSON.stringify(json, null, 4);\n  //   d3.select('#outputText').text(jsonString);\n  // }\n  // d3.select('#showJSON').on('click', showGraphExport);\n\n  collapseTarget();\n\n  localize('.translate');\n}\n\nready(main);\n","/* eslint-disable class-methods-use-this */\n// import * as d3 from 'd3-selection';\nimport { Core } from 'cytoscape';\nimport { Mode, Parameters } from './modes';\nimport graphGalleryList from '../../graph-gallery/graphs-list.json';\nimport * as agr from '../../graph-gallery/graphs-assets';\n\nexport default class ModeLoadRandom implements Mode {\n  cy;\n\n  parameters;\n\n  loadFile: (filename: string) => void;\n\n  constructor(cy: Core, parameters: Parameters) {\n    this.cy = cy;\n    this.parameters = parameters;\n\n    this.loadFile = (grId) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      fetch(agr[grId as keyof typeof agr])\n        .then((response) => response.json())\n        .then((data) => {\n          this.cy.json(data as object);\n\n          this.cy.layout({ name: 'random' }).run();\n          this.cy.fit(undefined, 30); // zoom and pan to fill the viewport\n          cy.nodes().positions((n) => n.renderedPosition()); // fix the rendered positions as model positions\n          this.cy.fit(undefined, 30); // pan to center again (zoom should be ~1)\n\n          this.parameters.nodeIndex = this.cy.nodes().map((e) => e.id());\n          this.cy.emit('cm-graph-updated');\n        });\n    };\n  }\n\n  activate = () => {\n    const numGraphs = graphGalleryList.length;\n    const idx = Math.floor(Math.random() * numGraphs);\n    this.loadFile(graphGalleryList[idx].file);\n    // eslint-disable-next-line no-console\n    console.log(`Loaded ${graphGalleryList[idx].name}`);\n  };\n\n  render() {}\n\n  infobox() {\n    return '';\n  }\n\n  deactivate = () => {};\n}\n","/* eslint-disable class-methods-use-this */\nimport * as d3 from 'd3-selection';\nimport { Core } from 'cytoscape';\nimport { Mode, Parameters } from './modes';\n\nexport default class ModeIsoCheck implements Mode {\n  cy;\n\n  parameters;\n\n  findIsomorphisms: () => void;\n\n  constructor(cy: Core, parameters: Parameters) {\n    this.cy = cy;\n    this.parameters = parameters;\n\n    this.findIsomorphisms = () => {\n      if (\n        window.Worker &&\n        this.parameters.isoTarget &&\n        this.parameters.isoTargetParams\n      ) {\n        const worker = new Worker(\n          new URL('./sgiso_worker.ts', import.meta.url),\n          {\n            type: 'module',\n          },\n        );\n        const cy1 = this.cy;\n        const cy2 = this.parameters.isoTarget;\n        const parameters1 = this.parameters;\n        const parameters2 = this.parameters.isoTargetParams;\n\n        const A = cy1.elements().utils().adjacencyMatrix();\n        const B = cy2.elements().utils().adjacencyMatrix();\n\n        worker.postMessage([B, A]);\n\n        worker.onmessage = (e) => {\n          // console.log(e.data);\n          if ((e.data as number[][][]).length > 0) {\n            const morphism = (e.data as number[][][])[0];\n            cy1\n              .layout({\n                name: 'preset',\n                animate: true,\n                animationDuration: 2000,\n                positions: (cy1node: string) => {\n                  const cy1nodeId = (\n                    cy1node as unknown as cytoscape.NodeSingular\n                  ).id();\n                  const idx1 = parameters1.nodeIndex.indexOf(cy1nodeId);\n                  const idx2 = morphism[idx1].indexOf(1);\n                  const cy2nodeId = parameters2.nodeIndex[idx2];\n                  const finalpos = cy2.$(`#${cy2nodeId}`).position();\n                  // eslint-disable-next-line no-console\n                  console.log(cy1nodeId, idx1, idx2, cy2nodeId);\n                  return finalpos;\n                },\n              })\n              .run();\n            d3.select('#isoOutput')\n              .classed('yes', true)\n              .select('div')\n              .html('Graphs are isomorphic');\n          } else {\n            d3.select('#isoOutput')\n              .classed('no', true)\n              .select('div')\n              .html('Graphs are <strong> not </strong> isomorphic');\n          }\n        };\n      } else {\n        // eslint-disable-next-line no-console\n        console.log(\"Your browser doesn't support web workers.\");\n      }\n    };\n\n    window.findIso = this.findIsomorphisms;\n  }\n\n  activate = () => {\n    this.findIsomorphisms();\n  };\n\n  render() {}\n\n  infobox() {\n    return '';\n  }\n\n  deactivate = () => {\n    d3.select('#isoOutput')\n      .classed('yes', false)\n      .classed('no', false)\n      .select('div')\n      .html('');\n  };\n}\n","\"use strict\";\n\nmodule.exports = function (workerUrl, origin, isESM) {\n  if (origin === self.location.origin) {\n    // If the worker bundle's url is on the same origin as the document,\n    // use the worker bundle's own url.\n    return workerUrl;\n  } else {\n    // Otherwise, create a blob URL which loads the worker bundle with `importScripts`.\n    var source = isESM ? 'import ' + JSON.stringify(workerUrl) + ';' : 'importScripts(' + JSON.stringify(workerUrl) + ');';\n    return URL.createObjectURL(new Blob([source], {\n      type: 'application/javascript'\n    }));\n  }\n};","let workerURL = require('./helpers/get-worker-url');\nlet url = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"7xBTE\"));\nmodule.exports = workerURL(url.toString(), url.origin, true);","import * as d3 from 'd3-selection';\nimport { Core } from 'cytoscape';\nimport { Mode, Parameters } from './modes/modes';\nimport graphGalleryList from '../graph-gallery/graphs-list.json';\nimport * as agr from '../graph-gallery/graphs-assets';\nimport { GraphRegister } from './graph-gallery-scripts/register-graphs';\nimport ModeNull from './modes/ModeNull';\nimport { iconPointer, iconDijkstra } from './assets';\n\ntype ModeConfig = {\n  modeName: string;\n  invName?: string;\n  textKey: string;\n  icon?: string;\n  modeObj1: Mode;\n  modeObj2: Mode;\n};\n\nconst defaultMode = {\n  modeName: 'modeNull',\n  textKey: 'Pointer',\n  icon: iconPointer,\n  modeObj1: new ModeNull(window.cy1, window.parameters1),\n  modeObj2: new ModeNull(window.cy2, window.parameters2),\n};\n\nfunction switchPrimaryMode(newMode: ModeConfig) {\n  window.primaryMode.modeObj1.deactivate();\n  window.primaryMode.modeObj2.deactivate();\n  window.primaryMode = newMode;\n  window.primaryMode.modeObj1.activate();\n  window.primaryMode.modeObj2.activate();\n}\n\nfunction switchSecondaryMode(newMode: ModeConfig) {\n  window.secondaryMode.modeObj1.deactivate();\n  // window.secondaryMode.modeObj2.deactivate();\n  window.secondaryMode = newMode;\n  window.secondaryMode.modeObj1.activate();\n  // window.secondaryMode.modeObj2.activate();\n  window.cy1.emit('cm-graph-updated');\n  window.cy2.emit('cm-graph-updated');\n}\n\n/* Loading graph into cy instance */\n\n// Loads graph given by `grId` into the `cy` instance, with parameters `parameters`.\nfunction loadGraph(cy: Core, parameters: Parameters, grId: string) {\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  fetch(agr[grId as keyof typeof agr])\n    .then((response) => response.json())\n    .then((data) => {\n      cy.json(data as object);\n\n      cy.fit(undefined, 30); // zoom and pan to fill the viewport\n      cy.nodes().positions((n) => n.renderedPosition()); // fix the rendered positions as model positions\n      cy.fit(undefined, 30); // pan to center again (zoom should be ~1)\n\n      // eslint-disable-next-line no-param-reassign\n      parameters.nodeIndex = cy.nodes().map((e) => e.id());\n      cy.emit('cm-graph-updated');\n    });\n}\n\n/* Gallery of graphs */\n\nfunction makeGraphGallery(\n  data: GraphRegister[],\n  loadIntoCy: Core,\n  parametersCy: Parameters,\n) {\n  const galleryContainer = d3\n    .select('#gallery')\n    .selectAll('div.graphGalleryItem')\n    .data(data, (d) => (d as GraphRegister).file);\n\n  // enter selection\n  const newItems = galleryContainer\n    .enter()\n    .append('div')\n    .classed('graphGalleryItem', true)\n    // .attr('data-bs-dismiss', 'modal')\n    .on('click', (ev, d) => {\n      loadGraph(loadIntoCy, parametersCy, d.file);\n    });\n\n  newItems\n    .append('div')\n    .append('img')\n    .attr('src', (d) => agr[`${d.file}_Icon` as keyof typeof agr])\n    .attr('height', '80px');\n\n  newItems.append('div').html((d) => d.name);\n\n  // exit selection\n  galleryContainer.exit().remove();\n\n  // update selection: none\n}\n\nfunction makeFilteredGraphGallery() {\n  // console.log(d3.selectAll('.filter'));\n  let graphs = graphGalleryList;\n  // console.log(graphs);\n  d3.selectAll('.filter').each((d, i, n) => {\n    if ((n[i] as HTMLInputElement).value !== '') {\n      graphs = graphs.filter(\n        (g) =>\n          String(g.invariants[(d as ModeConfig).invName]) ===\n          (n[i] as HTMLInputElement).value,\n      );\n      // console.log(graphs);\n      // console.log(Number(n[i].value);\n      // console.log(d, i, n);\n    }\n  });\n  makeGraphGallery(graphs, window.cy1, window.parameters1);\n}\n\n/* Invariants table */\n\n// function updateInvariantsTable(usedInvariants: ModeConfig[]) {\n//   const invariantsItem = d3\n//     .select('#invariants')\n//     .select('table')\n//     .selectAll<HTMLTableRowElement, unknown>('tr.invariantTR')\n//     .data(usedInvariants);\n\n//   // enter\n//   const newInvariant = invariantsItem\n//     .enter()\n//     .append('tr')\n//     .classed('invariantTR', true);\n\n//   newInvariant\n//     .append('td')\n//     .classed('invariantTableInvName', true)\n//     .classed('translate', true)\n//     .attr('data-i18n', (d) => `[html]${d.textKey}`);\n\n//   newInvariant\n//     .append('td')\n//     .append('input')\n//     .classed('filter', true)\n//     .attr('cm-invariant', (d) => `${d.modeName}`)\n//     .on('change', () => makeFilteredGraphGallery());\n\n//   newInvariant.append('td').classed('invCy1', true); // container for text\n//   newInvariant.append('td').classed('invCy2', true);\n\n//   // exit\n//   invariantsItem.exit().remove();\n\n//   // update\n//   invariantsItem\n//     .merge(newInvariant)\n//     .select('.invCy1')\n//     .html((d) => d.modeObj1.infobox());\n\n//   invariantsItem\n//     .merge(newInvariant)\n//     .select('.invCy2')\n//     .html((d) => d.modeObj2.infobox());\n// }\n\n// function createInvariantsTable(usedInvariants: ModeConfig[]) {\n//   const invTable = d3\n//     .select('#invariants')\n//     .append('table')\n//     .classed('invTable', true)\n//     .append('tr');\n//   invTable.append('th').html('Invariant');\n//   invTable.append('th').html('Filter');\n//   invTable.append('th').html('Your graph');\n//   invTable.append('th').html('Target graph');\n//   updateInvariantsTable(usedInvariants);\n// }\n\n/* Invariants table horizontal */\n\nfunction updateInvariantsTable(usedInvariants: ModeConfig[]) {\n  const headers = d3\n    .select('.invTabHeaders')\n    .selectAll<HTMLTableCellElement, unknown>('td.invData')\n    .data(usedInvariants);\n\n  const filters = d3\n    .select('.invTabFilters')\n    .selectAll<HTMLTableCellElement, unknown>('td.invData')\n    .data(usedInvariants);\n\n  const invCy1 = d3\n    .select('.invTabCy1')\n    .selectAll<HTMLTableCellElement, unknown>('td.invData')\n    .data(usedInvariants);\n\n  const invCy2 = d3\n    .select('.invTabCy2')\n    .selectAll<HTMLTableCellElement, unknown>('td.invData')\n    .data(usedInvariants);\n\n  // enter\n  headers\n    .enter()\n    .append('td')\n    .classed('invData', true)\n    .classed('translate', true)\n    .attr('data-i18n', (d) => `[html]${d.textKey}`)\n    // .classed('btn', true)\n    // .classed('btn-primary', true)\n    .on('click', (ev: MouseEvent, d) => {\n      const target = ev.currentTarget;\n      if (target instanceof Element) {\n        if (d === window.secondaryMode) {\n          switchSecondaryMode(defaultMode);\n          d3.select(target).classed('infoItemActive', false);\n        } else {\n          switchSecondaryMode(d);\n          d3.select('.infoItemActive').classed('infoItemActive', false);\n          d3.select(target).classed('infoItemActive', true);\n        }\n      }\n    });\n\n  filters\n    .enter()\n    .append('td')\n    .classed('invData', true)\n    .append('input')\n    .classed('filter', true)\n    .attr('cm-invariant', (d) => `${d.modeName}`)\n    .on('change', () => makeFilteredGraphGallery());\n\n  const newInvCy1 = invCy1.enter().append('td').classed('invData', true);\n  const newInvCy2 = invCy2.enter().append('td').classed('invData', true);\n\n  // exit\n  headers.exit().remove();\n  filters.exit().remove();\n  invCy1.exit().remove();\n  invCy2.exit().remove();\n\n  // update\n  invCy1.merge(newInvCy1).html((d) => d.modeObj1.infobox());\n  invCy2.merge(newInvCy2).html((d) => d.modeObj2.infobox());\n\n  if (window.secondaryMode !== defaultMode) {\n    window.secondaryMode.modeObj1.render();\n    // window.secondaryMode.modeObj2.render();\n  }\n}\n\nfunction createInvariantsTable(usedInvariants: ModeConfig[]) {\n  const invTable = d3\n    .select('#invariants')\n    .append('table')\n    .classed('invTab', true);\n  invTable.append('tr').classed('invTabHeaders', true).append('td');\n  // .html('Invariant');\n  invTable\n    .append('tr')\n    .classed('invTabCy1', true)\n    .append('td')\n    .html('Your graph');\n  invTable\n    .append('tr')\n    .classed('invTabCy2', true)\n    .append('td')\n    .html('Target graph');\n  invTable\n    .append('tr')\n    .classed('invTabFilters', true)\n    .append('td')\n    .html('Gallery filter');\n\n  updateInvariantsTable(usedInvariants);\n}\n\n// Create toolbar buttons\nfunction createButton(modeconfig: ModeConfig) {\n  const container = document.createElement('span');\n  const button = d3\n    .select(container)\n    .append('button')\n    .classed('toolbar-button', true)\n    .attr('id', `btn-${modeconfig.modeName}`);\n  button\n    .append('img')\n    .attr('src', modeconfig.icon ? modeconfig.icon : iconDijkstra);\n  button\n    .append('div')\n    .classed('translate', true)\n    .attr('data-i18n', modeconfig.textKey);\n\n  button.on('click', () => {\n    switchPrimaryMode(modeconfig);\n  });\n  return container;\n}\n\nexport {\n  ModeConfig,\n  defaultMode,\n  switchPrimaryMode,\n  switchSecondaryMode,\n  loadGraph,\n  makeGraphGallery,\n  updateInvariantsTable,\n  createInvariantsTable,\n  createButton,\n};\n"],"names":["parcelRequire","register","JSON","parse","$5KKEU","$iVMYU","$5bb0935c03f60653$exports","workerUrl","origin","isESM","self","location","source","stringify","URL","createObjectURL","Blob","type","$963d25a2a326a898$var$url","resolve","import","meta","url","$963d25a2a326a898$exports","toString","$8k2jw","$39fbdaf3d175e085$export$de627736f8c8ffd7","modeName","textKey","icon","iconPointer","modeObj1","$iw6Aq","default","window","cy1","parameters1","modeObj2","cy2","parameters2","$39fbdaf3d175e085$export$f792092e81150b10","newMode","secondaryMode","deactivate","activate","emit","$39fbdaf3d175e085$export$df731bf88a33837","data","loadIntoCy","parametersCy","galleryContainer","select","selectAll","d","file","newItems","enter","append","classed","on","ev","cy","parameters","grId","fetch","$gPtcg","then","response","json","fit","undefined","nodes","positions","n","renderedPosition","nodeIndex","map","e","id","attr","html","name","exit","remove","$39fbdaf3d175e085$export$986abe66460069ed","usedInvariants","headers","filters","invCy1","invCy2","target","currentTarget","Element","graphs","$parcel$interopDefault","$jE6or","each","i","value","filter","g","String","invariants","invName","$39fbdaf3d175e085$var$makeFilteredGraphGallery","newInvCy1","newInvCy2","merge","infobox","render","$39fbdaf3d175e085$export$1d9b5f1c054ce15","invTable","$39fbdaf3d175e085$export$9b6d6ca62970729f","modeconfig","container","document","createElement","button","$d6xW4","iconDijkstra","primaryMode","$fe5f1c7dd3edccfe$var$cy1","$lVRnG","$o8PHX","cyOptions","getElementById","$fe5f1c7dd3edccfe$var$cy2","$fe5f1c7dd3edccfe$var$parameters2","idNodeCount","idEdgeCount","outputContainer","$fe5f1c7dd3edccfe$var$parameters1","isoTarget","isoTargetParams","$fe5f1c7dd3edccfe$var$toolbarModes","iconClear","$fL0K9","iconExport","$lwSBY","iconImport","$big6F","iconNode","$3cw25","iconEdge","$4nuKq","$fe5f1c7dd3edccfe$var$targetToolbarModes","iconCheck","constructor","this","findIsomorphisms","Worker","worker","A","elements","utils","adjacencyMatrix","B","postMessage","onmessage","length","morphism","layout","animate","animationDuration","cy1node","cy1nodeId","idx1","indexOf","idx2","cy2nodeId","finalpos","$","position","console","log","run","findIso","iconQuestion","numGraphs","idx","Math","floor","random","loadFile","$fe5f1c7dd3edccfe$var$invariants","$2JjVN","$9vYTT","$cyd7k","$bRZgy","$d6NgQ","$3KKZx","$3vMvi","$dY183","$fe5f1c7dd3edccfe$var$primaryMode","$fe5f1c7dd3edccfe$var$secondaryMode","$6Wn7g","use","$1sw6k","init","i18nextOptions","$fe5f1c7dd3edccfe$var$localize","$2iS8N","d3","$54AWr","collapseTarget","style","divLangSelector","iconTranslate","langList","changeLanguage","isoCode","catch","reason","error","text","endonym","$fe5f1c7dd3edccfe$var$createLangSelector","node","checked","toolbarButtons","targetToolbarButtons","output","splice"],"version":3,"file":"identify.2b5f47bf.js.map"}